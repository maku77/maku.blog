<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure のメモ on まくろぐ</title><link>https://maku.blog/p/vrhjtds/</link><description>Recent content in Azure のメモ on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sat, 12 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/vrhjtds/index.xml" rel="self" type="application/rss+xml"/><item><title>LUIS と QnA Maker でキーの管理方法が異なるのはなぜか？</title><link>https://maku.blog/p/8myms6s/</link><pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/8myms6s/</guid><description>LUIS や QnA Maker サービスを利用するためのエンドポイントキーは、下記の 2 種類が提供されます。
実運用のためのキー: チャットクライアントなどからの、一般的な問い合わせを処理するためのキー。 管理用のキー: 各サービスの情報を取得したり、データを編集したりするためのキー。 LUIS も QnA Maker も便利なサービスなのですが、Azure リソースとの結びつけ方法や、キーの管理方法が異なっているため、最初はわけがわからなくなるかもしれません。 例えば、Azure ポータル上の RESOURCE MANAGEMENT / Keys のページで表示されるキー（サブスクリプションキー）が、LUIS の場合は実運用のためのキーであるのに対し、QnA Maker の場合は管理用のキー であったりします。
LUIS/QnA を使用する場合は、それぞれ、エンドポイントキーとしてどちらのキーを使用するかを間違えないようしなければいけません。
LUIS のサブスクリプションキー（実運用のためのキー）: Azure ポータルの LUIS リソースの Keys で表示されるもの LUIS のオーサリングキー（管理用のキー）: LUIS ポータルの Authoring Key で表示されるもの QnA Maker のエンドポイントキー（実運用のためのキー）: QnA Maker ポータルのプロファイル設定で表示されるもの QnA Maker のサブスクリプションキー（管理用のキー）: Azure ポータルの QnA Maker リソースの Keys で表示されるもの この時点で、キーの管理方法が QnA Maker と LUIS では完全に逆になっています。 Azure 上でのインタフェースは LUIS リソースと QnA Maker リソースで見た目が同じなので、混乱に拍車をかけています。</description></item><item><title>Azure 関連のアイコン集</title><link>https://maku.blog/p/bqodqji/</link><pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/bqodqji/</guid><description>Azure 関連アイコンのダウンロード Microsoft Azure 関連のアイコンは下記のサイトからダウンロードできるようになっています。 PNG 形式や SVG 形式のファイルが入っているので、Azure 関連の構成図を作成するときに便利です。
Download Microsoft Azure, Cloud and Enterprise Symbol / Icon Set 例えばこーゆーアイコンがたくさん入っています。
アイコン 説明 Azure App Service - Web App Azure Cognitive Services Azure Cognitive Services - LUIS 全アイコンのリスト 上記のパッケージに含まれているアイコンを一覧表示できる HTML ファイルを用意しました。
icons.zip アーカイブを展開して、azure-icons/all_icons.html を開くと、下記のように全アイコンを一覧表示することができます。 ここから PowerPoint などにコピペして使うのも簡単です。</description></item><item><title>Azure リソースのプレフィックス名（省略名）</title><link>https://maku.blog/p/rcoz9o9/</link><pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/rcoz9o9/</guid><description>Azure で何らかのリソースを作成するときは、リソース名のプレフィックス として、リソースの種類に応じた略称（cosmos- など）をつけることが多いのですが、この略称の指針が Microsoft Docs のサイトに書かれています。 リソース名をどうするかは意外と迷うところなので、こういった情報は地味に助かります。
Azure リソースの種類に推奨される省略形 - Cloud Adoption Framework | Microsoft Docs 例えば次のような感じで定義されています。
リソースの種類 プレフィックス リソースグループ rg- Cosmos DB アカウント cosmos- ストレージアカウント st- 静的 Web アプリ stapp- 関数アプリ func- また、リソース名全体の構成も次のような例で示されています。
図: Azure リソース名の構成（Microsoft Docs より） この辺りは開発チームによってルールが決められているかもしれませんが、まずはこの構成で間に合うか考えてみるとよいと思います。</description></item><item><title>Azure Static Web Apps で静的ウェブサイトを作成する</title><link>https://maku.blog/p/vgt5fqy/</link><pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/vgt5fqy/</guid><description>Azure Static Web Apps とは 2020年5月に Azure Static Web Apps のプレビュー版が公開されました。 これまでは、Azure 上で静的なウェブサイトを作成する場合は、BLOB ストレージを使って HTML/JS ファイルなどをホストする方法がとられていましたが、今後は Static Web Apps のサービスが主流になりそうです。
参考: Azure Storage で静的 Web サイトをホスティングする Azure Static Web Apps は、サイトのビルドやデプロイに GitHub Actions を使うことを前提としているため、Web サイトのコンテンツを GitHub 上で管理することが強制されます。
GitHub Pages でも静的な Web サイトを作成できますが、Azure Static Web Apps を使うと Azure Functions などの API サービスと統合することができます。 静的 Web サイトといいつつも、より高度な Web アプリを作成することができそうです。
Azure Static Web Apps は、ベータ版のうちは無料で使えるようです。 そのうち従量課金に切り替わると思いますが、BLOB ストレージを使った場合の利用料金はめちゃ安だったので、こちらも安価な料金が設定されることを期待しています。
GitHub リポジトリの準備 下記のような簡単な HTML ファイルを作成して、GitHub リポジトリを新規作成 してコミットしておきます。</description></item><item><title>Azure Speech Service を使って音声をテキストに変換する (STT)</title><link>https://maku.blog/p/5zx3ozz/</link><pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/5zx3ozz/</guid><description>Microsoft の Cognitive Services のひとつとして提供されている Speech Service を使用すると、音声をテキストに変換したり、逆にテキストを音声に変換したりすることができます。
ここでは、Python から Speech Service の機能を利用してみます（Windows 10 で動作確認済）。 実行するにはマイクのついた PC が必要です マイクのついていない PC で実行すると SPXERR_MIC_NOT_AVAILABLE エラーが発生します。
準備 Speech Service の準備 Azure Portal から Speech のリソースを作成し、Subscription Key を取得しておいてください。
Speech SDK のインストール Python の azure-cognitiveservices-speech パッケージをインストールします。
$ pip install azure-cognitiveservices-speech Visual Studio C++ Redistributable のインストール 必要があれば、Visual Studio C++ の再頒布可能パッケージをインストールします。
Visual C++ 再頒布可能パッケージ (vc_redist.x64.exe) Python コード 一回だけ変換して終わるバージョン stt.py import azure.cognitiveservices.speech as speechsdk # この設定は適宜変更してください subscription = &amp;#34;e1b5f0964ab743133b7de4f892741c7a&amp;#34; region = &amp;#34;japaneast&amp;#34; language = &amp;#34;ja-JP&amp;#34; # proxy = (&amp;#34;proxy.</description></item></channel></rss>