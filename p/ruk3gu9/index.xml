<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux メモ on まくろぐ</title><link>https://maku.blog/p/ruk3gu9/</link><description>Recent content in Linux メモ on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Fri, 05 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/ruk3gu9/index.xml" rel="self" type="application/rss+xml"/><item><title>Linuxコマンド: date コマンドの使い方</title><link>https://maku.blog/p/ucnv5ck/</link><pubDate>Tue, 23 Feb 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ucnv5ck/</guid><description>Linux や macOS に搭載されている date コマンドの使い方のメモです。
日時をフォーマットして出力する $ date +&amp;#39;%Y-%m-%d&amp;#39; 2021-02-23 $ date +&amp;#39;%Y-%m-%d %H:%M:%S&amp;#39; 2021-02-23 01:08:51 Linux と macOS の date コマンドの違い Linux と macOS では、標準でインストールされている date コマンドが次のように異なります。
Linux &amp;hellip; GUN/Linux 系の date コマンド macOS &amp;hellip; BSD 系の date コマンド そのため、-d オプションと -v オプションの使い方に次のような違いがあります。
1 カ月前の日付を調べる $ date -d &amp;#39;-1 month&amp;#39; # GNU/Linux $ date -d &amp;#39;1 month ago&amp;#39; # GNU/Linux $ date -v-1m # macOS 1 日前の日付を調べる $ date -d &amp;#39;-1 day&amp;#39; # GNU/Linux $ date -v-1d # macOS</description></item><item><title>Linuxコマンド: curl コマンドの使い方メモ（GET/POST リクエスト、ファイルのダウンロード）</title><link>https://maku.blog/p/phdp2do/</link><pubDate>Fri, 03 Apr 2015 00:00:00 +0000</pubDate><guid>https://maku.blog/p/phdp2do/</guid><description>curl コマンドは URL を指定してサーバー上のリソースにアクセスするためのコマンドで、Web API のテストや、ファイルのダウンロードに使用できます。 昔は curl コマンドは Linux 用のコマンドという認識でしたが、Windows 10 には標準搭載されるようになりました。 curl は様々なプロトコルで通信できますが、主に HTTP/HTTPS が使用されます。
curl コマンドでファイルをダウンロードする curl コマンドはデフォルトではダウンロードしたファイルを標準出力に出力します。 -o（小文字のオー）オプションや、-O（大文字のオー）オプションを指定することで、ファイルに保存する ことができます。
指定したファイル名で保存 (-o) # カレントディレクトリに sample.zip という名前で保存（この場合は後述の -O を使うと楽） $ curl -L http://example.com/sample.zip -o sample.zip # 保存先を絶対パスで指定 $ curl -L http://example.com/sample.zip -o /tmp/sample.zip ダウンロード元と同じファイル名で保存 (-O) sample.zip という名前で保存 $ curl -L -O http://example.com/sample.zip curl コマンドで GET/POST リクエストを送信する REST API などのテストに curl コマンドを利用できます。
GET リクエスト 特にオプションを指定しなければ、HTTP の GET リクエストが送信されます。</description></item><item><title>Linuxメモ: apt (apt-get) コマンドの使い方メモ</title><link>https://maku.blog/p/rdq2cnx/</link><pubDate>Tue, 21 Feb 2012 00:00:00 +0000</pubDate><guid>https://maku.blog/p/rdq2cnx/</guid><description>apt と dpkg の違い Debian/Ubuntu 系 Linux のパッケージ管理には apt (apt-get) コマンドを使いますが、 Low-Level なパッケージ管理コマンドとして dpkg コマンドも備えています。
参考: DebianPackageManagement - Debian Wiki 参考: AptCLI - Debian Wiki dpkg コマンドは純粋にシステムにパッケージをインストールする部分のみを担うため、インターネットからパッケージをダウンロードしたり、依存関係を自動解決したりする仕組みは備えていません。 そこで、apt は dpkg をラップする形でこれらの機能を提供します。
dpkg &amp;hellip; Debian/Ubuntu にパッケージをインストールする仕組み apt &amp;hellip; パッケージの依存関係を解決してダウンロードし、パッケージをインストールする仕組み（ただし、インストールには内部的に dpkg が使われる） apt と apt-get の違い 2016 年にリリースされた Ubuntu 16.04 の頃から、apt-get コマンドの代わりに apt コマンドが使われるようになりました。 2020 年にリリースされた Ubuntu 20.04 でも apt-get、apt-cache コマンドは使用可能ですが、今後は主に apt コマンドを使っていくことになりそうです。
apt はもともと Linux Mint ユーザーによって作られたコマンドで、これまで apt-get や apt-cache などに散らばっていたコマンド群を整理して使いやすくしています。</description></item><item><title>Linuxメモ: デバイスドライバ作成の雑多メモ</title><link>https://maku.blog/p/tm4iwbq/</link><pubDate>Wed, 08 Feb 2012 00:00:00 +0000</pubDate><guid>https://maku.blog/p/tm4iwbq/</guid><description> デバイスドライバは kernel 空間で動作するプログラムで、kernel の機能を使って実装することができる。一方、通常のプログラムはユーザランドで動作する。 デバイスドライバは kernel 自体に組み込んでしまう方法と、ローダブルモジュールとして動的にロード (insmod)、アンロード (rmmod) できるようにする方法がある。 ユーザランドで動作する普通のプログラムが、デバイスドライバの機能を使うには、デバイスファイルを介してアクセスする。 デバイスファイルの操作は、open、close、read、write のような基本的なファイル操作関数を使用する。</description></item><item><title>Linuxコマンド: テンポラリディレクトリを作成する (mktemp)</title><link>https://maku.blog/p/oo32y2x/</link><pubDate>Thu, 30 Jun 2011 00:00:00 +0000</pubDate><guid>https://maku.blog/p/oo32y2x/</guid><description>mktemp コマンドを使用して、一時ディレクトリを作成することができます。
$ mktemp -d /tmp/tmp.LE04SMiEzq mktemp コマンドは、作成したファイルやディレクトリのパスを表示するので、シェルスクリプト内で以下のようにすれば、そのパスを変数に格納することができます。
tempdir=`mktemp -d`</description></item><item><title>Linuxコマンド: ディレクトリのサイズを調べる (du)</title><link>https://maku.blog/p/95pkhzc/</link><pubDate>Wed, 29 Jun 2011 00:00:00 +0000</pubDate><guid>https://maku.blog/p/95pkhzc/</guid><description>du コマンドを使って、ディレクトリ内のファイルの合計サイズを調べることができます。
$ du -hs mydir 685M mydir 各オプションは次のような効果があります。
-h (--human-readable) &amp;hellip; 人に読みやすい単位でサイズ表示します（例: 1K、234M、2G） -s (--summarize) &amp;hellip; 合計サイズのみを表示します サイズ部分だけを表示したい場合は、cut コマンドで 1 番目のフィールドを切り出してしまうのが手っ取り早いです。
$ du -hs mydir | cut -f1 685M</description></item><item><title>Linuxコマンド: ファイルの MIME メディアタイプを調べる (file)</title><link>https://maku.blog/p/6i7dvxj/</link><pubDate>Mon, 20 Jun 2011 00:00:00 +0000</pubDate><guid>https://maku.blog/p/6i7dvxj/</guid><description>file コマンドに -i オプションを付けて実行すると、そのファイルの MIME タイプを調べることができます。
$ file -i sample.txt sample.txt: text/plain; charset=us-ascii</description></item><item><title>Linuxコマンド: ファイルの内容を8進数や16進数でダンプする (od)</title><link>https://maku.blog/p/cw7ekxc/</link><pubDate>Mon, 20 Jun 2011 00:00:00 +0000</pubDate><guid>https://maku.blog/p/cw7ekxc/</guid><description>od コマンドの基本（8 進数でダンプする） od (octal dump) コマンドを使用すると、ファイルの内容を 8 進数や 16 進数でダンプすることができます。
ファイル内容を 8 進数でダンプする $ od sample.jar | head -5 0000000 045520 002003 000024 000010 000010 122216 037257 000000 0000020 000000 000000 000000 000000 000000 000024 000000 042515 0000040 040524 044455 043116 046457 047101 043111 051505 027124 0000060 043115 106505 005313 030302 042420 001767 103771 040374 0000100 072502 121341 133273 020473 145340 106255 044315 007207 先頭のカラムはアドレスを示しています。
アドレスの後ろからは、6 文字ずつに区切って 8 進数のデータが並びます。 8 進数では 1 文字が 3 ビットなので、6 文字で最大 18 ビットを示すことができますが、od コマンドの出力では、その内の 16 ビット（= 2 バイト）を使用しています。 頭の 2 ビットは必ず 0 でパディングされているので、各カラムの先頭の数字は 0 か 1 になります（アスキーコードのテキストなら必ず 0 でしょう）。</description></item><item><title>Linuxメモ: デバイスドライバのライセンスについて</title><link>https://maku.blog/p/89tt5ie/</link><pubDate>Sun, 19 Jun 2011 00:00:00 +0000</pubDate><guid>https://maku.blog/p/89tt5ie/</guid><description>デバイスドライバを Linux カーネルに直接取り込む（静的リンクする）場合は GPL になります。 Linux カーネル自体が GPL なので、ドライバも GPL になるということです。 このようなドライバはランレベル 1 でロードされます。
カーネルモジュール（ローダブルモジュール）としてドライバを動的にロードする場合は、ライセンスは開発者が決めることができます。 通常はランレベル 3 になった時点で、insmod や modprobe コマンドでロードします。
カーネルモジュールとして作成するドライバのライセンスは、 コードの中で以下のように MODULE_LICENSE マクロを使用して指定します。
MODULE_LICENSE(&amp;#34;Dual BSD/GPL&amp;#34;); ライセンスは以下のものから選択することができます。
GPL GPL v2 GPL and additional rights Dual BSD/GPL Dual MIT/GPL Dual MPL/GPL Proprietary # default</description></item><item><title>Linuxメモ: syslog のログの保存先の設定</title><link>https://maku.blog/p/rm78k9i/</link><pubDate>Sun, 20 Feb 2011 00:00:00 +0000</pubDate><guid>https://maku.blog/p/rm78k9i/</guid><description>/etc/syslog.conf に以下のように記述されていれば、debug レベルのログは /var/log/debug に、info, notice, warn レベルのログは /var/log/messages に記録されます。
*.=debug; \ auth,authpriv.none;\ news.none;mail.none -/var/log/debug *.=info;*.=notice;*.=warn;\ auth,authpriv.none;\ cron,daemon.none;\ mail,news.none -/var/log/messages</description></item><item><title>Linuxコマンド: パッチファイルを作成・適用する (diff, patch)</title><link>https://maku.blog/p/nyehhfd/</link><pubDate>Fri, 11 May 2007 00:00:00 +0000</pubDate><guid>https://maku.blog/p/nyehhfd/</guid><description>パッチの基本 (diff/patch) パッチファイルの作成 sample.cpp #include &amp;lt;iostraem&amp;gt; int main() { std::cout &amp;lt;&amp;lt; &amp;#34;AAA&amp;#34; &amp;lt;&amp;lt; std::endl; return 0; } ew/sample.cpp #include &amp;lt;iostraem&amp;gt; int main() { std::cout &amp;lt;&amp;lt; &amp;#34;BBB&amp;#34; &amp;lt;&amp;lt; std::endl; return 0; } 例えば、上記のような sample.cpp の内容を new/sample.cpp に変更するためのパッチファイルを作成するには、次のように diff コマンドを実行します。
$ diff -u sample.cpp new/sample.cpp &amp;gt; sample.patch -u オプションは unified diff 形式で差分を出力することを示しています（他の形式でも出力可能ですが、patch 用のパッチファイルを作成するときは、ほとんどの場合 unified diff 形式が使用されるようです）。
これで、次のようなパッチファイルが生成されます。
sample.patch --- sample.cpp 2007-05-11 20:36:13.265625000 +0900 +++ new/sample.cpp 2007-05-11 20:26:31.875000000 +0900 @@ -1,6 +1,6 @@ #include &amp;lt;iostraem&amp;gt; int main() { - std::cout &amp;lt;&amp;lt; &amp;#34;AAA&amp;#34; &amp;lt;&amp;lt; std::endl; + std::cout &amp;lt;&amp;lt; &amp;#34;BBB&amp;#34; &amp;lt;&amp;lt; std::endl; return 0; } 差分を表示している各行の 1 文字目は次のような意味を持っています。</description></item></channel></rss>