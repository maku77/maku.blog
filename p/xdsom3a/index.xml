<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nginx（Web サーバー）のメモ on まくろぐ</title><link>https://maku.blog/p/xdsom3a/</link><description>Recent content in Nginx（Web サーバー）のメモ on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Thu, 21 Mar 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/xdsom3a/index.xml" rel="self" type="application/rss+xml"/><item><title>Let's Encrypt certificate expiration notice が来たら</title><link>https://maku.blog/p/cniq5vr/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/cniq5vr/</guid><description>Let&amp;rsquo;s Encrypt Expiry Bot からの証明書期限切れメール 2 ヶ月ほど前に、Sakura VPS レンタルサーバーを Let&amp;rsquo;s Encrypt で SSL 対応していたら、こんなメールが来ました。
Your certificate (or certificates) for the names listed below will expire in 20 days (on 10 Apr 19 07:02 +0000). Please make sure to renew your certificate before then, or visitors to your website will encounter errors.
We recommend renewing certificates automatically when they have a third of their total lifetime left. For Let&amp;rsquo;s Encrypt&amp;rsquo;s current 90-day certificates, that means renewing 30 days before expiration.</description></item><item><title>Nginx で 403 Forbidden エラーが出るときのチェック項目</title><link>https://maku.blog/p/ew5zmmw/</link><pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ew5zmmw/</guid><description>nginx サーバを起動して Web ブラウザでアクセスしたときに、ブラウザ上に 403 Forbidden エラーが表示されるときは、パーミッション系のエラーが発生しています。
サーバ自体は稼働していますので、下記のあたりを確認すれば無事表示されるようになります。
ファイルに読み取り権限、ディレクトリに実行権限を付ける html ファイルなどのコンテンツファイル自身には読み取り権限、ディレクトリには実行権限が必要です。
$ chmod 0755 -R /home/maku/website ドキュメントルートまでのディレクトリに実行権限 (x) を付ける 例えば、ドキュメントルートを /home/maku/website としている場合は、/、/home、/home/maku、/home/maku/website のディレクトリに実行権限が必要です。
$ chmod +x /home/maku 特定のディレクトリのパーミッションは下記のように確認できます。
$ ls -ld /home/maku drwx--x--x 5 maku maku 156 1月 10 17:32 /home/maku nginx の設定を再読み込み ファイル群のパーミッションを変更しただけでは nginx の再起動は必要になりませんが、nginx の設定ファイルを変更した場合は、設定ファイルを反映する必要があります。
$ sudo service nginx reload</description></item><item><title>Nginx の設定: http でアクセスされた場合に https にリダイレクトする</title><link>https://maku.blog/p/jowgstm/</link><pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/jowgstm/</guid><description>nginx サーバの SSL 対応（https 有効化）が終わった後は、http プロトコルによるアクセスは避けてもらいたいですね。 そのような場合は、下記のように設定しておけば、http でアクセスされた場合に、https で再度アクセスしてもらうようにクライアントに応答することができます（301 という値は、Moved Permanently を示す HTTP レスポンスコードです）。
/etc/nginx/conf.d/xxx.conf server { listen 80; server_name example.com; return 301 https://$host$request_uri; } server { listen 443 ssl http2; server_name example.com; # ... } 結果として、Web ブラウザから http://example.com/ にアクセスすると、Web ブラウザは自動的に https://example.com/ という URL でアクセスし直すことになります。</description></item><item><title>Sakura VPS レンタルサーバーを Let's Encrypt で SSL 対応</title><link>https://maku.blog/p/xkpjfcf/</link><pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/xkpjfcf/</guid><description>今更ですが、さくらインターネットでレンタルしている Sakura VPS の Web サーバーを SSL (https) に対応しました。 とりあえず今回は無料の Let&amp;rsquo;s Encrypt の証明書を、nginx サーバに設定します。
使っている OS が CentOS6 だったので、ついでに CentOS7 をクリーンインストールすることにしました。 といっても、さくらインターネットの VPS の設定画面でポチポチとやっていくだけ。 ここで、[public] CentOS_LetsEncrypt というスタートアップスクリプトを選んだら、自動的に SSL の証明書などの対応が完了します。 入力するパラメータはドメイン（example.com など）と連絡用のメールアドレスだけ。
Web サーバの nginx も自動的にインストールされて、Web サーバにアクセスできる状態で起動するのですが、nginx の設定は少しだけ調整する必要があります（ドキュメントルートなど）。
数分で OS の再インストールが完了し、下記のような nginx の設定ファイルが自動生成されていました（ドメイン名は example.com に置換してあります）。 SSL の設定も完了した状態になっています。
/etc/nginx/conf.d/https.conf map $http_upgrade $connection_upgrade { default upgrade; &amp;#39;&amp;#39; close; } server { listen 443 ssl http2; server_name example.com; location / { root /usr/share/nginx/html; index index.</description></item><item><title>Nginx の設定: Nginx の設定ファイルの書き方が正しいか確認する (configtest)</title><link>https://maku.blog/p/3q8uzoo/</link><pubDate>Mon, 21 Sep 2015 00:00:00 +0000</pubDate><guid>https://maku.blog/p/3q8uzoo/</guid><description>nginx の configtest コマンドを使用すると、nginx のコンフィグファイルの記述方法が正しいかを確認することができます。
このコマンドは管理者権限で実行する必要があります。
$ sudo /etc/init.d/nginx configtest nginx: the configuration file /etc/nginx/nginx.conf syntax is ok nginx: configuration file /etc/nginx/nginx.conf test is successful</description></item><item><title>Nginx の設定: Nginx の設定ファイルの変更を反映する（再読み込み）</title><link>https://maku.blog/p/6aazmy3/</link><pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate><guid>https://maku.blog/p/6aazmy3/</guid><description>nginx の設定ファイル (/etc/nginx/nginx.conf や /etc/nginx/conf.d/*.conf) の内容を変更した場合は、下記のようにして反映することができます。
$ sudo service nginx reload $ sudo /etc/init.d/nginx reload nginx の起動はとても速いので、単純な Web コンテンツだけを提供しているの Web サーバであれば、nginx サービス自体を再起動してしまってもよいでしょう。
$ sudo service nginx restart $ sudo /etc/init.d/nginx restart</description></item><item><title>Nginx の設定: Nginx でバーチャルホストを設定する（リバースプロキシ）</title><link>https://maku.blog/p/q8tw6c4/</link><pubDate>Tue, 03 Dec 2013 00:00:00 +0000</pubDate><guid>https://maku.blog/p/q8tw6c4/</guid><description>アクセス時のドメイン名により別の Web サーバに処理をフォワードする 例えば、http://test.example.com/ というアドレス（80番ポート）で nginx サーバにアクセスしてきたときに、localhost:7000 で動作している Web サーバに処理を委譲するには、下記のように設定します。
/etc/nginx/conf.d/example.com.conf server { listen 80; server_name test.example.com; location / { proxy_pass http://localhost:7000/; } } この機能を利用することで、一つの PC 内に複数の Web サーバを（異なるポート）で立ち上げておき、アクセスしてきた URL（のドメイン名）によって処理を振り分けることができます。 例えば、次のように Web サーバへのアクセスをフォワードできます。
http://aaa.example.com/ でアクセスされた場合 → localhost:7000 で処理 http://bbb.example.com/ でアクセスされた場合 → localhost:7100 で処理 http://ccc.example.com/ でアクセスされた場合 → localhost:7200 で処理 それぞれのドメインは同じ IP アドレスにマッピングされており、物理的には 1 つのマシンに対してアクセスが発生するのですが、クライアント（Web ブラウザのユーザ）から見ると、あたかも異なるホストにアクセスしているかのように見えます（ドメイン名が異なるので）。 バーチャルなホストが存在しているような動作をするということで、このような Web サーバの機能をバーチャルホストと呼びます。
また、このように、サーバ環境側（ここでは 80 ポートのサーバ）でいったんアクセスを受けておいて、アドレス等を見て別の内部サーバ（ここでは 7000 ポートで待ち受けているサーバなど）に処理をフォーワードする仕組みのことを、リバースプロキシと呼びます。
リバースプロキシというのは Web サーバのためだけの仕組みではなく、より一般的なサーバの仕組みを指す名前です。 nginx や Apache などの Web サーバのバーチャルホスト機能は、リバースプロキシの仕組み（概念）を利用して実現されているということです。</description></item><item><title>Nginx の設定: Nginx の設定ファイル (nginx.conf) の場所</title><link>https://maku.blog/p/pms426x/</link><pubDate>Mon, 02 Dec 2013 00:00:00 +0000</pubDate><guid>https://maku.blog/p/pms426x/</guid><description>nginx の設定ファイルは、/etc/nginx/nginx.conf です。 ソースからビルドする場合は、./configure の実行時にパスを指定できます。
この設定ファイルの中で、以下のように include ディレクティブが指定されているため、/etc/nginx/conf.d/ ディレクトリ内にある個別の設定ファイル (*.conf) も読み込まれるようになっています。
http { ... include /etc/nginx/conf.d/*.conf; } バーチャルホスト機能を利用して複数ドメインのサーバを運用するようなケースでは、ドメインごとに設定ファイルを分けておくと管理しやすいでしょう。 例えば、example.com ドメインのサーバ用には /etc/nginx/conf.d/example.com.conf を作成します。</description></item><item><title>Nginx の基本: Nginx をインストールする</title><link>https://maku.blog/p/wyeboxi/</link><pubDate>Sun, 01 Dec 2013 00:00:00 +0000</pubDate><guid>https://maku.blog/p/wyeboxi/</guid><description>yum で nginx をインストールする ここでは、CentOS などの Linux 環境を想定し、nginx を yum でインストールします。 下記のような yum の設定ファイルを作成しておくことで、最新に近い nginx をインストールできるようになります。
/etc/yum.repos.d/nginx.repo [nginx] name=nginx repo baseurl=http://nginx.org/packages/centos/$releasever/$basearch/ gpgcheck=0 enabled=1 下記のコマンドで nginx をインストールします（バージョンアップも同じコマンドで実行できます）。
$ sudo yum install nginx インストールできたか確認するために、バージョンを表示してみましょう。
$ nginx -v nginx version: nginx/1.4.4 nginx の起動 下記のようにして nginx サーバを起動できます。
$ sudo service nginx start 動作しているかを確認。
$ sudo service nginx status nginx (pid 19996) is running... PC 起動時に nginx が自動起動するようにする nginx が無事に起動するようになったら、chkconfig でマシンの立ち上げ時に nginx が自動起動するようにしておきましょう。
nginx を自動起動するように設定 $ sudo chkconfig nginx on 設定内容の確認 $ chkconfig --list nginx nginx 0:off 1:off 2:on 3:on 4:on 5:on 6:off</description></item></channel></rss>