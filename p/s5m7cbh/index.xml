<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Next.js のその他の記事 on まくろぐ</title><link>https://maku.blog/p/s5m7cbh/</link><description>Recent content in Next.js のその他の記事 on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 01 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/s5m7cbh/index.xml" rel="self" type="application/rss+xml"/><item><title>Next.js で useState とローカルストレージ (localStorage) を連動させる</title><link>https://maku.blog/p/cwdyhec/</link><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/cwdyhec/</guid><description>何をするか？ React (Next.js) の useState フックは、Web ページの状態を保持するものですが、ページのリロードや、ブラウザの再起動を行うと、その状態はリセットされてしまいます。
一方、Web ブラウザに搭載されている localStorage や sessionStorage を使用すると、キー＆バリュー（両方とも文字列のみ）の形でデータを保存することができます。
ここでは、これらを一緒に使うことで、useState で管理している状態をローカルストレージに保存・復帰できるようにしてみます。
使い方のイメージ 例えば、Web サイト上でダークモードの On/Off を行うスイッチがあるとして、その状態をローカルストレージに保存できるようにしたいとします。
図: ダークモード切り替えのイメージ ダークモードの状態は useDarkMode のようなカスタムフックを作成して、次のように扱えると便利です。
src/pages/sample.tsx import { NextPage } from &amp;#39;next&amp;#39; import { useDarkMode } from &amp;#39;../hooks/useDarkMode&amp;#39; const SamplePage: NextPage = () =&amp;gt; { // 一見 useState と同様だが localStorage と連動している const [isDark, setDark] = useDarkMode(false) return ( &amp;lt;div style={{ width: &amp;#39;100vw&amp;#39;, height: &amp;#39;100vh&amp;#39;, color: isDark ? &amp;#39;white&amp;#39; : &amp;#39;black&amp;#39;, background: isDark ?</description></item><item><title>Next.js で開発環境で実行しているときに Web サイト上に dev 表示する (TargetEnvIndicator)</title><link>https://maku.blog/p/d4p4fr4/</link><pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/d4p4fr4/</guid><description>何をするか？ Next.js (React) などで Web サイトの開発を行うとき、その開発フェーズに応じて、開発環境 (dev)、ステージング環境 (stg)、本番環境 (prod) などを分けてリリースしていくことが多いと思います。 このとき、ブラウザ上でどのフェーズのサイトを表示しているのかが分かるように、画面上に dev 環境 のようなインジケーターを表示すると便利です（上図）。
ここでは、環境変数 NEXT_PUBLIC_TARGET_ENV の値が prod 以外のときに、上記のような表示をすることにします。
参考: Next.js で環境変数を扱う (.env, NEXT_PUBLIC, NODE_ENV) 実装例 次のコンポーネント TargetEnvIndicator は、画面右下に環境名（例: dev 環境）を表示します。
components/common/TargetEnvIndicator.tsx import { FC } from &amp;#39;react&amp;#39; /** * ビルド時のターゲット環境が `prod` 以外のときに、画面右下に環境名を表示します。 */ export const TargetEnvIndicator: FC = () =&amp;gt; { const target = process.env.NEXT_PUBLIC_TARGET_ENV ?? &amp;#39;dev&amp;#39; // 本番環境 (prod) の場合は何も表示しない if (target === &amp;#39;prod&amp;#39;) return null return ( &amp;lt;div style={{ position: &amp;#39;fixed&amp;#39;, right: 10, bottom: 10, padding: &amp;#39;0.</description></item><item><title>Next.js の public 以下のファイルのパスを正しく扱う</title><link>https://maku.blog/p/xjjbwes/</link><pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/xjjbwes/</guid><description>Next.js アプリでは、/public ディレクトリ以下に配置した静的リソースファイル（画像ファイルなど）は、次のような感じで URL のドメイン直下に配置されたファイルとして参照できるようになります。
// import Image from &amp;#39;next/image&amp;#39; &amp;lt;Image src=&amp;#34;/me.png&amp;#34; alt=&amp;#34;Picture of the author&amp;#34; width={500} height={500} /&amp;gt; 仮に、作成した Web サイトを GitHub Pages の「プロジェクトサイト」として公開する場合は、https://username.github.io/reponame/ のように一階層深い URL パスがアプリのルートになりますが、next.config.js で次のようにベースパスを設定しておけば、Next.js の Image コンポーネントは正しいパス (/reponame/me.png) に補正して画像ファイルを参照してくれます。
next.config.js const urlPrefix = &amp;#39;/reponame&amp;#39; module.exports = { // ... assetPrefix: urlPrefix, basePath: urlPrefix, trailingSlash: true, } 参考: Next.js アプリを GitHub Actions でビルドして GitHub Pages で公開する 一方で、Next.js が提供する Image コンポーネントなどを使わず、img 要素をそのまま使った場合、このような URL プレフィックスの付加は自動では行われず、画像が参照できなくなるという問題が発生します。</description></item><item><title>Next.js アプリのディレクトリ構成を考える（Atomic Design と Presentational and Container Components）</title><link>https://maku.blog/p/4is2ahp/</link><pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/4is2ahp/</guid><description>Web サイトを構築するにあたって、よく参照されるコンポーネントの分類手法として、Atomic Design と Presetational and Container Components があります。
Atomic Design &amp;hellip; UI の粒度と具体性によって 5 レベルに分類する Presentational and Container Components &amp;hellip; 「表示」と「振る舞い」の役割で分類する ここでは、それぞれに関して概要をざっと眺めた上で、Next.js プロジェクトにどんな形で適用していけばいいかを考えてみます。
Atomic Design とは Web デザインにおける UI コンポーネントの分割粒度の考え方として、Brad Frost 氏の Atomic Design があります。
Atomic Design - Brad Frost 氏のブログ記事 Atomic Design - 書籍版（Webで読めます） Atomic Design では、UI コンポーネントを粒度の小さい順に次のように分類します。
図: Atomic Design の 5 つのレベル（Brad Frost 氏のブログより） Atoms（原子） &amp;hellip; これ以上分割できない単位（例: ラベル、入力、ボタン） Molecules（分子） &amp;hellip; 意味のある UI パーツ単位 （例: 検索フォーム (ラベル + 入力 + ボタン)） Organisms（有機体、生物） &amp;hellip; ページの一部分を構成する。Molecules をどう組み合わせるべきかという、アプリドメインの知識が入ってくる。 Templates（テンプレート） &amp;hellip; ページ全体のレイアウト。最初はプレースホルダーだらけかもしれないが、徐々に具体的な Organisms が配置されて最終形態に近づいていく。 Pages（ページ） &amp;hellip; Templates に具体的なデータを入れたもの（特定のページ）。 よく Organisms の扱いで迷うようですが、汎用性の側面から次のような感じで分類すると、プロジェクト内でコンポーネントを整理しやすくなります。 Pages に関しては、Templates に対してデータを流し込んだものなので、ここでは省略しています。</description></item><item><title>Next.js で環境変数を扱う (.env, NEXT_PUBLIC, NODE_ENV)</title><link>https://maku.blog/p/gbpeyov/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/gbpeyov/</guid><description>Next.js アプリ内での環境変数の振る舞い process.env の振る舞い Node.js の process.env による環境変数の参照が有効なのは、基本的には次のようなサーバーサイドで実行されるコード内のみです。
ビルド時あるいはアクセス時に呼び出される getStaticPaths や getStaticProps 必ずアクセス時に呼び出される getServerSideProps 必ずアクセス時に呼び出される API ルートのハンドラ関数 (handler) src/pages/sample.tsx export const getStaticProps: GetStaticProps&amp;lt;PageProps&amp;gt; = async context =&amp;gt; { // このコードはビルド時に実行されるので環境変数を参照できる console.log(process.env.VAR_NAME) return { props: {} } } NEXT_PUBLIC プレフィックス ただし、例外として、NEXT_PUBLIC_ で始まる環境変数を process.env.NEXT_PUBLIC_XXX のように参照すると、next build によるビルド時に変数値がインライン展開されるので、クライアントサイドで実行されるコード（コンポーネントの実装内）から参照できます。
src/pages/sample.tsx const SamplePage: FC = () =&amp;gt; { return &amp;lt;&amp;gt; &amp;lt;p&amp;gt;Public env: {process.env.NEXT_PUBLIC_ANALYTICS_ID}&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Private env: {process.env.API_SECRET_KEY} （必ず空っぽ）&amp;lt;/p&amp;gt; &amp;lt;/&amp;gt; } 上記のようにすると、process.env.NEXT_PUBLIC_ANALYTICS_ID の部分には、ビルド時の環境変数 NEXT_PUBLIC_ANALYTICS_ID の値がそこに埋め込まれ、process.</description></item></channel></rss>