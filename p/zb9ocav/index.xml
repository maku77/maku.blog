<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ツール on まくろぐ</title><link>https://maku.blog/p/zb9ocav/</link><description>Recent content in ツール on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 26 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/zb9ocav/index.xml" rel="self" type="application/rss+xml"/><item><title>Alacritty で快適なターミナル環境を手にいれる（macOS/Windows/Linux 対応）</title><link>https://maku.blog/p/p9ppdqy/</link><pubDate>Tue, 26 Mar 2024 00:00:00 +0000</pubDate><guid>https://maku.blog/p/p9ppdqy/</guid><description>Alacritty とは Alacritty（アラクリッティ） は、macOS や Windows の「ターミナル」アプリの代わりに使えるターミナルエミュレーターで、次のような特徴を持っています。
Windows/macOS/Linux/BSD など主要な OS をサポート（ノウハウや設定を使いまわせる） Rust で実装されていて高速。レンダリングも GPU で高速。 VI モードでキーボードによる快適な操作が可能 設定ファイルが TOML 形式でわかりやすい（シンプルさを追求しているため、GUI ベースの設定画面は提供しない） vim や tmux のようなターミナルに寄生するアプリと相性がよくて表示の問題が起きにくい スクロールバッファ内の検索が可能 マルチウィンドウモードもあり（ただし思想としては tmux などのターミナルマルチプレクサーを使うべきとしている） 簡単にまとめると、vim や tmux 使いで、シンプルで高速なクロスプラットフォームなターミナルアプリを求めている人にうってつけということですね！ ちなみに、Alacritty という名前の末尾が tty になっているのがおしゃれです（「敏捷性」を表す英単語「alacrity」をもじってます）。
VI モード VI モードに切り替えると、VI 風のキーバインドを使ったカーソルの移動、画面スクロール、検索などが可能になります。 VI モードへの入り方だけ特殊 (Ctrl + Shift + Space) ですが、あとはほぼ VI の操作方法に従って操作できます（参考: まくまく Vim ノート）。
キーバインド 説明 Ctrl + Shift + Space VI モード ON/OFF i VI モード OFF（普通のプロンプト操作に戻る） h / j / k / l カーソル移動 v / Ctrl + v / Shift + v 選択／矩形選択／行選択 y 選択したテキストをヤンク（コピー） Ctrl + B / Ctrl + F 上下スクロール / / ?</description></item><item><title>tmux チートシート</title><link>https://maku.blog/p/hijkfza/</link><pubDate>Sun, 24 Mar 2024 00:00:00 +0000</pubDate><guid>https://maku.blog/p/hijkfza/</guid><description>tmux の基本要素 図: tmux の構成要素 クライアント tmux の起動元となるターミナルアプリです。 クライアントは tmux サーバーを介してセッションやウィンドウを操作します。 最初に tmux コマンドを実行したときに tmux サーバーが立ち上がり、1 つ目のセッションとウィンドウが生成されます。 複数のクライアントが同じセッションに接続できます。 セッション セッションは tmux 内での作業単位で、クライアントからセッションにアタッチすることで、セッション内のウィンドウを操作できるようになります。 セッション内には複数のウィンドウを作成することができます。 クライアントからセッションをデタッチしても、tmux サーバーが存在する限り、セッションは生き続けることができます。 ウィンドウ ウィンドウはセッション内でのトップレベルの表示領域で、見た目としては Web ブラウザのタブのように見えます。 ウィンドウはセンション間で移動することができます。 ウィンドウは複数のペインに分割することができます。 ペイン ペインはウィンドウ内の分割領域を表します。 IDE のようにウィンドウを分割して複数の作業を同時に行えます。 tmux のコマンド入力の仕組み ターミナルアプリなどのクライアントから tmux コマンドを実行すると、tmux セッションが立ち上がり、クライアントがアタッチされます。 アタッチされたクライアント上で PREFIX キーとの組み合わせによるキーシーケンスを入力することで、tmux セッション内のウィンドウを操作できます。 PREFIX キーには、デフォルトで Ctrl + b が割り当てられています。
tmux の制御コマンドには名前が付けられており、tmux コマンドの引数で制御コマンド名を渡すことで実行できるようになっています（内部的には tmux サーバーにコマンドが送られています）。 tmux セッション内で tmux コマンドを実行すると、そのセッションに対しての操作になります。 また、PREFIX → : に続けてコマンド名を入力する方法もあります。
例えば、セッション内に新しいウィンドウを作成したいときは、以下のように複数の方法で実行できます。
PREFIX → c と入力する PREFIX → :new-window と入力する（:neww でも OK） ターミナル上で tmux new-window を実行する（neww でも OK） セッション (Session) tmux の一連の機能を使用するには、最初にセッションを作成する必要があります。 セッションを作成すると、同時に 1 つのウィンドウが作成されます。</description></item><item><title>ウェブサイトのリンク切れを自動でチェックする (muffet)</title><link>https://maku.blog/p/s7q8o5k/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/s7q8o5k/</guid><description>muffet のインストール muffet はウェブサイトのリンク切れをチェックしてくれるコマンドラインツールです。 Go 言語で実装されており、いろいろな OS (Linux、macOS、Windows) で利用することができます。
raviqqe/muffet: Fast website link checker in Go インストール方法は、上記サイトに記述されていますが、例えば macOS であれば、homebrew を使って次のように簡単にインストールできます。
macOS の場合 % brew install muffet 各 OS 用の実行バイナリが欲しければ、Release ページ からダウンロードできます。
muffet の使い方 基本的な使い方は、次のように調べたいウェブページのアドレスを入力するだけです。
% muffet http://localhost:51000 リンク元のサイトアドレスと、アクセスできなかったサイトアドレスの組み合わせが一覧表示されます。
http://localhost:51000/p/eu7djpv/ 404	http://localhost:51000/assets/favicon/180x180.png 404	http://localhost:51000/assets/favicon/192x192.png http://localhost:51000/p/ckahx6k/ 404	http://localhost:51000/assets/favicon/180x180.png 404	http://localhost:51000/assets/favicon/192x192.png 404	http://video.google.com/videoplay?docid=973149761529535925 404 (following redirect https://www.example.com/p/44327.html) http://www.example.com/44327/2005/04/tipsinbox.html muffet は複数スレッドで高速にリンクチェックを行いますが、ひとつのドメインに対する同時接続数を制限したいときは、--max-connections-per-host オプションを指定します。 Web サーバーへの負荷を考慮したいときに使えます。
同時接続数を制限する % muffet --max-connections-per-host=5 http://localhost:51000 --exclude オプションを使うと、チェック対象外とするアドレスを正規表現で指定できます。 例えば、次のようにすれば、https:// で始まるリンクをチェック対象外にできます。 ローカル Web サーバーで開発している場合、このオプション指定によって外部サイトのリンクだけをチェック対象外にできます。</description></item><item><title>macOS のコマンドラインで ZIP ファイルを作成する</title><link>https://maku.blog/p/2it3bjs/</link><pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2it3bjs/</guid><description>ZIP ファイルを作成する（zip コマンド） macOS に標準で付属している zip コマンドを使って、ファイル群を ZIP ファイルとしてアーカイブ（圧縮）できます。
ファイルを 1 つずつ指定する $ zip sample.zip 1.txt 2.txt 3.txt 作成される ZIP ファイル sample.zip +-- 1.txt +-- 2.txt +-- 3.txt ディレクトリごとまとめて ZIP 化する $ zip -r sample.zip dir1 dir2 作成される ZIP ファイル sample.zip +-- dir1/ | +-- 1.txt | +-- 2.txt | +-- 3.txt +-- dir2/ +-- 4.txt +-- 5.txt +-- 6.txt トップディレクトリを含めずに ZIP 化する 例: src ディレクトリ以下のファイルだけ圧縮 $ (cd src &amp;amp;&amp;amp; zip -r .</description></item><item><title>Windows のコマンドラインで ZIP ファイルを作成する (Compress-Archive)</title><link>https://maku.blog/p/vin35f7/</link><pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/vin35f7/</guid><description>Windows のコマンドプロンプト（あるいは PowerShell）から zip ファイルを作成するには、PowerShell の Compress-Archive コマンド を使用します。 特に何もインストールしなくても実行できます。
指定したディレクトリを zip 圧縮する src ディレクトリを dst.zip にアーカイブ C:\&amp;gt; powershell compress-archive src dst 作成される zip ファイル dst.zip +-- src/ +-- file1 +-- file2 +-- file3 出力ファイル名 dst.zip の .zip は省略することができます。 dst.zip を展開すると、ルートに src ディレクトリが現れる状態になります。
ディレクトリ内のファイルのみを zip 圧縮する ルートディレクトリ（この例では src）を zip ファイルに含めずに、そのディレクトリ内のファイル群だけを zip ファイルにまとめたいときは、次のように src/* と指定します。
src ディレクトリの中身だけを dst.zip にアーカイブ C:\&amp;gt; powershell compress-archive src/* dst 作成される zip ファイル dst.zip +-- file1 +-- file2 +-- file3 複数のディレクトリやファイルを zip 圧縮する 圧縮対象のディレクトリやファイルを複数指定するには、次のようにカンマ (,) で列挙します。 カンマの前後にはスペースを入れないことに注意してください。</description></item><item><title>EditorConfig でコーディングスタイルを統一する</title><link>https://maku.blog/p/7aoa6x5/</link><pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/7aoa6x5/</guid><description>EditorConfig とは EditorConfig（.editorconfig ファイル）を導入すると、各種エディタ（Visual Studio、Android Studio、Vim など）に共通のコーディングスタイルを設定することができます。
ソフトウェア開発プロジェクトでは、通常なんらかのコーディングルールが決められています。 ただ、開発者ごとに使用するエディタ、IDE が異なると、設定方法を統一できないという問題が発生します。 EditorConfig は、特定のエディタに依存しない、コーディングスタイルを記述するためのフォーマット（およびツール群） です。
EditorConfig で設定可能な項目は、エンコーディング形式や改行コード、インデントサイズといったごく基本的な項目のみですが、最低限の記述スタイルをプロジェクト全体で素早く統一することができます。
EditorConfig の導入（.editorconfig ファイルの作成） EditorConfig の導入はとても簡単で、次のような設定ファイル (.editorconfig) をプロジェクトのルートに作成するだけです。
.editorconfig # ここが最上位の設定ファイル root = true # 全種類のテキストファイルの基本設定 [*] charset = utf-8 end_of_line = lf indent_size = 4 indent_style = space insert_final_newline = true trim_trailing_whitespace = true # あとは、ファイルの種類ごとに設定を上書き [*.{js,jsx,ts,tsx}] indent_size = 2 max_line_length = 80 [*.{kt,kts}] max_line_length = 100 [*.md] trim_trailing_whitespace = false [*.py] max_line_length = 80 [*.</description></item><item><title>英辞郎の PDIC の高度な使い方</title><link>https://maku.blog/p/en9hm8g/</link><pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate><guid>https://maku.blog/p/en9hm8g/</guid><description>「英辞郎 第十版」に付いている辞書ソフト PDIC-R (Personal Dictionary-R) の高度な使い方をメモメモ φ(・ｪ・o)
これを使いこなすと、英辞郎がかなり便利になります。
熟語の検索 take over + Enter と入力すると、take &amp;hellip; over という英文を検索することができる（&amp;hellip; は任意の数の単語） take ~ over + Enter と入力すると、熟語としての take over の意味そのものを検索することができる。訳語部において、~ は任意の目的語を意味している。 AND/OR 検索（関連語検索） WORD 欄に複数の単語をスペースや | で繋げて入力し、Enter キーを押すことで、AND 検索、OR 検索を行うことができます（関連語検索と言います）。
単語A 単語B + Enter 見出し語の AND 検索を行う。 スペースは半角でも全角でもよい。 単語A|単語B + Enter 見出し語の OR 検索を行う。 ヘルプには | の前後にスペースがあってもよいとされているが、実際はスペースがあるとうまくいかないっぽい。 単語A -単語B + Enter 見出し語に単語Aを含むが、単語Bは含まないものを検索する。 例: dog|cat -my &amp;ndash; 見出し語に「dog」あるいは「cat」を含むが「my」は含まないものを検索する。 単語A +単語B + Enter 見出し語に単語Aが含まれ、かつ、訳に単語Bが含まれるものを検索する。 例: dog cat +やれやれ &amp;ndash; 見出し語に「dog」と「cat」が含まれ、さらに、訳に「やれやれ」が含まれるものを検索する。 | や - は見出し語に作用するのに対し、+ は訳に対して作用するのでかなり特殊ですね。</description></item><item><title>ランダム ID 生成ツール</title><link>https://maku.blog/p/3nx9is3/</link><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid>https://maku.blog/p/3nx9is3/</guid><description>文字数: 文字候補: 再生成 指定した文字数のランダムな ID を生成します。 数字の 1（いち）とアルファベット小文字の l（エル）、数字の 0（ぜろ）とアルファベット大文字の O（オー）は区別しにくいので、デフォルトでは含めないようにしています。 このような UX 上の工夫は、さまざまな標準プロトコルで推奨されています。 例えば、下記は RFC 8628 におけるユーザーコード表示の例です。
参考: RFC 8628 - OAuth 2.0 Device Authorization Grant の例 It is RECOMMENDED to avoid character sets that contain two or more characters that can easily be confused with each other, like &amp;ldquo;0&amp;rdquo; and &amp;ldquo;O&amp;rdquo; or &amp;ldquo;1&amp;rdquo;, &amp;ldquo;l&amp;rdquo; and &amp;ldquo;I&amp;rdquo;. Furthermore, to the extent practical, when a character set contains a character that may be confused with characters outside the character set, a character outside the set MAY be substituted with the one in the character set with which it is commonly confused; for example, &amp;ldquo;O&amp;rdquo; may be substituted for &amp;ldquo;0&amp;rdquo; when using the numerical 0-9 character set.</description></item><item><title>TeraTerm マクロのメモ</title><link>https://maku.blog/p/kx7myd9/</link><pubDate>Tue, 19 Apr 2011 00:00:00 +0000</pubDate><guid>https://maku.blog/p/kx7myd9/</guid><description>マクロの起動の仕方 TeraTerm が起動している場合 メニューから Control → Macro でマクロファイル (.ttl) を選択 TeraTerm を起動してマクロを実行する場合 C:\&amp;gt; ttermpro.exe /M=sample.ttl TeraTerm を起動せずにマクロを実行する場合 C:\&amp;gt; ttpmacro.exe sample.ttl マクロの実行中止ダイアログを表示しないようにするには、/V オプションをつけます。 ttpmacro.exe でマクロを実行した場合、マクロ中で connect コマンドを実行したときに TeraTerm が表示されます。
例1: COM1 ポートでシリアル接続する場合 connect &amp;#39;/C=1&amp;#39; 例2: TCP/IP (Telnet) 接続する場合 connect &amp;#39;host.example.com&amp;#39; 例3: TCP/IP (any port) 接続する場合 connect &amp;#39;host.example.com:8080&amp;#39; 文字列を表示する (dispstr) dispstr を使えば、TeraTerm アプリケーションの機能として文字列を表示できます。 マクロの実行経過などを表示したい場合などは dispstr を使うのがよいでしょう。
dispstr &amp;#39;Hello World&amp;#39;#$0A 末尾の #$0A は改行コード (LF) を表しています。
間違えやすいものに sendln がありますが、これは接続先の端末に対してコマンドを送るものです。 以下のように echo コマンドを送信した場合は、リモートの端末上で echo コマンドが実行されることになります。</description></item><item><title>TeraTerm でログを自動保存する</title><link>https://maku.blog/p/oi9yak2/</link><pubDate>Fri, 17 Jul 2009 00:00:00 +0000</pubDate><guid>https://maku.blog/p/oi9yak2/</guid><description>TeraTerm 起動時にログを自動でファイルに保存するようにする （Version: TeraTerm 4.62 で確認）
メニューから、Setup → Additional settings&amp;hellip; Log のタブを開き、例えば以下のように設定 Default Log File Name (strftime format): %Y%m%dT%H%M%S-log.txt Default Log Save Folder: D:\y\log\teraterm Auto start loggin: Check 最後に Setup → Save setup で設定を保存 これで、TeraTerm 起動時に自動で 20090717T201506-log.txt のような名前で、ログファイルを作成してくれるようになります。
ログファイルの各行に Windows システム時刻を付加する 以下のように設定しておくと、
メニューから File → Log&amp;hellip; （ログ取得中の場合はいったんログ取得を停止してから） Option から Timestamp にチェックを入れて Save 最後に Setup → Save setup で設定を保存 ログファイルの各行に以下のような、時刻のプレフィックスが付くようになります。
[Tue Jun 28 13:37:27.890 2011] ... [Tue Jun 28 13:37:30.590 2011] .</description></item></channel></rss>