<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ツール on まくろぐ</title><link>https://maku.blog/p/zb9ocav/</link><description>Recent content in ツール on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 06 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/zb9ocav/index.xml" rel="self" type="application/rss+xml"/><item><title>macOS のコマンドラインで ZIP ファイルを作成する</title><link>https://maku.blog/p/2it3bjs/</link><pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2it3bjs/</guid><description>ZIP ファイルを作成する（zip コマンド） macOS に標準で付属している zip コマンドを使って、ファイル群を ZIP ファイルとしてアーカイブ（圧縮）できます。
ファイルを 1 つずつ指定する $ zip sample.zip 1.txt 2.txt 3.txt 作成される ZIP ファイル sample.zip +-- 1.txt +-- 2.txt +-- 3.txt ディレクトリごとまとめて ZIP 化する $ zip -r sample.zip dir1 dir2 作成される ZIP ファイル sample.zip +-- dir1/ | +-- 1.txt | +-- 2.txt | +-- 3.txt +-- dir2/ +-- 4.txt +-- 5.txt +-- 6.txt トップディレクトリを含めずに ZIP 化する 例: src ディレクトリ以下のファイルだけ圧縮 $ (cd src &amp;amp;&amp;amp; zip -r .</description></item><item><title>Windows のコマンドラインで ZIP ファイルを作成する (Compress-Archive)</title><link>https://maku.blog/p/vin35f7/</link><pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/vin35f7/</guid><description>Windows のコマンドプロンプト（あるいは PowerShell）から zip ファイルを作成するには、PowerShell の Compress-Archive コマンド を使用します。 特に何もインストールしなくても実行できます。
指定したディレクトリを zip 圧縮する src ディレクトリを dst.zip にアーカイブ C:\&amp;gt; powershell compress-archive src dst 作成される zip ファイル dst.zip +-- src/ +-- file1 +-- file2 +-- file3 出力ファイル名 dst.zip の .zip は省略することができます。 dst.zip を展開すると、ルートに src ディレクトリが現れる状態になります。
ディレクトリ内のファイルのみを zip 圧縮する ルートディレクトリ（この例では src）を zip ファイルに含めずに、そのディレクトリ内のファイル群だけを zip ファイルにまとめたいときは、次のように src/* と指定します。
src ディレクトリの中身だけを dst.zip にアーカイブ C:\&amp;gt; powershell compress-archive src/* dst 作成される zip ファイル dst.zip +-- file1 +-- file2 +-- file3 複数のディレクトリやファイルを zip 圧縮する 圧縮対象のディレクトリやファイルを複数指定するには、次のようにカンマ (,) で列挙します。 カンマの前後にはスペースを入れないことに注意してください。</description></item><item><title>EditorConfig でコーディングスタイルを統一する</title><link>https://maku.blog/p/7aoa6x5/</link><pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/7aoa6x5/</guid><description>EditorConfig とは EditorConfig（.editorconfig ファイル）を導入すると、各種エディタ（Visual Studio、Android Studio、Vim など）に共通のコーディングスタイルを設定することができます。
ソフトウェア開発プロジェクトでは、通常なんらかのコーディングルールが決められています。 ただ、開発者ごとに使用するエディタ、IDE が異なると、設定方法を統一できないという問題が発生します。 EditorConfig は、特定のエディタに依存しない、コーディングスタイルを記述するためのフォーマット（およびツール群） です。
EditorConfig で設定可能な項目は、エンコーディング形式や改行コード、インデントサイズといったごく基本的な項目のみですが、最低限の記述スタイルをプロジェクト全体で素早く統一することができます。
EditorConfig の導入（.editorconfig ファイルの作成） EditorConfig の導入はとても簡単で、次のような設定ファイル (.editorconfig) をプロジェクトのルートに作成するだけです。
.editorconfig # ここが最上位の設定ファイル root = true # 全種類のテキストファイルの基本設定 [*] charset = utf-8 end_of_line = lf indent_size = 4 indent_style = space insert_final_newline = true trim_trailing_whitespace = true # あとは、ファイルの種類ごとに設定を上書き [*.{js,jsx,ts,tsx}] indent_size = 2 max_line_length = 80 [*.{kt,kts}] max_line_length = 100 [*.md] trim_trailing_whitespace = false [*.py] max_line_length = 80 [*.</description></item><item><title>英辞郎の PDIC の高度な使い方</title><link>https://maku.blog/p/en9hm8g/</link><pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate><guid>https://maku.blog/p/en9hm8g/</guid><description>「英辞郎 第十版」に付いている辞書ソフト PDIC-R (Personal Dictionary-R) の高度な使い方をメモメモ φ(・ｪ・o)
これを使いこなすと、英辞郎がかなり便利になります。
熟語の検索 take over + Enter と入力すると、take &amp;hellip; over という英文を検索することができる（&amp;hellip; は任意の数の単語） take ~ over + Enter と入力すると、熟語としての take over の意味そのものを検索することができる。訳語部において、~ は任意の目的語を意味している。 AND/OR 検索（関連語検索） WORD 欄に複数の単語をスペースや | で繋げて入力し、Enter キーを押すことで、AND 検索、OR 検索を行うことができます（関連語検索と言います）。
単語A 単語B + Enter 見出し語の AND 検索を行う。 スペースは半角でも全角でもよい。 単語A|単語B + Enter 見出し語の OR 検索を行う。 ヘルプには | の前後にスペースがあってもよいとされているが、実際はスペースがあるとうまくいかないっぽい。 単語A -単語B + Enter 見出し語に単語Aを含むが、単語Bは含まないものを検索する。 例: dog|cat -my &amp;ndash; 見出し語に「dog」あるいは「cat」を含むが「my」は含まないものを検索する。 単語A +単語B + Enter 見出し語に単語Aが含まれ、かつ、訳に単語Bが含まれるものを検索する。 例: dog cat +やれやれ &amp;ndash; 見出し語に「dog」と「cat」が含まれ、さらに、訳に「やれやれ」が含まれるものを検索する。 | や - は見出し語に作用するのに対し、+ は訳に対して作用するのでかなり特殊ですね。</description></item><item><title>ランダムID生成</title><link>https://maku.blog/p/3nx9is3/</link><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid>https://maku.blog/p/3nx9is3/</guid><description>文字数: 文字候補: 再生成 function generate() { var candidate = document.getElementById('candidate').value; var digits = document.getElementById('digits').value; var result = ''; for (var i = 0; i 指定した文字数のランダムな ID を生成します。 数字の1（いち）とアルファベット小文字のl（エル）、数字の0（ぜろ）とアルファベット大文字のO（オー）は区別しにくいので、デフォルトでは含めないようにしています。</description></item><item><title>TeraTerm マクロのメモ</title><link>https://maku.blog/p/kx7myd9/</link><pubDate>Tue, 19 Apr 2011 00:00:00 +0000</pubDate><guid>https://maku.blog/p/kx7myd9/</guid><description>マクロの起動の仕方 TeraTerm が起動している場合 メニューから Control → Macro でマクロファイル (.ttl) を選択 TeraTerm を起動してマクロを実行する場合 C:\&amp;gt; ttermpro.exe /M=sample.ttl TeraTerm を起動せずにマクロを実行する場合 C:\&amp;gt; ttpmacro.exe sample.ttl マクロの実行中止ダイアログを表示しないようにするには、/V オプションをつけます。 ttpmacro.exe でマクロを実行した場合、マクロ中で connect コマンドを実行したときに TeraTerm が表示されます。
例1: COM1 ポートでシリアル接続する場合 connect &amp;#39;/C=1&amp;#39; 例2: TCP/IP (Telnet) 接続する場合 connect &amp;#39;host.example.com&amp;#39; 例3: TCP/IP (any port) 接続する場合 connect &amp;#39;host.example.com:8080&amp;#39; 文字列を表示する (dispstr) dispstr を使えば、TeraTerm アプリケーションの機能として文字列を表示できます。 マクロの実行経過などを表示したい場合などは dispstr を使うのがよいでしょう。
dispstr 'Hello World'#$0A 末尾の #$0A は改行コード (LF) を表しています。
間違えやすいものに sendln がありますが、これは接続先の端末に対してコマンドを送るものです。 以下のように echo コマンドを送信した場合は、リモートの端末上で echo コマンドが実行されることになります。</description></item><item><title>TeraTerm でログを自動保存する</title><link>https://maku.blog/p/oi9yak2/</link><pubDate>Fri, 17 Jul 2009 00:00:00 +0000</pubDate><guid>https://maku.blog/p/oi9yak2/</guid><description>TeraTerm 起動時にログを自動でファイルに保存するようにする （Version: TeraTerm 4.62 で確認）
メニューから、Setup → Additional settings&amp;hellip; Log のタブを開き、例えば以下のように設定 Default Log File Name (strftime format): %Y%m%dT%H%M%S-log.txt Default Log Save Folder: D:\y\log\teraterm Auto start loggin: Check 最後に Setup → Save setup で設定を保存 これで、TeraTerm 起動時に自動で 20090717T201506-log.txt のような名前で、ログファイルを作成してくれるようになります。
ログファイルの各行に Windows システム時刻を付加する 以下のように設定しておくと、
メニューから File → Log&amp;hellip; （ログ取得中の場合はいったんログ取得を停止してから） Option から Timestamp にチェックを入れて Save 最後に Setup → Save setup で設定を保存 ログファイルの各行に以下のような、時刻のプレフィックスが付くようになります。
[Tue Jun 28 13:37:27.890 2011] .</description></item></channel></rss>