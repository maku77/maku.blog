<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ansible のメモ on まくろぐ</title><link>https://maku.blog/p/8t6hr3d/</link><description>Recent content in Ansible のメモ on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 29 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/8t6hr3d/index.xml" rel="self" type="application/rss+xml"/><item><title>Ansible とは？ Ansible をインストールする</title><link>https://maku.blog/p/m7ju6fq/</link><pubDate>Sat, 22 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku.blog/p/m7ju6fq/</guid><description>Ansible とは？ Ansible は、2012 年に Michael DeHaan 氏によって公開されたコンフィギュレーションツールです。 Ansible を実行するホスト自身の構成を行うこともできるし、複数のホストに対して一括して設定することもできます。 Chef や Puppet に比べて、導入や設定が容易という特徴があります。
類似ツールの比較 ツール名 公開日 作者 作成言語 構成管理ファイル Ansible 2012 年 Michael DeHaan 氏 Python 製 Playbook Chef 2009 年 Adam Jacob 氏 Ruby + Erlang 製 クックブック Puppet 2005 年 Luke Kanies 氏 Ruby 製 マニフェスト Ansible の特徴 ツール自体は Python で記述されています。 コントロールされる側のホスト（マネージドノード）には、Python と SSH さえ入っていればよく、導入が非常に容易です。コントロールする側のホスト（コントロールノード）から、SSH で Python スクリプトを流し込んで実行するという手法です。 複数のホストをプッシュ型でコントロールするので、大量のホスト（数千）の制御も問題なく行えます（複数のホストで並列にコンフィギュレーションが実行される）。ansible-pull というツールを導入すれば、プル型で動作させることも可能です（リモートホストがプロキシ環境内にある場合など）。 設定・構成情報は YAML 形式のテキストファイル (Playbook) で記述します。 Playbook で定義する各種処理（タスク）はモジュールによって提供されており、モジュール自身は様々な言語で実装することが可能 です（200 を超える組み込みモジュールは Python で記述されています）。 実行後の状態に関して冪等性（べきとうせい）が保証されており、何度実行しても同じ状態になるようになっています。Playbook には、「期待する状態」を「宣言的」に記載します。処理手順ではなく、目指すべき姿を定義するということです。 どのような環境でも実行可能な汎用的な Playbook を記述するというよりは、自分たちの組織用にカスタマイズされた Playbook を作成するという用途に向いています。たとえば、apt と yum のどっちのパッケージ管理ツールが使えるのかなどは意識して記述する必要があります。 Ansible の要件 VPS などのリモートサーバーを Ansible で制御できるようにするには、少なくとも対象のサーバー（マネージドノード）に SSH 接続できるようになっていて、Python がインストールされている必要があります。 これは、Ansible が SSH で Python スクリプトを流し込んで、ターゲット上で実行するという仕組みになっているからです。</description></item><item><title>Ansible で Hello World</title><link>https://maku.blog/p/uhu7hs4/</link><pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/uhu7hs4/</guid><description>インベントリーファイルを作る Ansible で制御したいホストは、インベントリーファイル (inventory file) に列挙しておく必要があります。 これは、想定外のホストを操作してしまうのを防ぐための安全策です。 デフォルトでは、インベントーリファイルとして /etc/ansible/hosts というファイルが読み込まれます。 コマンドラインオプション (-i) などで、読み込むファイルを指定する こともできます。
/etc/ansible/hosts（記述例） localhost 192.168.1.20 host.example.com インベントリーファイル内では、上記のように「ホスト名」や「IP アドレス」で制御対象のホスト (managed node) を列挙します。 ここでは、3 つのホストを Ansible のコマンド（ansible や ansible-playbook）で制御できるようにしています。 localhost 以外のホストは、SSH で接続できる状態になっている必要があります（参考: SSH 関連記事）。
ansible コマンドで ping モジュールを実行してみる 最初のステップとして、ansible コマンドで ping モジュールを実行してみます。 ping モジュールは Ansible の組み込みモジュールとして提供されており、ターゲットホストへの接続確認のために使われます。 いわゆる Linux の ping コマンド (ICMP ping) ではないことに注意してください。
準備として、次のようなインベントリーファイル (hosts.ini) をカレントディレクトリに作成しておきます。
hosts.ini（インベントリーファイル） localhost 192.168.1.20 ローカルホストを制御する まずは、localhost に対して（自分自身を制御対象として）、ping モジュールを実行してみます。 ansible コマンドを実行するときは、第 1 パラメータで制御対象とするホスト名を指定します。 前述の通り、指定するホスト名はインベントリーファイル内に列挙されているものの中から選びます。 次のように実行して SUCCESS 表示が出れば成功です（python コマンドのパスに関する警告が出るかもしれませんが、ひとまず無視しておいて大丈夫です）。</description></item><item><title>Ansible で VPS を設定するための準備</title><link>https://maku.blog/p/2yahqx6/</link><pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2yahqx6/</guid><description>何をするか？ ConoHa VPS などの VPS を借りてサーバーをセットアップしようとすると、多くの手順が必要になります。 そんなとき、最初から Ansible で環境構築するようにしておけば、セットアップ手順を Ansible Playbook でドキュメント化することができ、サーバーの再構築が容易になります。
ここでは、初期状態の VPS サーバー（root 接続のみ可能な状態）に、ansible というユーザーを追加し、Ansible で VPS を制御するための環境を整えます。
前提条件 コントロールノード側（手元の PC）には、あらかじめ Ansible の実行環境がインストールされているものとします（参考: Ansible をインストールする）。 マネージドノード側（VPS サーバー）にはパスワードで SSH 接続することが可能で、Python3 の実行環境がインストールされているものとします。最新の Ubuntu であれば、これらのソフトウェアは最初から使えるはずです。 多くの場合、VPS を使い始めた直後は、root ユーザーで直接 SSH 接続できるようになっていると思います。 今回の手順で、Ansible による接続ができるようになった後は、SSH デーモンの設定を変更して、root ユーザーでの直接接続を禁止するようにしておくと安全です。 もちろん、この設定には Ansible を使うことができます。
セットアップの流れ ここでは、VPS に ansible というユーザーを作成し、Ansible で制御できるようにセットアップします。
VPS に ansible ユーザーを作成する ansible ユーザーを sudoers に登録する VPS に ansible ユーザーで SSH 接続できるようにする （おまけ）Ansible で SSH デーモンの設定を変更しておく root ユーザーで直接 SSH 接続すれば専用のユーザーを作成する必要はないのですが、それは sshd の運用上望ましくない ので却下とします。</description></item><item><title>Ansible 関連用語</title><link>https://maku.blog/p/a9twaog/</link><pubDate>Wed, 13 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/a9twaog/</guid><description>モジュール Ansible で使う機能の単位。例えば、ansible.builtin.systemd など。 プレイブック中の各プレイで指定するタスクリストは、モジュールを指定して定義していきます。 インベントリ コントロール対象とするマネージドノードの一覧ファイル。 INI 形式、あるいは YAML 形式で記述します。 シンプルに記述したければ INI 形式、階層構造を明確にしたければ YAML 形式を使います。 ホスト変数 インベントリで定義したホストに対して設定する変数。 インベントリファイルから分離して、host_vars ディレクトリ内の YAML ファイルに記述することもできます。 グループ変数 インベントリで定義したグループに対して設定する変数。 インベントリファイルから分離して、group_vars ディレクトリ内の YAML ファイルに記述することもできます。 インベントリプラグイン (inventory plugins) Ansible 本体にインベントリの機能を提供しているプラグイン。 INI ファイル用の ansible.builtin.ini や、YAML ファイル用の ansible.builtin.yaml などがあります。 他にも動的にインベントリを生成するものもあります。 参考: Index of all Inventory Plugins — Ansible Documentation プレイブック (playbook) マネージドノードに対する処理内容を YAML 形式で定義したもの。 プレイブックは、複数のプレイ (Play) で構成されており、プレイは複数のタスクで構成されています (Playbook ◇─ Play ◇─ Task)。 プラグイン Ansible 本体に対して機能を追加する仕組み。 参考: Indexes of all modules and plugins — Ansible Documentation ホスト / Host Ansible のコントロール対象となるリモートマシン。 ansible.</description></item></channel></rss>