<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ansible のメモ on まくろぐ</title><link>https://maku.blog/p/8t6hr3d/</link><description>Recent content in Ansible のメモ on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 18 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/8t6hr3d/index.xml" rel="self" type="application/rss+xml"/><item><title>Ansible とは？ Ansible をインストールする</title><link>https://maku.blog/p/m7ju6fq/</link><pubDate>Sat, 22 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku.blog/p/m7ju6fq/</guid><description>Ansible とは？ Ansible は、2012 年に Michael DeHaan 氏によって公開されたコンフィギュレーションツールです。 Ansible を実行するホスト自身の構成を行うこともできるし、複数のホストに対して一括して設定することもできます。 Chef や Puppet に比べて、導入や設定が容易という特徴があります。
同様のツール Puppet &amp;hellip; 2005 年に Luke Kanies 氏が公開。Ruby 製。構成管理情報は「マニフェスト」と呼ぶ。 Chef &amp;hellip; 2009 年に Adam Jacob 氏が公開。Ruby + Erlang 製。構成管理情報は「クックブック」と呼ぶ。 Ansible &amp;hellip; 2012 年に Michael DeHaan 氏が公開。Python 製。構成管理情報は「Playbook」と呼ぶ。 Ansible の特徴 ツール自体は Python で記述されています。 コントロールされる側のホストには、Python と SSH さえ入っていればよく、導入が非常に容易です（コントロールする側のホストから、SSH で Python スクリプトを流し込んで実行するという手法）。 複数のホストをプッシュ型でコントロールするので、大量のホスト（数千）の制御も問題なく行えます（複数のホストで並列にコンフィギュレーションが実行される）。ansible-pull というツールを導入すれば、プル型で動作させることも可能です（リモートホストがプロキシ環境内にある場合など）。 設定・構成情報は YAML 形式のテキストファイル (Playbook) で記述します。 Playbook で定義する各種処理（タスク）はモジュールによって提供されており、モジュール自身は様々な言語で実装することが可能 です（200 を超える組み込みモジュールは Python で記述されています）。 実行後の状態に関して冪等性（べきとうせい）が保証されており、何度実行しても同じ状態になるようになっています。Playbook には、「期待する状態」を「宣言的」に記載します。処理手順ではなく、目指すべき姿を定義するということです。 どのような環境でも実行可能な汎用的な Playbook を記述するというよりは、自分たちの組織用にカスタマイズされた Playbook を作成するという用途に向いています。たとえば、apt と yum のどっちのパッケージ管理ツールが使えるのかなどは意識して記述する必要があります。 Ansible のインストール Ansible のコントロールノードとなるマシンには、ansible コマンドをインストールする必要があります。 必要条件は、Linux 系の OS（macOS でも OK）であり、Python 3.</description></item><item><title>Ansible で Hello World</title><link>https://maku.blog/p/uhu7hs4/</link><pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/uhu7hs4/</guid><description>インベントリーファイルを作る Ansible で制御したいホストは、インベントリーファイル (inventory file) に列挙しておく必要があります。 これは、想定外のホストを操作してしまうのを防ぐための安全策です。 デフォルトでは、インベントーリファイルとして /etc/ansible/hosts というファイルが読み込まれます。 コマンドラインオプション (-i) などで、読み込むファイルを指定する こともできます。
/etc/ansible/hosts（記述例） localhost 192.168.1.20 host.example.com インベントリーファイル内では、上記のように「ホスト名」や「IP アドレス」で制御対象のホスト (managed node) を列挙します。 ここでは、3 つのホストを Ansible のコマンド（ansible や ansible-playbook）で制御できるようにしています。 localhost 以外のホストは、SSH で接続できる状態になっている必要があります。
ansible コマンドで ping モジュールを実行してみる インベントリーファイルを用意したら、まずは制御対象のホストに ping を実行してみます。 ping は Ansible の組み込みモジュールとして提供されており、ターゲットホストへの接続確認のために使われます。 いわゆる Linux の ping コマンド (ICMP ping) ではないことに注意してください。
ローカルホストを制御する まずは、localhost に対して（自分自身を制御対象として）、ping を実行してみます。 制御対象とするホスト名は、ansible コマンドの第 1 パラメータで指定します。 次のように SUCCESS 表示が出れば成功です。
例: localhost に対して ping を実行 $ ansible localhost -c local -m ping localhost | SUCCESS =&amp;gt; { &amp;#34;changed&amp;#34;: false, &amp;#34;ping&amp;#34;: &amp;#34;pong&amp;#34; } Ansible はデフォルトで SSH 接続しようとするので、ローカルホストを制御対象とするときは -c local オプションを指定します。 -m ping オプションは、ping モジュールを使用してタスクを実行することを示しています。</description></item><item><title>Ansible の SSH 接続で使用するユーザーと秘密鍵を指定する</title><link>https://maku.blog/p/n3jygwd/</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/n3jygwd/</guid><description>Ansible でマネージドノードに SSH 接続するときに使用するユーザー名と秘密鍵は、-u (--user) オプションと --private-key オプションで指定することができます。
$ ansible-playbook -i hosts.ini site.yml -u maku --private-key ~/.ssh/test/id_rsa インベントリファイルで指定する場合は、ansible_user 変数と ansible_ssh_private_key 変数を使います。
hosts.ini（ホストごとに指定する場合） [servers] www1.example.com ansible_user=maku ansible_ssh_private_key_file=~/.ssh/test/id_rsa www2.example.com ansible_user=maku ansible_ssh_private_key_file=~/.ssh/test/id_rsa hosts.ini（グループ単位で指定する場合） [servers] www1.example.com www2.example.com [servers:vars] ansible_user=maku ansible_ssh_private_key_file=~/.ssh/test/id_rsa YAML 形式でインベントリファイルを記述する場合も、同様の変数で設定できます。
hosts.yml all:hosts:www1.example.com:www2.example.com:vars:ansible_user:makuansible_ssh_private_key_file:~/.ssh/test/id_rsa</description></item><item><title>Docker コンテナで Ansible のテストベッド環境を用意する</title><link>https://maku.blog/p/csctaq7/</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/csctaq7/</guid><description>何をするか ansible-playbook を使って何らかの Linux 環境のセットアップを自動化するとき、Playbook のテスト用に使い捨ての Docker コンテナ（テストベッド環境）があると便利です。
Ansible には、Playbook 実行後の冪等性を保つという性質がありますが、一度 Playbook を実行してしまうと元の状態に戻すことはできません。 一方通行の冪等性はあっても、可逆性はないということですね。 Playbook を試行錯誤して作っている段階では、何度も ansible-playbook を実行することになるので、本当にその Playbook がまっさらな状態の OS に対して適用できるのか不安になってきます（冪等性があるので理論的には動作するはずですが）。 異なるディストリビューションに対して実行できるのか試したくなることもあります。
ここでは、Ansible のテストベッド環境として Docker コンテナを作成し、各種 Ansible コマンド (ansible / ansible-playbook) で制御してみます。
テストベッド用のコンテナを起動する Ansible は一般的にはマネージドノードに SSH 接続して Playbook を実行しますが、実は Docker コンテナに直接接続することもできます。 つまり、テストベッド用の Docker コンテナには、sshd (OpenSSH) などのサービスをわざわざインストールする必要はありません。
ただし、Ansible マネージドノードの要件として、Python3 だけはインストールしておく必要があります。 次の Dockerfile では、Ubuntu を親イメージとして、Python3 だけ追加しています。
Dockerfile FROMubuntu:22.04# Python3 のインストールRUN apt update &amp;amp;&amp;amp; apt install --no-install-recommends -y python3 Dockerfile をビルドして、testbed イメージを作成します。</description></item><item><title>Ansible 関連用語</title><link>https://maku.blog/p/a9twaog/</link><pubDate>Wed, 13 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/a9twaog/</guid><description>モジュール Ansible で使う機能の単位。例えば、ansible.builtin.systemd など。 プレイブック中の各プレイで指定するタスクリストは、モジュールを指定して定義していきます。 インベントリ コントロール対象とするマネージドノードの一覧ファイル。 INI 形式、あるいは YAML 形式で記述します。 シンプルに記述したければ INI 形式、階層構造を明確にしたければ YAML 形式を使います。 ホスト変数 インベントリで定義したホストに対して設定する変数。 インベントリファイルから分離して、host_vars ディレクトリ内の YAML ファイルに記述することもできます。 グループ変数 インベントリで定義したグループに対して設定する変数。 インベントリファイルから分離して、group_vars ディレクトリ内の YAML ファイルに記述することもできます。 インベントリプラグイン (inventory plugins) Ansible 本体にインベントリの機能を提供しているプラグイン。 INI ファイル用の ansible.builtin.ini や、YAML ファイル用の ansible.builtin.yaml などがあります。 他にも動的にインベントリを生成するものもあります。 参考: Index of all Inventory Plugins — Ansible Documentation プレイブック (playbook) マネージドノードに対する処理内容を YAML 形式で定義したもの。 プレイブックは、複数のプレイ (Play) で構成されており、プレイは複数のタスクで構成されています (Playbook ◇─ Play ◇─ Task)。 プラグイン Ansible 本体に対して機能を追加する仕組み。 参考: Indexes of all modules and plugins — Ansible Documentation ansible.</description></item><item><title>Docker で Ansible の実行環境用のコンテナを作成する</title><link>https://maku.blog/p/euevcs8/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/euevcs8/</guid><description>何をするか？ Ansible の実行環境は Python がインストールされている環境であれば比較的簡単にインストールできますが、Docker の実行環境があれば、ホスト環境に何もインストールせずに Ansible の実行環境を手に入れることができます（もちろんコンテナは作る必要はありますが）。
Docker Hub を見ると、Alpine Linux ベースの Ansible 実行環境用イメージ alpine/ansible があるようですが、ここでは Dockerfile を使って自分でイメージを作成することにします。
Ansible 実行環境用イメージを作成する Dockerfile で Alpine Linux ベースの Ansible 実行環境を定義します。
Dockerfile FROMalpine:3WORKDIR/app# --no-cache を付けることで /var/cache/apk 以下にキャッシュが残るのを防ぐ# --update-cache を付けることで先に apk update するのと同じ効果になるRUN apk --no-cache --update-cache add ansible openssh sshpass APK (Alpine Package Keeper) で次のようなパッケージをインストールしています。
ansible &amp;hellip; Ansible Community パッケージ（ansible コマンドや ansible-playbook コマンドなど） openssh &amp;hellip; ssh コマンドのため sshpass &amp;hellip; ターゲットホストにパスワード認証 (--ask-pass) で接続するときのため Ansible Community パッケージ (ansible) ではなく、Ansible Core (ansible-core) を使うようにすれば、イメージサイズは 500MB 弱から 80MB 程度に削減できますが、サイズを気にしなくてよいなら Ansible Community パッケージを使っておいた方が楽です。</description></item><item><title>Ansible の ansible.cfg ファイルの検索順序</title><link>https://maku.blog/p/pamv6gq/</link><pubDate>Sun, 23 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku.blog/p/pamv6gq/</guid><description>Ansible の実行環境が参照する設定ファイル (ansible.cfg) は、下記のようなパスから検索されます。
環境変数 ANSIBLE_CONFIG で指定されたファイル ansible.cfg（カレントディレクトリ以下のファイル） ~/.ansible.cfg（ホームディレクトリ以下のファイル） /etc/ansible/ansible.cfg Git などで管理する場合は、Playbook の近くに一緒に入れておくとわかりやすいです（上記の 2 番目の方法）。</description></item><item><title>Ansible でインベントリーファイルの場所を指定する</title><link>https://maku.blog/p/eycnx9i/</link><pubDate>Sat, 22 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku.blog/p/eycnx9i/</guid><description>Ansible のコマンド（ansible や ansible-playbook）を実行すると、下記の順でインベントリーファイルが検索されます。
コマンドラインオプション -i で指定したファイル コンフィグファイル ansible.cfg 内の hostfile で指定したファイル（参考: ansible.cfg ファイルの検索パス） /etc/ansible/inventry 以下の例は、いずれもカレントディレクトリ内の hosts というファイルをインベントリファイルとして使用するように指定しています。
例: コマンドラインオプション (-i) で指定する方法 $ ansible myserver -i hosts -m ping 例: コンフィグファイル (ansible.cfg) で指定する方法 [defaults] hostfile = hosts</description></item></channel></rss>