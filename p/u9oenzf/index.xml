<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS CDK 関連メモ on まくろぐ</title><link>https://maku.blog/p/u9oenzf/</link><description>Recent content in AWS CDK 関連メモ on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 04 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/u9oenzf/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS CDK 入門: cdk コマンドのインストールから Hello World まで</title><link>https://maku.blog/p/nujyfsy/</link><pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/nujyfsy/</guid><description>CDK とは AWS CDK (Cloud Development Kit) を使うと、TypeScript や Python を使って AWS リソースの生成を自動化することができます。 大きなプロジェクトでは、CloudFormation や SAM によるスタック生成用のテンプレートが長大になりがちですが、CDK を使うことで CloudFormation テンプレートの生成処理を隠蔽し、効率的にインフラ定義を行うことができます。 CDK の利点 をざっと挙げると以下のような感じです。
TypeScript、Python などのパワフルな言語機能を使ってインフラ定義を行うことができる。 各種リソース間の参照を、オブジェクトのプロパティ参照という自然な形で表現できる。 コンストラクト (Construct Library) という再利用可能なライブラリの提供により、様々なユースケースに対応した AWS リソース群を短いコードで定義できる。 VS Code (TypeScript) 、PyCharm (Python) などで型情報の補完が効くため、AWS リソースに設定可能なプロパティを見つけやすい。明らかに間違った設定はコンパイル時に気付くことができる。 Lambda 関数デプロイ時などに必要になる ZIP パッケージング、および S3 一時バケットの生成を自動で行ってくれる。 一方、CDK の欠点 としては、基本的に AWS に特化したツールであるため、Terraform や Serverless Framework のように様々なクラウド (Azure, AWS, GCP) に対応できないという点が挙げられます。 Terraform などの汎用ツールに比べて、CDK は学習コストも比較的高いです。 Azure なども同じツールで構築したいとか、それほど細かい制御は必要ないということであれば、Terraform などを使った方がいいかもしれません。 ただ、CDK を使っている限り、AWS の最新のリソースにも即対応できることが保証されますし、AWS CloudFormation に関しての知識は身につけやすいでしょう。</description></item><item><title>AWS CDK メモ: ブートストラップ処理を実行する (cdk bootstrap)</title><link>https://maku.blog/p/q7q8p6m/</link><pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/q7q8p6m/</guid><description>CloudFormation のスタックを生成するときに、一時的なファイル置き場として S3 バケットが必要になることがあります。 例えば、Lambda 関数をデプロイするときに、ZIP パッケージを置くためのステージングバケットが必要になります。 このステージングバケットへの実際のアップロード処理は CDK が自動でやってくれるのですが、バケットの準備だけはあらかじめ手動で行っておく必要があります。 このためのコマンドが cdk bootstrap コマンドです。 AWS アカウント（およびリージョン）内で一度だけ実行しておけばよいので、このタイミングで実行しておきます。 実行時には次のように「アカウント番号」と「リージョン名」を指定する必要があります。
cdk bootstrap aws://&amp;lt;アカウント番号&amp;gt;/&amp;lt;リージョン名&amp;gt; 実際の実行例 $ cdk bootstrap aws://123456789012/ap-northeast-1 ⏳ Bootstrapping environment aws://123456789012/ap-northeast-1... CDKToolkit: creating CloudFormation changeset... ... ✅ Environment aws://123456789012/ap-northeast-1 bootstrapped. これにより、ステージング用のバケットを含む CDKToolkit という名前のブートストラップ・スタックが生成されます。
ちなみに、現在使用している「アカウント番号」と「リージョン名」は、AWS CLI を使って次のように確認できます。
アカウント番号の確認 $ aws sts get-caller-identity --output text --query Account [--profile xxxx] 123456789012 リージョン名の確認 $ aws configure get region [--profile xxxx] ap-northeast-1</description></item><item><title>AWS CDK メモ: コンストラクトの概念を理解する</title><link>https://maku.blog/p/nqkav2m/</link><pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/nqkav2m/</guid><description>コンストラクト・ツリー (Construct Tree) AWS CDK を使って CloudFormation スタックを作成するとき、そのリソース構成は、論理的な コンストラクト (construct) のツリー構造によって表現します。 下記は、典型的な CDK アプリケーションにおけるコンストラクト・ツリー構造です。
App +-- Stack | +-- Construct | +-- Construct | +-- ... +-- Stack +-- Construct | +-- Construct | +-- Construct +-- Construct +-- ... App、Stack、Construct はそれぞれ抽象度の異なるオブジェクトですが、すべて IConstruct インタフェース を実装したコンストラクトの一種です。 CDK アプリ―ケーションには、構成のエントリポイントとなる App コンストラクト が 1 つあり、複数の Stack コンストラクトを含むことができます。
Stack コンストラクト は、その名の通り CloudFormation スタックを表現するコンストラクトです。 App が複数の Stack から構成されている場合、cdk deploy コマンドでデプロイを実行したときに複数の CloudFormation スタックが生成されることになります。 cdk deploy &amp;lt;Stack名&amp;gt; とすれば、特定のスタックのみをデプロイすることも可能です。 指定可能な Stack 名の一覧を確認したいときは、cdk ls コマンドを使います。</description></item><item><title>AWS CDK メモ: CDK アプリのパッケージ管理に Yarn を使う方法</title><link>https://maku.blog/p/4h3jygw/</link><pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/4h3jygw/</guid><description>cdk init app --language typescript で CDK アプリのひな型を生成すると、デフォルトではパッケージマネージャーとして NPM を使う想定になっています（package-lock.json などが作成されます）。 NPM の代わりに Yarn を使いたい場合は、次のように package-lock.json を削除して、yarn.lock ファイルを生成します。
$ git rm package-lock.json $ yarn install 生成された yarn.lock は忘れずに Git へコミットしてください。
ちなみに、package-lock.json が残っている状態で yarn install しようとすると、次のような感じの Warning が表示されます。
warning package-lock.json found. Your project contains lock files generated by tools other than Yarn. It is advised not to mix package managers in order to avoid resolution inconsistencies caused by unsynchronized lock files.</description></item><item><title>AWS CDK メモ: 謎の CDKMetadata を生成しないようにする</title><link>https://maku.blog/p/2asq4k4/</link><pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2asq4k4/</guid><description>AWS CDK で CloudFormation スタックを生成すると、デフォルトで CDKMetadata というリソースが生成されます（cdk synth コマンドで CloudFormation テンプレートを出力してみると確認できます）。
Resources:CDKMetadata:Type:AWS::CDK::MetadataProperties:Analytics:v2:deflate64:IsH4AAAAAAAA/L9ZNTs....9mAAAAMetadata:aws:cdk:path:CdkStack/CDKMetadata/DefaultCondition:CDKMetadataAvailableConditions:CDKMetadataAvailable:Fn::Or:- Fn::Or:- Fn::Equals:- Ref:AWS::Region- af-south-1- Fn::Equals:- Ref:AWS::Region- ap-east-1... 自分で何もリソース生成していないのにテンプレートが汚されて邪魔だなぁと思っていたら、この情報は、CDK を開発しているチームが利用状況などを把握して今後の改善のために使うようです。 下記、CDK のドキュメント より抜粋。
Every generated template contains a AWS::CDK::Metadata resource by default. (We haven&amp;rsquo;t shown it here.) The AWS CDK team uses this metadata to gain insight into how the AWS CDK is used, so we can continue to improve it. For details, including how to opt out of version reporting, see Version reporting.</description></item><item><title>AWS CDK で TypeScript で実装した Lambda 関数をデプロイする (aws-lambda-nodejs)</title><link>https://maku.blog/p/cj9i4m3/</link><pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/cj9i4m3/</guid><description>何をするか？ ここでは、CDK アプリとして作成した CloudFormation スタック内に、TypeScript で実装した Lambda 関数 を追加してみます。 Lambda 関数のビルドもデプロイ時に自動で行われるようにします。
以降の説明では、CDK プロジェクトの作成自体は済んでいるものとします。
参考: AWS CDK 入門: cdk コマンドのインストールから Hello World まで TypeScript で Lambda 関数を実装する AWS SDK と Lambda 用の TypeScript 型情報をインストールします。
$ yarn add aws-sdk $ yarn add @types/aws-lambda --dev Lambda 関数のコードは、プロジェクトのルートに lambda ディレクトリを作成して、そこに配置していくことにします。
myapp/ +-- bin/ ... CDK の App コンストラクト (.ts) +-- lambda/ ... ラムダ関数の実装コード (.ts) ★これを追加 +-- lib/ ... CDK の Stack コンストラクトなど (.</description></item><item><title>AWS CDK で Go 言語で実装した Lambda 関数をデプロイする (aws-lambda-go)</title><link>https://maku.blog/p/38jt3cm/</link><pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/38jt3cm/</guid><description>何をするか？ ここでは、CDK アプリとして作成した CloudFormation スタック内に、Go 言語で実装した Lambda 関数 を追加してみます。 Lambda 関数のビルドもデプロイ時に自動で行われるようにします。
CDK のプロジェクト自体（スタックを定義する CDK コード）は TypeScript で作成します。 以降の説明では、CDK プロジェクトの作成自体は済んでいるものとします。
参考: AWS CDK 入門: cdk コマンドのインストールから Hello World まで Go 言語で Lambda 関数を実装する Lambda 関数のコードは、プロジェクトのルートに lambda ディレクトリを作成して、そこに配置していくことにします。
myapp/ +-- bin/ ... CDK の App コンストラクト (.ts) +-- lambda/ ... ラムダ関数用のディレクトリ (.go) | +-- go.mod | +-- go.sum | +-- main.go +-- lib/ ... CDK の Stack コンストラクトなど (.ts) .</description></item><item><title>AWS CDK のサンプルコード集（TypeScript 版）</title><link>https://maku.blog/p/gzkzbny/</link><pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/gzkzbny/</guid><description>AWS CDK を使った TypeScript サンプルコードいろいろです。
リソースにタグを付ける import * as cdk from &amp;#39;@aws-cdk/core&amp;#39; import { MyappStack } from &amp;#39;../lib/myapp-stack&amp;#39; const app = new cdk.App() new MyappStack(app, &amp;#39;MyappStack&amp;#39;, { tags: { Owner: &amp;#39;TeamA&amp;#39;, Purpose: &amp;#39;Project1&amp;#39;, }, }) AWS リソース用のコンストラクトの props パラメーターで、tags プロパティを指定することで、そのリソースにタグを設定できます。
タグの設定方法は、どの AWS リソース用のコンストラクトでも同様です。 上記のように Stack コンストラクトに対してタグを設定すると、その中に配置した AWS リソースにもそのタグが設定されます。
S3 バケットや DynamoDB テーブルをスタック削除時に自動削除する バケットが空のときだけ自動削除する import * as cdk from &amp;#39;@aws-cdk/core&amp;#39; import * as s3 from &amp;#39;@aws-cdk/aws-s3&amp;#39; new s3.Bucket(this, &amp;#39;MyBucket&amp;#39;, { removalPolicy: cdk.</description></item><item><title>Go 言語で AWS CDK V2 を使う (1) 導入編</title><link>https://maku.blog/p/54s6es8/</link><pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/54s6es8/</guid><description>何をするか？ CDK プロジェクトでは多くのケースでは TypeScript を使ってコード記述されていると思いますが、Go 言語の勢いが出てきていることもあり、ここでは Go 言語を使った CDK プロジェクトを作成してみます。
CDK 自体の概要については下記に簡単にまとまっています。
参考: AWS CDK 入門 (1) インストールから Hello World まで 以下、Go 言語のインストールや、AWS の認証情報の設定 (~/.aws/credentials, ~/.aws/config) はできているものとします。
参考: Go 言語で AWS SDK を使う開発環境を整える AWS CDK のインストール Go 言語で CDK のコードを記述する場合でも、AWS CDK のコマンドラインツール (cdk) 自体は、Node.js の NPM パッケージで提供されているものを使います。
$ npm install -g aws-cdk ... $ cdk --version 2.20.0 (build 738ef49) CDK プロジェクトを作成する (cdk init) CDK の Scaffold 機能を使って、Go 言語用の CDK プロジェクトを生成します。</description></item><item><title>AWS CDK で外部パラメーターを扱う（コンテキスト・バリューと環境変数）</title><link>https://maku.blog/p/vx5ta85/</link><pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/vx5ta85/</guid><description>CDK コードに外部パラメーターを与える方法 AWS CDK による CloudFormation スタックの構築時に、外部からキー＆バリューの形でパラメーターを設定したいときは、主に次の 3 つの方法があります（クラウド上に値を保存するパラメーターストアなどは対象外とします）。
Context values （コンテキスト・バリュー） Environment variables （環境変数） CloudFormation parameters （CloudFormation パラメーター） S3 バケットの名前をパラメーター化したり、デプロイターゲットを staging と production の間で切り替えたりするときに使えます。
Context values（コンテキスト・バリュー） コンテキスト・バリューは、CDK 特有の仕組みで、cdk deploy 実行時のコマンドライン引数や、cdk.json ファイルの中で、キー＆バリューのペアを設定することができます。 キーの型は string で、バリューの型は JSON がサポートするデータ型のいずれかです（string、number、オブジェクト、およびそれらの配列）。 コンテキスト・バリューは CDK の仕組みなので、CDK コードの中からしか参照できません。 Lambda 関数の中から値を参照したい場合は、Lambda 関数のコンストラクトを生成するときに、environment props などで間接的に渡す必要があります。
コマンドライン引数で指定する方法 cdk deploy コマンド（あるいは diff、synth）を実行するときに、--context (-c) オプションで、コンテキスト・バリューを設定できます。
$ cdk deploy --context key=value 複数のキー＆バリューペアを設定したいときは、単純にオプション指定を繰り返します。
$ cdk deploy -c key1=value1 -c key2=value2 コンテキスト・バリューは CDK アプリ内の全スタックに渡されますが、特定のスタックにのみ反映させることもできます。</description></item><item><title>AWS CDK メモ: Lambda 関数コードだけ高速デプロイする (cdk deploy --hotswap)</title><link>https://maku.blog/p/ap8p7n4/</link><pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ap8p7n4/</guid><description>AWS CDK によるデプロイ (cdk deploy) の実行には結構時間がかかりますが、Lambda 関数のコードだけ更新したいときは、hotswap オプションを付けて実行することで高速にデプロイできます。
Lambda 関数だけ高速更新 $ cdk deploy --hotswap ただし、これは開発時のみ使うべき機能として提供されており、Production 環境においては、通常通り CDK アプリ全体のデプロイを行うことが推奨されています。</description></item></channel></rss>