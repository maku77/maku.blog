<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS CDK 関連メモ on まくろぐ</title><link>https://maku.blog/p/u9oenzf/</link><description>Recent content in AWS CDK 関連メモ on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 04 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/u9oenzf/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS CDK 入門 (1) インストールから Hello World まで</title><link>https://maku.blog/p/nujyfsy/</link><pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/nujyfsy/</guid><description>CDK とは AWS CDK (Cloud Development Kit) を使うと、TypeScript や Python を使って AWS リソースの生成を自動化することができます。 大きなプロジェクトでは、CloudFormation や SAM によるスタック生成用のテンプレートが長大になりがちですが、CDK を使うことで CloudFormation テンプレートの生成処理を隠蔽し、効率的にインフラ定義を行うことができます。 CDK の利点 をざっと挙げると以下のような感じです。
TypeScript、Python などのパワフルな言語機能を使ってインフラ定義を行うことができる。 各種リソース間の参照を、オブジェクトのプロパティ参照という自然な形で表現できる。 コンストラクト (Construct Library) という再利用可能なライブラリの提供により、様々なユースケースに対応した AWS リソース群を短いコードで定義できる。 VS Code (TypeScript) 、PyCharm (Python) などで型情報の補完が効くため、AWS リソースに設定可能なプロパティを見つけやすい。明らかに間違った設定はコンパイル時に気付くことができる。 Lambda 関数デプロイ時などに必要になる ZIP パッケージング、および S3 一時バケットの生成を自動で行ってくれる。 一方、CDK の欠点 としては、基本的に AWS に特化したツールであるため、Terraform や Serverless Framework のように様々なクラウド (Azure, AWS, GCP) に対応できないという点が挙げられます。 Terraform などの汎用ツールに比べて、CDK は学習コストも比較的高いです。 Azure なども同じツールで構築したいとか、それほど細かい制御は必要ないということであれば、Terraform などを使った方がいいかもしれません。 ただ、CDK を使っている限り、AWS の最新のリソースにも即対応できることが保証されますし、AWS CloudFormation に関しての知識は身につけやすいでしょう。</description></item><item><title>AWS CDK 入門 (2) コンストラクトの概念を理解する</title><link>https://maku.blog/p/nqkav2m/</link><pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/nqkav2m/</guid><description>コンストラクト・ツリー (Construct Tree) AWS CDK を使って CloudFormation スタックを作成するとき、そのリソース構成は、論理的な コンストラクト (construct) のツリー構造によって表現します。 下記は、典型的な CDK アプリケーションにおけるコンストラクト・ツリー構造です。
App +-- Stack | +-- Construct | +-- Construct | +-- ... +-- Stack +-- Construct | +-- Construct | +-- Construct +-- Construct +-- ... App、Stack、Construct はそれぞれ抽象度の異なるオブジェクトですが、すべて IConstruct インタフェース を実装したコンストラクトの一種です。 CDK アプリ―ケーションには、構成のエントリポイントとなる App コンストラクト が 1 つあり、複数の Stack コンストラクトを含むことができます。
Stack コンストラクト は、その名の通り CloudFormation スタックを表現するコンストラクトです。 App が複数の Stack から構成されている場合、cdk deploy コマンドでデプロイを実行したときに複数の CloudFormation スタックが生成されることになります。 cdk deploy &amp;lt;Stack名&amp;gt; とすれば、特定のスタックのみをデプロイすることも可能です。 指定可能な Stack 名の一覧を確認したいときは、cdk ls コマンドを使います。</description></item><item><title>AWS CDK 入門 (3) CDK サンプルコード</title><link>https://maku.blog/p/gzkzbny/</link><pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/gzkzbny/</guid><description>AWS CDK を使った TypeScript サンプルコードいろいろです。
リソースにタグを付ける import * as cdk from &amp;#39;@aws-cdk/core&amp;#39; import { MyappStack } from &amp;#39;../lib/myapp-stack&amp;#39; const app = new cdk.App() new MyappStack(app, &amp;#39;MyappStack&amp;#39;, { tags: { Owner: &amp;#39;TeamA&amp;#39;, Purpose: &amp;#39;Project1&amp;#39;, }, }) AWS リソース用のコンストラクトの props パラメーターで、tags プロパティを指定することで、そのリソースにタグを設定できます。
タグの設定方法は、どの AWS リソース用のコンストラクトでも同様です。 上記のように Stack コンストラクトに対してタグを設定すると、その中に配置した AWS リソースにもそのタグが設定されます。
S3 バケットや DynamoDB テーブルをスタック削除時に自動削除する バケットが空のときだけ自動削除する import * as cdk from &amp;#39;@aws-cdk/core&amp;#39; import * as s3 from &amp;#39;@aws-cdk/aws-s3&amp;#39; new s3.Bucket(this, &amp;#39;MyBucket&amp;#39;, { removalPolicy: cdk.</description></item><item><title>AWS CDK でナゾの CDKMetadata を生成しないようにする</title><link>https://maku.blog/p/2asq4k4/</link><pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2asq4k4/</guid><description>AWS CDK で CloudFormation スタックを生成すると、デフォルトで CDKMetadata というリソースが生成されます（cdk synth コマンドで CloudFormation テンプレートを出力してみると確認できます）。
Resources:CDKMetadata:Type:AWS::CDK::MetadataProperties:Analytics:v2:deflate64:IsH4AAAAAAAA/L9ZNTs....9mAAAAMetadata:aws:cdk:path:CdkStack/CDKMetadata/DefaultCondition:CDKMetadataAvailableConditions:CDKMetadataAvailable:Fn::Or:- Fn::Or:- Fn::Equals:- Ref:AWS::Region- af-south-1- Fn::Equals:- Ref:AWS::Region- ap-east-1... 自分で何もリソース生成していないのにテンプレートが汚されて邪魔だなぁと思っていたら、この情報は、CDK を開発しているチームが利用状況などを把握して今後の改善のために使うようです。 下記、CDK のドキュメント より抜粋。
Every generated template contains a AWS::CDK::Metadata resource by default. (We haven&amp;rsquo;t shown it here.) The AWS CDK team uses this metadata to gain insight into how the AWS CDK is used, so we can continue to improve it. For details, including how to opt out of version reporting, see Version reporting.</description></item><item><title>AWS CDK で外部パラメーターを扱う（コンテキスト・バリューと環境変数）</title><link>https://maku.blog/p/vx5ta85/</link><pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/vx5ta85/</guid><description>CDK コードに外部パラメーターを与える方法 AWS CDK による CloudFormation スタックの構築時に、外部からキー＆バリューの形でパラメーターを設定したいときは、主に次の 3 つの方法があります（クラウド上に値を保存するパラメーターストアなどは対象外とします）。
Context values （コンテキスト・バリュー） Environment variables （環境変数） CloudFormation parameters （CloudFormation パラメーター） S3 バケットの名前をパラメーター化したり、デプロイターゲットを staging と production の間で切り替えたりするときに使えます。
Context values（コンテキスト・バリュー） コンテキスト・バリューは、CDK 特有の仕組みで、cdk deploy 実行時のコマンドライン引数や、cdk.json ファイルの中で、キー＆バリューのペアを設定することができます。 キーの型は string で、バリューの型は JSON がサポートするデータ型のいずれかです（string、number、オブジェクト、およびそれらの配列）。 コンテキスト・バリューは CDK の仕組みなので、CDK コードの中からしか参照できません。 Lambda 関数の中から値を参照したい場合は、Lambda 関数のコンストラクトを生成するときに、environment props などで間接的に渡す必要があります。
コマンドライン引数で指定する方法 cdk deploy コマンド（あるいは diff、synth）を実行するときに、--context (-c) オプションで、コンテキスト・バリューを設定できます。
$ cdk deploy --context key=value 複数のキー＆バリューペアを設定したいときは、単純にオプション指定を繰り返します。
$ cdk deploy -c key1=value1 -c key2=value2 コンテキスト・バリューは CDK アプリ内の全スタックに渡されますが、特定のスタックにのみ反映させることもできます。</description></item><item><title>AWS CDK で TypeScript の Lambda 関数をデプロイする (aws-lambda-nodejs)</title><link>https://maku.blog/p/cj9i4m3/</link><pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/cj9i4m3/</guid><description>NodejsFunction コンストラクトについて AWS CDK の @aws-cdk/aws-lambda-nodejs パッケージ が提供する NodejsFunction コンストラクト を使用すると、CDK によって作成した CloudFormation スタック上に簡単に Lambda 関数をデプロイできます。 Lambda 関数用の汎用的なコンストラクトとしては、@aws-cdk/aws-lambda パッケージ が提供する Functin コンストラクトもあるのですが、Node.js による Lambda 関数実装用に特化した NodejsFunction を使うと、次のような恩恵を得られます。
esbuild による Lambda 関数関連アセットの高速なパッケージング（バンドル）。 Lambda 関数の TypeScript コードをいちいちコンパイルしなくてよい。 ちょっとややこしいのですが、CDK コード（TypeScript で書いた場合）の実行は ts-code で実行され、Lambda 関数のビルドとパッケージングは esbuild で行われます。
Lambda 関数の作成 ここでは、CDK アプリとして作成した CloudFormation スタック内に、TypeScript で実装した Lambda 関数を配置してみます。 CDK のインストールや、ブートストラッピング (cdk bootstrap) は、下記の記事を参考に完了させてください。
参考: AWS CDK 入門 (1) インストールから Hello World まで CDK アプリの作成 まずは、cdk init app で CDK アプリのテンプレートを作成します。</description></item></channel></rss>