<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VS Code の設定メモ on まくろぐ</title><link>https://maku.blog/p/eycnw8h/</link><description>Recent content in VS Code の設定メモ on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 19 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/eycnw8h/index.xml" rel="self" type="application/rss+xml"/><item><title>VS Code の設定ファイルの場所 (settings.json)</title><link>https://maku.blog/p/tfq2cnw/</link><pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/tfq2cnw/</guid><description>ユーザー設定とワークスペース設定 VS Code の設定画面は Ctrl(Cmd) + , で起動できますが、ここで行った設定は、settings.json というユーザー設定ファイル（あるいはワークスペース設定ファイル）に保存されます。 このファイルの内容と設定画面の内容は連動しているので、設定はどちらで行ってもいいのですが、慣れてくると setttings.json を直接編集した方がすばやく設定を行えます。
ユーザー設定ファイル VS Code のユーザー設定ファイル (settings.json) は、OS ごとに下記のディレクトリに保存され、全ての VS Code インスタンス（ワークスペース）に共通の設定として使用されます。
OS ユーザー設定ファイルのパス Windows %APPDATA%\Code\User\settings.json macOS $HOME/Library/Application Support/Code/User/settings.json Linux $HOME/.config/Code/User/settings.json ワークスペース設定ファイル ワークスペースごとの設定は、プロジェクトのルートディレクトリの .vscode ディレクトリに保存されます。
&amp;lt;プロジェクトルート&amp;gt;/.vscode/settings.json ワークスペース設定は、前述のユーザー設定よりも優先されます（同じ設定項目の値が上書きされます）。 .vscode ディレクトリを Git にコミットしておけば、チーム内で VS Code の設定を共有できます。 .vscode ディレクトリには、プロジェクトのタスク設定ファイル (tasks.json) なども格納されます。
設定ファイルのサンプル settings.json ファイルの拡張子は .json ですが、JavaScript 形式のコメントを記述できるようになっています (JSON with Comments)。
settings.json の例 // Place your settings in this file to overwrite the default settings { &amp;#34;breadcrumbs.</description></item><item><title>VS Code で YAML ファイルの構文をチェックする（YAML 拡張）</title><link>https://maku.blog/p/c7sp7ut/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/c7sp7ut/</guid><description>YAML 拡張とは？ VS Code の YAML 拡張 (redhat.vscode-yaml) をインストールすると、スキーマ定義に基づいて、YAML ファイルの記述内容が正しいかをチェックすることができます。 スキーマ定義を JSON スキーマファイル の形で作成し、YAML ファイルの先頭に次のようなコメントを記述することで適用できます。
YAML ファイルの先頭に追加 # yaml-language-server: $schema=./schema.json YAML ファイルの構文チェックなのに JSON スキーマ？と思うかもしれませんが、YAML と JSON のデータ形式には互換性があるので、スキーマは JSON スキーマでよいんですね。
スキーマによる YAML ファイルの構文チェック 公開スキーマファイルを参照する スキーマファイルは、インターネット上に公開されているものを URL で指定できるようになっています。 有名どころの設定ファイルのスキーマは、下記のサイトに一覧があるので、いろいろなプロジェクトからそのまま利用できます。
JSON Schema Store Ansible Playbook など、内容が複雑になりがちな YAML ファイルに設定しておくと役に立ちそうです。
playbook.yml（の先頭に記述する） # yaml-language-server: $schema=https://raw.githubusercontent.com/ansible/ansible-lint/main/src/ansiblelint/schemas/ansible.json GitHub Actions のワークフローファイル (.github/workflows/*.yml) などは、そのファイルパスから、どのスキーマを使用すればいいかを推測できるので、上記のようなコメント行すら記述せずに自動的に GitHub Actions 用のスキーマ を適用してくれます。 つまり、VS Code に YAML 拡張をインストールするだけで、GitHub Actions のワークフローファイルの構文チェックが有効になります。 便利！
独自定義したスキーマファイルを参照する アプリケーション独自の設定ファイルやデータファイルを YAML 形式で作成する場合は、そのスキーマも独自であることが多いので、専用の JSON スキーマファイルを作成することになるでしょう。 例えば、次の JSON スキーマファイルでは、ユーザー情報を表現するためのスキーマを定義しています（コメントを記述できるようにするために、拡張子を .</description></item><item><title>VS Code で YAML ファイルをソートする（YAML Sort 拡張）</title><link>https://maku.blog/p/2apzood/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2apzood/</guid><description>YAML Sort の概要 VS Code に YAML Sort 拡張 をインストールすると、YAML ファイルの内容をキー名でソートすることができます。 主にソート用に使うものですが、YAML フォーマッターとしても利用できます。 次のような簡単なカスタマイズを行うこともできます。
指定したキーを優先的に上から並べる 1 階層目の各キーの間に空白行を入れる リスト要素をソートする YAML Sort の使い方 YAML Sort のページで Install ボタンを押すだけで、VS Code への拡張のインストールは完了です。 ここでは、次のような YAML ファイルをソートしてみます。
sample.yml（ソート前） root2: ccc: 300 aaa: 100 bbb: 200 root1: fruits: - grape - apple - banana animals: [&amp;#39;wolf&amp;#39;, &amp;#39;fox&amp;#39;, &amp;#39;dolphin&amp;#39;, &amp;#39;eagle&amp;#39;] VS Code で YAML ファイルを開いた状態で、コマンドパレットを開いて (Ctrl/Cmd + Shift + P)、YAML Sort: Sort YAML を選択すると、YAML ファイルの内容がソートされます。
sample.yml（ソート後） --- root1: animals: [&amp;#39;wolf&amp;#39;, &amp;#39;fox&amp;#39;, &amp;#39;dolphin&amp;#39;, &amp;#39;eagle&amp;#39;] fruits: - grape - apple - banana root2: aaa: 100 bbb: 200 ccc: 300 先頭行に自動でセパレーター (---) が挿入され、すべてのキーがアルファベット順にソートされていることが分かります。 キー間の空白行はすべて削除されています。 一方で、リスト要素は自動ではソートされないようです（順番が意味を持つことがあるので当然ですが）。</description></item><item><title>VS Code で Python 用のフォーマッター (Black) を使う</title><link>https://maku.blog/p/4oybku6/</link><pubDate>Sat, 13 Nov 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/4oybku6/</guid><description>何をするか？ Visual Studio Code に Python 拡張 を入れることで、Python コードの編集（自動補完など）ができるようになりますが、コードの自動フォーマットを行うには、フォーマッターを別途インストールしておく必要があります（いろんなフォーマッターがあるため）。
Python のフォーマッターとしては、autopep8 や yapf などもありますが、ここでは、最近人気がある Black をインストールして VS Code の自動フォーマッターとして設定します。 Facebook や Dropbox、Mozilla などでも導入されており、採用実績としては申し分なさそうです。
☝️ 頑固なフォーマッター Black は自分自身を The uncompromising code formatter と説明しています。 ようするに、「私が定義する設定に従いなさい」という意味で、ユーザーにほとんど設定の余地を残していません（行の長さ程度は設定できます）。 このようにすることで、チーム内でのフォーマット論争を防ぐ効果があります。 TypeScript (JavaScript) でよく使われている Prettier フォーマッターも同様の思想で作られており、ほとんど設定ができないようになっています（こちらは opinionated という単語を使っています）。
参考: TypeScript コードを Prettier で自動整形する Black ではどのようなスタイルになるか？ インデントは スペース 4 文字 PEP 8 通り。 トップレベルのクラス定義や関数定義の間には 2 行の空白行 を入れる（クラス内のメソッド間は 1 行） PEP 8 通り。 1 行あたり最大 88 文字 まで PEP 8 は 79 文字と言っているが、それだと改行がたくさん入りすぎる傾向があるので、Black では 1 割増しの 88 文字にした。Raymond Hettinger の講演 Beyond PEP 8 でも 90 文字くらいがよいと指摘している。 文字列リテラルは ダブルクォートで囲む（Issue #51 などの議論を経てダブルクォートに落ち着いた。理由をまとめると以下のような感じ） PEP 257 で docstring はダブルクォートで囲むべしとされており、それに合わせるのが一貫性があってよい。PEP 8 では docstring 以外の文字列リテラルにシングルクォートを使っているが、バラバラにする理由がない。 空白文字列をシングルクォートで表現すると '' となって、フォントによっては判別しにくくなる。ダブルクォートであれば一目瞭然 (&amp;quot;&amp;quot;)。 ダブルクォートの中でシングルクォートを使うことはよくあるが（例: &amp;quot;don't&amp;quot;）、その逆は少ない。 UK レイアウトや German レイアウトのキーボードでは、&amp;quot; の入力は苦じゃないよ。シングルクォートの方が入力しやすければ、それで入力しておいて Black に &amp;quot; に変換させればよい。 文字列リテラルをシングルクォートで囲っている Python プロジェクトは多いので、Black が一貫してダブルクォートを採用しているところは要注意かもしれません。 ただ、上記のような理由を読むと、ダブルクォートを使う方が理にかなっているような気がします。</description></item><item><title>VS Code の Explorer で特定のファイルやディレクトリを非表示にする (files.exclude)</title><link>https://maku.blog/p/raku5dn/</link><pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/raku5dn/</guid><description>VS Code のエクスプローラービューは、サイドバー上にプロジェクト内のファイル一覧を表示してくれる便利な機能ですが、編集対象ではないファイルまで表示されていると地味に邪魔だったりします。 例えば、Node.js アプリの node_modules ディレクトリなどは常に表示されていてもあまり役に立たないかもしれません。
図: 不要なディレクトリが表示されている このような場合は、設定ファイル (settings.json) の files.exclude プロパティで非表示にしたいファイルやディレクトリのパターンを指定します。
settings.json { // Explorer で非表示にするもの &amp;#34;files.exclude&amp;#34;: { &amp;#34;**/.next&amp;#34;: true, // Next.js サーバーのキャッシュ &amp;#34;**/node_modules&amp;#34;: true, &amp;#34;out&amp;#34;: true // Next.js の export 先 }, // その他の設定... } 上記のようにパターンに out と指定すると、トップディレクトリの out という名前のファイルおよびディレクトリが非表示になります。 **/node_modules と指定すると、任意の階層の node_modules という名前のファイルおよびディレクトリが非表示になります。 末尾にスラッシュ (/) を付けるのは何も効果がないようです。 グロブパターン（** など）の詳細な指定方法は、Advanced search options のドキュメントが参考になります。
図: 指定したディレクトリが非表示になった ちなみに、デフォルト設定では次のようなファイルとディレクトリが非表示になります。
{ // Configure glob patterns for excluding files and folders. // For example, the file Explorer decides which files and folders // to show or hide based on this setting.</description></item><item><title>VS Code のフォーマッターで自動整形する (editor.formatOnSave)</title><link>https://maku.blog/p/qcoz9ju/</link><pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/qcoz9ju/</guid><description>VS Code には、標準で各種言語用のフォーマッターが搭載されており、JavaScript、TypeScript、JSON、HTML などのコードを自動整形することができます。
手動でフォーマッターを起動する ファイル全体をフォーマット (editor.action.formatDocument) コマンドパレット1 を使う場合: Format Document を選択 ショートカットキーを使う場合: (Windows) Shift + Alt + F (macOS) Shift + Option + F 選択中の行をフォーマット (editor.action.formatSelection) コマンドパレット1 を使う場合: Format Selection を選択 ショートカットキーを使う場合: (Windows) Ctrl + K → Ctrl + F (macOS) Cmd + K → Cmd + F ファイル保存時などに自動でフォーマットする 下記の設定をしておくと、ファイル保存時や、コードの編集中に自動的にフォーマッターを起動することができます。 設定ファイル (settings.json) の場所に関しては、こちらの記事 を参考にしてください。
全ての種類のファイルで自動フォーマットする場合 settings.json { // 自動フォーマット設定 &amp;#34;editor.formatOnSave&amp;#34;: true, // 保存時にフォーマット &amp;#34;editor.formatOnType&amp;#34;: true, // 入力中（改行時）にフォーマット &amp;#34;editor.formatOnPaste&amp;#34;: true, // ペースト時にフォーマット // その他.</description></item><item><title>VS Code で行末の空白（半角スペース）を自動で削除する (files.trimTrailingWhitespace)</title><link>https://maku.blog/p/j6jv7it/</link><pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/j6jv7it/</guid><description>Visual Studio Code で次のように設定しておくと、ファイル保存時に、行末の余計なスペースを自動で削除してくれます。
settings.json で設定する方法 settings.json { &amp;#34;files.trimTrailingWhitespace&amp;#34;: true, // ... } Markdown ファイル (.md) は、行末の 2 つのスペースが改行の意味を持っていたりします。 そのような場合はスペースが削除されてしまうと都合が悪いので、次のように言語別設定で markdown の場合のみ無効化しておきます。
{ &amp;#34;files.trimTrailingWhitespace&amp;#34;: true, &amp;#34;[markdown]&amp;#34;: { &amp;#34;files.trimTrailingWhitespace&amp;#34;: false }, // ... } 参考: settings.json について 設定画面で設定する方法 Ctrl + , で設定画面を開く（macOS の場合は Cmd + ,） trim で検索して Trim Trailing Whitespace にチェックを入れる</description></item><item><title>VS Code の Vim プラグインで OS のクリップボードと同期する (vim.useSystemClipboard)</title><link>https://maku.blog/p/tb6s2ck/</link><pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/tb6s2ck/</guid><description>Vim エディタ使いにとって、Visual Studio Code の Vim プラグイン はほぼ必須の機能になっています。
Vim - Visual Studio Marketplace デフォルトでは、y キーによるヤンクバッファ（Vim 用語では unnamed register）のコピーが、OS のクリップボードと同期されません。 次のように Vim プラグインの設定を行っておく、OS のクリップボードと同期してくれるようになります。
settings.json で設定する方法 settings.json { &amp;#34;vim.useSystemClipboard&amp;#34;: true, // OS のクリップボードと同期 // ... } 参考: settings.json について 設定画面で設定する方法 Cmd + ,（Windows では Ctrl + ,）で設定メニューを開く Vim: Use System Clipboard の項目にチェックを入れる これで、アプリ間をまたいだコピー＆ペーストを行うことができるようになります。</description></item></channel></rss>