<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS 一般／環境／設定など on まくろぐ</title><link>https://maku.blog/p/cenio8m/</link><description>Recent content in AWS 一般／環境／設定など on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 11 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/cenio8m/index.xml" rel="self" type="application/rss+xml"/><item><title>TypeScript で AWS SDK を使う開発環境を整える</title><link>https://maku.blog/p/taiqx6d/</link><pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/taiqx6d/</guid><description>TypeScript のプロジェクトを作成する 何をできるようにするか？ ここでは、Node.js はインストール済みであるという前提で、次のようなことを行える TypeScript 環境を整えます。
npm run build で src ディレクトリ以下の .ts ファイルをコンパイルする
（.js ファイルが build ディレクトリ以下に出力される） npm start でコンパイルされた build/main.js を起動する 下記のセットアップ手順の 詳しい意味はこちらを参照 していただくとして、ここでは一気にセットアップを終わらせてしまいます。
セットアップ # アプリ用のディレクトリを作成 $ mkdir myapp $ cd myapp # Node.js アプリの設定ファイル (package.json) を生成 $ npm init -y # TypeScript および Node 型情報をインストール $ npm install typescript -D $ npm install @types/node -D # TypeScript の設定ファイル (tsconfig.json) を生成 $ npx tsc --init package.</description></item><item><title>Go 言語で AWS SDK を使う開発環境を整える</title><link>https://maku.blog/p/</link><pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/</guid><description>何をするか？ ここでは、Go 言語用の AWS SDK V2 をセットアップして、各種 AWS サービス用の API を呼び出す準備をします。
Go 言語は Google が開発したプログラミング言語で、ライブラリインポートの手軽さや、生成された実行バイナリの実行速度に定評があるため、今後も利用ユーザーは増えていきそうです。
参考: Go 言語とは？／Go をインストールする | まくまくHugo/Goノート Go の実行環境は Go のインストーラー で簡単にインストールできます。 これ以降の説明では、Go の実行環境はインストール済みであると想定しています。
テスト用の Go プロジェクトを作成する Go プロジェクト用に適当なディレクトリを作成し、その中で go mod init コマンドを実行して go.mod （依存関係などが保存されるファイル）を作成しておきます。 このファイルが存在するディレクトリを、Go はモジュールとして認識します。
$ mkdir aws-study $ cd aws-study $ go mod init aws-study 上記の例では、go mod init の引数（モジュールパス）を aws-study としましたが、GitHub リポジトリで管理する前提であれば、github.com/&amp;lt;user&amp;gt;/aws-study のようなモジュールパスを指定するようにしてください。 これで、Go 言語プロジェクトの準備完了です。
AWS SDK でコンフィグ情報を参照してみる AWS SDK を使って AWS のサービスにアクセスするには、認証情報として IAM ユーザーの「アクセスキー ID」や「シークレットアクセスキー」などが必要になります。 これらは、一般的には AWS CLI の aws configure コマンドによって、~/.</description></item><item><title>AWS SDK for Node.js でプロキシ環境変数 (https_proxy) を反映させる</title><link>https://maku.blog/p/6vs27aa/</link><pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/6vs27aa/</guid><description>AWS SDK for Node.js のプロキシ設定 社内のプロキシ環境下などから AWS SDK (for Node.js) を使って API 呼び出しを行うには、次のようにプロキシエージェント設定を行います。 ここでは、AWS SDK version 2 の設定例を示しています。
プロキシ設定の例 (AWS SDK v2) import * as AWS from &amp;#39;aws-sdk&amp;#39;; import { HttpsProxyAgent } from &amp;#39;https-proxy-agent&amp;#39;; AWS.config.update({ httpOptions: { agent: new HttpsProxyAgent(&amp;#39;http://proxy.example.com:8080&amp;#39;) } }); これで、それ以降の AWS サービス (AWS.S3 など）の API 呼び出しがプロキシ経由で行われるようになります。
環境変数 https_proxy の設定を使用する 次のようにすれば、環境変数 https_proxy に設定されたプロキシアドレスを、AWS SDK にも反映させることができます（といっても、process.env.https_proxy を参照しているだけです）。
import * as AWS from &amp;#39;aws-sdk&amp;#39;; import { HttpsProxyAgent } from &amp;#39;https-proxy-agent&amp;#39;; // プロキシ設定を反映 function setupAwsProxy() { const proxy = process.</description></item><item><title>AWS アカウント、IAM ユーザー、グループ、ポリシーの違い</title><link>https://maku.blog/p/4c7sdwg/</link><pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/4c7sdwg/</guid><description> AWS を使う上で最初に理解しておくべき、「アカウント」と「ユーザー」まわりの概念についてまとめておきます。
簡単なイメージとしてはこんな感じ。 AWS アカウント &amp;hellip; 組織およびルートユーザーのこと。通称アカウント。 IAM ユーザー &amp;hellip; 組織内の個別ユーザー。通称ユーザー。 ちなみに、IAM は Identity and Access Management の略。
AWS アカウント（のルートユーザー） AWS サインアップ時に作られる、組織で 1 つだけ用意されるルートユーザーです。 AWS アカウントの ID は管理者のメールアドレスです。 AWS アカウントは、契約／支払い設定などを含むフルアクセス権限があるので、通常の業務ではこのアカウントは使わず、IAM ユーザーを使います。 IAM ユーザー AWS アカウントから作成されるユーザーで、通常の業務ではこの IAM ユーザーを使います。Linux の一般ユーザーのようなものです。 1 つの AWS アカウントから複数の IAM ユーザーを作成することができます。 IAM ユーザーに IAM ポリシーを割り当てることで、各種リソースへのアクセスが許可されます。IAM ユーザー作成直後は、何もアクセス権限がありません。ちなみに、IAM ポリシーは JSON 形式で記述されます。 IAM グループ 複数の IAM ユーザーをグルーピングするためのものです。 IAM グループに対しても IAM ポリシーを割り当てることができ、複数の IAM ユーザーにまとめて権限設定することができます。 IAM ロール 特定の AWS サービス、IAM ユーザー、IAM グループに一時的に権限を与えるために使われます。例えば、EC2 インスタンスへのアクセス権割り当てなどに使われます。 IAM ロールがどのような権限を表現するかは、IAM ロール自体に IAM ポリシーを割り当てることで制御します。 協力会社のメンバーに自社リソースの権限を与えたいときに、協力会社側で使っている IAM ユーザーに対して、自社で作成した IAM ロールを割り当てる、という使い方ができます。→ 参考: IAM ユーザーにアクセス権限を委任するロールの作成</description></item><item><title>AWS のサービス一覧（2021年版）</title><link>https://maku.blog/p/t8fmsz5/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/t8fmsz5/</guid><description>AWS のサービスを概要説明付きでリスト化したものが欲しくて作っちゃったので置いておきます。 PDF 化したもの も置いておきます。
.local-aws td { padding: 0 0 0.2em 0.2em; background: #fafafa; } .local-aws th { padding-top: 1.5em; border: none; background: white; text-align: left; } .local-aws img { max-width: 1.5em; } 分析 (Analytics) Amazon Athena SQL を使用した S3 でのデータクエリ Amazon CloudSearch マネージド型検索サービス Amazon Elasticsearch Service Elasticsearch クラスターを実行し、スケールする Amazon EMR ホスト型 Hadoop フレームワーク Amazon Kinesis リアルタイムストリーミングデータとの連携 Amazon Managed Streaming for Apache Kafka フルマネージド型 Apache Kafka サービス Amazon Redshift 高速かつシンプルで、費用対効果の高いデータウェアハウス Amazon QuickSight 高速ビジネス分析サービス AWS Data Exchange クラウド内サードパーティのデータを検索、購読、および使用 AWS Data Pipeline 定期的なデータ駆動型ワークフローに対するオーケストレーションサービス AWS Glue シンプルでスケーラブルなサーバーレスデータ統合 AWS Lake Formation 安全なデータレイクを数日で構築 Application Integration（アプリケーション統合） AWS Step Functions 分散アプリケーションの調整 Amazon AppFlow SaaS アプリケーションと AWS のサービス向けのコード統合が不要 Amazon EventBridge SaaS アプリと AWS のサービス向けサーバーレスイベントバス Amazon Managed Workflows for Apache Airflow 可用性に優れたセキュアなマネージドワークフローオーケストレーション Amazon MQ マネージド型メッセージブローカーサービス Amazon Simple Notification Service (SNS) Pub/sub、SMS、E メール、およびモバイルプッシュ通知 Amazon Simple Queue Service (SQS) マネージド型メッセージキュー Amazon AppSync 多くのソースから適切なデータを使用して、大規模にアプリを強化 AWS Cost Management（AWS コスト管理） AWS Cost Explorer AWS のコストと使用状況を分析する AWS 予算 カスタムコストと使用予算を設定する AWS のコストと使用状況レポート 包括的なコストと使用状況情報へのアクセス リザーブドインスタンスレポート リザーブドインスタンス (RI) の詳細を把握する Savings Plans 柔軟な料金設定でコンピューティング使用コストを最大 72% 節約 Blockchain （ブロックチェーン） Amazon Managed Blockchain スケーラブルなブロックチェーンネットワークを作成および管理 Amazon Quantum Ledger Database (QLDB) フルマネージド型台帳データベース Business Application（ビジネスアプリケーション） Alexa for Business Alexa を使って組織を強化 Amazon Chime フラストレーションフリーの会議、ビデオ電話、チャット Amazon Honeycode (ベータ) プログラミングなしでモバイルおよびウェブアプリケーションを構築 Amazon WorkDocs エンタープライズドキュメントの安全なストレージと共有 Amazon WorkMail セキュリティで保護されたマネージド型の企業向け E メールおよびカレンダー Compute（コンピューティング） Amazon EC2 クラウド内の仮想サーバー Amazon EC2 Auto Scaling 需要に合わせてコンピューティング性能をスケール Amazon Lightsail 仮想プライベートサーバーを起動および管理 AWS Batch あらゆる規模でバッチジョブを実行 AWS Elastic Beanstalk ウェブアプリの実行と管理 AWS Lambda イベント発生時にコードを実行 AWS Outposts AWS サービスをオンプレミスで実行 AWS Serverless Application Repository サーバーレスアプリケーションを検索、デプロイ、公開する AWS Snow ファミリー エッジロケーションでデータを集約および処理して AWS に転送するデバイス AWS Wavelength 5G デバイスのための超低レイテンシーアプリケーションを提供 VMware Cloud on AWS カスタムハードウェアを使用せずにハイブリッドクラウドを構築する Containers（コンテナ） Amazon Elastic Container Registry コンテナイメージを簡単に保存、管理、デプロイ Amazon Elastic Container Service (ECS) コンテナを実行するためのきわめて安全で信頼性と拡張性が高い方法 Amazon ECS Anywhere (近日公開) インフラストラクチャでの ECS Amazon Elastic Kubernetes Service (EKS) 信頼性が最も高い Kubernetes の実行方法 Amazon EKS Anywhere (近日公開) インフラストラクチャでの Kubernetes Amazon EKS Distro 一貫した Kubernetes クラスターの実行 AWS App2Container 既存のアプリケーションのコンテナ化と移行 AWS Fargate コンテナ向けサーバーレスコンピューティング AWS での Red Hat OpenShift マネージド Red Hat OpenShift クラスター Customer Engagement（カスタマーエンゲージメント） Amazon Connect クラウドベースのコンタクトセンター Amazon Pinpoint チャンネル間でのパーソナライズされたユーザーエンゲージメント Amazon Simple Email Service (SES) E メールの送受信 Database（データベース） Amazon Aurora 高性能マネージドリレーショナルデータベース Amazon Aurora Serverless v2 (プレビュー) 毎秒 100,000 件を超えるトランザクションに瞬時にスケール Amazon DynamoDB マネージド型の NoSQL データベース Amazon DocumentDB (MongoDB 互換) フルマネージド型ドキュメントデータベース Amazon ElastiCache インメモリキャッシングシステム Amazon Keyspaces (Apache Cassandra 用) マネージド型の Cassandra 対応データベース Amazon Neptune フルマネージド型グラフデータベースサービス Amazon Quantum Ledger Database (QLDB) フルマネージド型台帳データベース Amazon RDS MySQL、PostgreSQL、Oracle、SQL Server、MariaDB 向けのマネージドリレーショナルデータベースサービス Amazon RDS on VMware オンプレミスデータベースの管理を自動化 Amazon Redshift 高速、シンプル、費用対効果の高いデータウェアハウジング Amazon Timestream フルマネージド型の時系列データベース AWS Database Migration Service 最小限のダウンタイムでデータベースを移行 AWS Glue シンプルでスケーラブルなサーバーレスデータ統合 Developer Tools（デベロッパーツール） Amazon CodeGuru 最もコストがかかるコード行を見つける Amazon Corretto 本番環境に向けて OpenJDK を配信 AWS Cloud Development Kit (CDK) コードを使用してクラウドインフラストラクチャをモデル化する AWS Cloud9 Cloud IDE でコードを記述、実行、デバッグ AWS CloudShell ブラウザベースのシェル環境 AWS CodeArtifact ソフトウェア開発のためのセキュアかつスケーラブルでコスト効率性に優れたアーティファクト管理 AWS CodeBuild コードのビルドとテスト AWS CodeCommit プライベート Git リポジトリでのコードの保存 AWS CodeDeploy コードデプロイの自動化 AWS CodePipeline 継続的デリバリーを使用したソフトウェアのリリース AWS CodeStar AWS アプリケーションの開発とデプロイ AWS コマンドラインインターフェイス AWS サービスを管理するための統合ツール AWS Device Farm AWS クラウド内の実際のデバイスを使った Android、iOS、ウェブアプリケーションのテスト AWS Fault Injection Simulator 完全マネージド型のカオスエンジニアリングサービス AWS ツールと SDK AWS のためのツールと SDK AWS X-Ray アプリケーションの分析とデバッグ End User Computing（エンドユーザーコンピューティング） Amazon AppStream 2.</description></item></channel></rss>