<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ネットワーク関連技術メモ on まくろぐ</title><link>https://maku.blog/p/nd3cmt3/</link><description>Recent content in ネットワーク関連技術メモ on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 14 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/nd3cmt3/index.xml" rel="self" type="application/rss+xml"/><item><title>ConoHa VPS を借りて独自ドメインでアクセスできるようにする</title><link>https://maku.blog/p/n5emu3a/</link><pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/n5emu3a/</guid><description>何をするか？ ConoHa の VPS を借りたので、そのときの設定手順をメモしておきます。 大体こんな感じのことをしています。
ConoHa VPS を契約 して Ubuntu 22.04 を起動 お名前.com で独自ドメインを取得 独自ドメインで ConoHa VPS にアクセスできるようにする（IPv6 も有効化） ConoHa VPS はリーズナブルかつ API でのサーバー管理ができたりして、徐々に人気が高まってきてるみたいです。 安いプランであれば月額数百円で借りることができます。 Docker コンテナやデータベース (RDB) をホストするサーバーが欲しかったのですが、AWS や Azure はプライベートで使うには高すぎるので、今回は ConoHa VPS を採用しました。
VPS にはグローバル IP アドレスが割り当てられるので独自ドメインは必須ではないですが、やはりドメイン名でアクセスできた方がよいので、いつも通り お名前.com でドメイン取得しました。 ここでは、example.com というドメインを取得したものとして説明しています。
ConoHa のアカウントを作って VPS を契約 何はともあれ、まずは ConoHa のアカウントを作って ConoHa VPS を借ります。 ポチポチやってけば終わります。
図: ConoHa VPS での OS の選択 VPS の初期 OS として、Ubuntu 22.</description></item><item><title>HTTP/1.1 の認証スキームに関するメモ</title><link>https://maku.blog/p/ufpqqno/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ufpqqno/</guid><description>認証スキーム とは、HTTP のリクエストヘッダに指定する Authentication ヘッダーの先頭部分に指定する文字列のこと。
Basic &amp;hellip; RFC2617 Web ブラウザが標準でサポートしている。 Bearer &amp;hellip; RFC6750 OAuth 2.0 で使われている認証スキームのひとつ。 署名を行う必要はなく、受け取った値をそのまま使える。 Digest &amp;hellip; RFC2617 Web ブラウザが標準でサポートしている。 Negotiate &amp;hellip; RFC4559 OAuth &amp;hellip; RFC5849 OAuth 1.0 で使われていた認証スキーム。 署名のルールが複雑すぎて廃れた。 参考リンク
RFC7235 - Hypertext Transfer Protocol (HTTP/1.1): Authentication RFC7236 - Initial Hypertext Transfer Protocol (HTTP): Authentication Scheme Registrations</description></item><item><title>ドメイン管理と DNS 管理の違いを理解する</title><link>https://maku.blog/p/bwamwgp/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/bwamwgp/</guid><description>ドメイン管理と DNS サーバー 「独自ドメイン＋レンタルサーバー」を契約してブログサイトなどを立ち上げようとすると、どうしてもドメイン管理や DNS 設定を行う必要が出てきます。 同じ会社で一括契約すると、まとめて設定できたりしますが、これらは本来別々のサービスなので、ここで簡単に整理しておきます。
ドメイン取得・管理は、レジストラ（およびその委託先会社）が行っており、世界で一意なドメインを運用します。 日本では、お名前.com (by GMO) などが有名ですね。 一方で、DNS サービスは、このドメイン名を具体的な IP アドレスに関連づける機能を提供します。
レジストラ（ドメイン管理会社）が提供するドメイン管理サービスは、あくまでドメイン名を管理しているだけであり、DNS の機能を提供しているわけではありません。 なので、ドメイン管理会社でドメインを取得したら、そのドメインの名前解決に使用する DNS サーバーのアドレスを教えてあげる必要があります。 上の図では、お名前.com のドメイン管理設定で、さくらインターネットの DNS サーバー (ns1/2.dns.ne.jp) のアドレスを設定する例を示しています。
この設定により、ユーザーが example.com にアクセスしようとすると、DNS サーバー (ns1.dns.ne.jp) によって IP アドレス (12.34.56.78) に変換され、そのアドレスの Web サーバーにアクセスできるという仕組みになっています。
組み合わせの例 ドメイン取得・管理 DNS サーバー Web サーバー お名前.com お名前.com お名前.com お名前.com さくらインターネット さくらインターネット お名前.com AWS (R53) AWS (EC2) 多くの場合、こんな感じで DNS サーバーと Web サーバーは同じ会社のものを使います。 レンタルサーバーのアドレスなどを自動で設定できたりして便利だからです。 DNS サーバーの使用料金はレンタルサーバーの使用料金に含まれていることが多いですが、AWS の R53 などは個別に使用料金がかかります。</description></item><item><title>WinSCP をコマンドラインから利用して2つのディレクトリを同期する</title><link>https://maku.blog/p/eqrmt6x/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://maku.blog/p/eqrmt6x/</guid><description>WinSCP のインストール WinSCP の本体は下記のサイトからダウンロードできます。
WinSCP :: Official Site :: Download ここでは、コマンドラインから winscp.exe を使用しますので、インストーラを使ってインストールするときに、カスタムインストールを選択し、インストールディレクトリを環境変数(%PATH%)に追加を選択してください。
winscp コマンドでリモートホストへディレクトリをコピーする ローカルディレクトリの内容を、リモートにあるディレクトリへ同期させるには、次のように winscp.exe の /synchronize オプションを使用します。
winscp [mysession] /synchronize [local_directory] [remote_directory] 例えば、example.com というホストに、ユーザ名 user で接続してローカルの website ディレクトリ内のファイルを user のホームディレクトリの public_html ディレクトリに同期させるには次のようにします。
例: ローカルの website をリモートの public_html へ winscp user@example.com /synchronize &amp;#34;C:\Users\maku\website&amp;#34; &amp;#34;/user/maku/public_html&amp;#34; 参考 WinSCP のドキュメント (Command-line Options)</description></item><item><title>HTTP ヘッダに関するメモ</title><link>https://maku.blog/p/3kkchub/</link><pubDate>Sat, 15 Dec 2012 00:00:00 +0000</pubDate><guid>https://maku.blog/p/3kkchub/</guid><description>プロキシ経由時の「リクエスト行」の URI について プロキシサーバを介する場合は、リクエスト行に絶対アドレス指定で URI を指定する必要があります。 これは、リクエストを受け取ったプロキシサーバが、リクエストの転送先サーバを判断するためです。
Client ｜ ｜ GET http://target.example.com/index.html HTTP/1.1 ▽ Proxy server ｜ ｜ GET /index.html HTTP/1.1 ▽ target.example.com HTTP1.1 の Host 指定 HTTP1.1 では、メッセージヘッダに Host: の指定が必須です。これはバーチャルホストの機能を実現するためです。 HTTP1.0 を使う場合は、Host: の指定は必要ありません。
HTTP のメッセージヘッダの種類 HTTP のメッセージヘッダには、大きく分けて、
End-to-End Hop-by-Hop の 2 種類があります。</description></item><item><title>ネットワークトラブルの調査手順</title><link>https://maku.blog/p/eecgkww/</link><pubDate>Sun, 10 Oct 2010 00:00:00 +0000</pubDate><guid>https://maku.blog/p/eecgkww/</guid><description>ネットワークトラブルはホストに近いところからチェックしていくのがセオリーです。 ソフトウェア的要因よりも、ハードウェア的要因の方を先に調べるのがよいです。
ハードウェア的要因 ケーブルの断線 NIC の故障 電源の故障 ポートの接触不良 機器の熱暴走 ソフトウェア的要因 IP アドレスの設定ミス デフォルトゲートウェイの設定ミス VLAN の設定ミス ルーティングテーブルの不具合 サーバアプリケーションの設定ミス／不具合 参考: NETWORKWORLD - May 2007
ping による調査 あるホストに ping が通らないときは、以下の順番で ping を通す確認をしていきます。 テスト結果は正常時の結果と比べなければ意味がないので、正常時の tracert 結果などを定期的にとっておくことが重要です。
ループバックアドレスに対して ping TCP/IP モジュールの異常の可能性 ホストの IP アドレスへ ping OS が NIC を認識していない可能性 同じスイッチに接続された別の PC へ ping スイッチのポート、ケーブルの故障 VLAN の設定ミス、接続ミス スイッチ自体には IP アドレスは設定されないので、別の PC に ping することで、スイッチまでの接続を確認する。 ルータに ping ルータのダウン、アドレス設定ミス ルータの別のポートへ ping ルーティングプロセスの異常 インタフェースの設定ミス ルータは複数のネットワークにつながっているので、別のネットワーク用のポートにも ping する必要がある。 異なるネットワークの PC へ ping tracert で、通信不能ネットワークを切り分け ターゲットホストに ping ターゲットホストのダウン アプリケーソンレベルの確認 参考: NETWORKWORLD - May 2007</description></item><item><title>IETF によるプロトコル標準化の流れ</title><link>https://maku.blog/p/44o4a9p/</link><pubDate>Wed, 01 Oct 2003 00:00:00 +0000</pubDate><guid>https://maku.blog/p/44o4a9p/</guid><description>プロトタイプが普及する 独自バージョンが作られるようになる IETF (Internet Engineering Task Force) の援助で Working group が作られる Working group は「インターネットドラフト」としてプロトコルを文書化する IETF の IESG (Internet Engineering Steering Group) に提出する 実験期間を経て、IESG によって RFC 番号が割り当てられ、修正などをして「実験 RFC」として公表される 実際の運用によるテストを経て、IESG が「提案標準」として認定する IESG が「ドラフト標準」に推薦する プロトコルに STD 番号が割り当てられ、RFC に加えて STD となる 上記の流れで最低でも 10 ヵ月以上はかかる。</description></item></channel></rss>