<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Next.js のコンポーネントとレイアウト on まくろぐ</title><link>https://maku.blog/p/i5ht5fq/</link><description>Recent content in Next.js のコンポーネントとレイアウト on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 10 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/i5ht5fq/index.xml" rel="self" type="application/rss+xml"/><item><title>Next.js で各ページの head 要素をカスタマイズする (next/head)</title><link>https://maku.blog/p/rdr4fq2/</link><pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/rdr4fq2/</guid><description>Next.js で各ページの head 要素をカスタマイズしたいときは、Next.js の Head コンポーネント を使用して、必要な値のみを設定していきます。 典型的なのは、次のような title 要素の設定です。
// import Head from &amp;#39;next/head&amp;#39; &amp;lt;Head&amp;gt; &amp;lt;title&amp;gt;Page Title&amp;lt;/title&amp;gt; &amp;lt;/Head&amp;gt; ちなみに、head 要素ではなく、html 要素の属性値などを設定したいときは、pages/_document.tsx ファイルを作成します。</description></item><item><title>Next.js で全ページ共通のレイアウトを定義する（Layout コンポーネント）</title><link>https://maku.blog/p/dxamw8i/</link><pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/dxamw8i/</guid><description>Next.js で Web サイトに見た目の統一感を持たせるには、Layout コンポーネントを作成して、全てのページのベースレイアウトとして使用するようにします。 Next.js の仕組みというより、React コンポーネントを作成するときの慣例のようなもので、コンポーネントに Layout という名前を付けるのも多くの人がその名前を使っているだけです。
Layout コンポーネントを定義する Layout コンポーネントを定義するために、次のようなファイルをプロジェクト内に作成します。 {children} の部分には、Layout 要素以下に配置した子要素が展開されることになります。
components/Layout.tsx import { ReactNode } from &amp;#39;react&amp;#39; type Props = { children: ReactNode; } export function Layout({ children, ...props }: Props) { return &amp;lt;div {...props}&amp;gt;{children}&amp;lt;/div&amp;gt; } この Layout コンポーネントを使用するには、各ページのコンポーネント実装において、ルート要素として配置します。
pages/about.tsx import Head from &amp;#39;next/head&amp;#39; import Link from &amp;#39;next/link&amp;#39; import { Layout } from &amp;#39;../components/Layout&amp;#39; export default () =&amp;gt; ( &amp;lt;Layout&amp;gt; &amp;lt;Head&amp;gt; &amp;lt;title&amp;gt;About me&amp;lt;/title&amp;gt; &amp;lt;/Head&amp;gt; &amp;lt;h1&amp;gt;About me&amp;lt;/h1&amp;gt; &amp;lt;Link href=&amp;#34;/&amp;#34;&amp;gt; &amp;lt;a&amp;gt;Back to home&amp;lt;/a&amp;gt; &amp;lt;/Link&amp;gt; &amp;lt;/Layout&amp;gt; ) Layout コンポーネントに CSS を適用する styled-jsx で直接スタイルを埋め込む方法 styled-jsx の仕組み を使って、コンポーネントの定義内に直接 CSS を埋め込んでしまう方法です。</description></item><item><title>Next.js アプリでのリンク方法まとめ（Material-UI との連携なども） (next/link, next/router)</title><link>https://maku.blog/p/vgs4dnw/</link><pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/vgs4dnw/</guid><description>アプリ内ページへのリンク（基本） // import Link from &amp;#39;next/link&amp;#39; &amp;lt;Link href=&amp;#34;/about&amp;#34;&amp;gt; &amp;lt;a&amp;gt;About us&amp;lt;/a&amp;gt; &amp;lt;/Link&amp;gt; pages/about.tsx ページコンポーネントが生成するページへのリンクになります。 リンクを &amp;lt;a&amp;gt; コンポーネントとして出力するために、上記のように子要素として明示的に &amp;lt;a&amp;gt; タグの記載が必要です。 &amp;lt;a&amp;gt; を省略しても、リンククリック時は JavaScript でハンドルされるので動作しますが、HTML 的には正しく &amp;lt;a&amp;gt; 要素を出力しておくべきです（SEO 的にも）。
replace オプション &amp;lt;Link href=&amp;#34;/about&amp;#34; replace&amp;gt; 上記のように replace オプションを指定すると、ページ遷移前の URL がブラウザの履歴に残りません（戻るキーで戻らなくなります）。
外部リンク https:// で始まる外部リンクを出力したい場合は、&amp;lt;a&amp;gt; コンポーネントをそのまま使用します。 next/link（や react-router) が提供する Link コンポーネントは、アプリ内のルーティング用なので使えません。 外部リンクを開く場合は、安全性のために一律で rel=&amp;quot;noopener noreferrer&amp;quot; を付けましょう。 リンククリック時に必ず別タブで開きたいときは、target=&amp;quot;_blank&amp;quot; を指定してください。
&amp;lt;a href=&amp;#34;https://example.com/&amp;#34; target=&amp;#34;_blank&amp;#34; rel=&amp;#34;noopener noreferrer&amp;#34;&amp;gt; サイト名 &amp;lt;/a&amp;gt; Material-UI を採用したサイトの場合は、a の代わりに @material-ui/core/Link コンポーネントを使用することで、サイト内のデザインを統一することができます。 Link という名前のコンポーネントはいろいろなライブラリが提供しているので、下記のように別名 (MuiLink) を付けて使用すると混乱を防ぐことができます。</description></item><item><title>Next.js の Image コンポーネントで画像を表示する (next/image)</title><link>https://maku.blog/p/fw7gpx7/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/fw7gpx7/</guid><description>Image コンポーネントの特徴 Next.js が提供している Image コンポーネント (next/image) を使用すると、image 要素をそのまま配置するのに比べて次のような恩恵を受けられます。
遅延ロード (Lazy loading) Web ブラウザでその画像がビューポート内（画面内）に入って来たときに初めてダウンロードされるようになります。大きなページの末尾部分に配置された画像が、無駄にダウンロードされてしまうのを防ぐことができます。 画像の最適化 アクセスしてきたクライアントに応じて画像ファイルを最適化して配信します。例えば、圧縮効率のよい WebP フォーマットなどに変換してくれます。リクエスト時にサーバーサイドでオンデマンドで最適化するため、Image コンポーネントを使うことでビルド時間が伸びてしまうことはありません。外部サーバーの画像を間接的に表示する場合も最適化できます。 レスポンシブ 画面サイズに応じたレスポンシブ表示 (CSS) がデフォルトで行われます。 画像最適化に関しては、Next.js サーバー上でホスティングしているときしか動作しないといった制約がありますが、遅延ローディングがデフォルトで有効になるのは便利です。
Image コンポーネントの基本的な使い方 次のサンプルコンポーネントでは、Image コンポーネントを使って /public/images/avatar.png ファイルを表示しています。
components/Avatar.tsx import Image from &amp;#39;next/image&amp;#39; export const Avatar: React.FC = () =&amp;gt; ( &amp;lt;Image src=&amp;#34;/images/avatar.png&amp;#34; width={64} height={64} alt=&amp;#34;My avatar&amp;#34; /&amp;gt; ) ☝️ public ディレクトリ public ディレクトリ以下に配置したファイルは、Web サイトへのアクセス時には、ルートパス (/) からの相対パスで参照できるようになります。 public ディレクトリは、必ず Next.</description></item></channel></rss>