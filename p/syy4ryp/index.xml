<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>設定 on まくろぐ</title><link>https://maku.blog/p/syy4ryp/</link><description>Recent content in 設定 on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 22 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/syy4ryp/index.xml" rel="self" type="application/rss+xml"/><item><title>テンキーを特定の URL を開くショートカットキーとして使う (AutoHotkey)</title><link>https://maku.blog/p/7v5nd8x/</link><pubDate>Mon, 22 Sep 2025 00:00:00 +0000</pubDate><guid>https://maku.blog/p/7v5nd8x/</guid><description>昔購入した USB の外付けテンキーボードが余っていたので、任意の URL をブラウザで開くショートカットキーとして活用することにしました（Blender の操作用に買ったのだけど結局使わなかった🙄）。
図: テンキーをアプリランチャーにする 最近は様々な AI Chat サービスを使うことが多いので、テンキーの 1〜6 キーに AI Chat 系サービスを割り当て、7～9 によく見る社内のページを割り当ててみました。 ランチャーアプリを使えばいいじゃんと言われればそれまでなのですが、実際使ってみると思ったより物理的な起動ボタンは便利です。 ランチャーアプリよりも直感的で早いです。 もうこれのためにテンキーボードを買ってもいいくらい（言い過ぎ）。
下記は、Windows の AutoHotkey というソフトウェアを使ってテンキーに処理を割り当てる設定例です。
maku-keyconfig.ahk #Requires AutoHotkey v2.0 ; 指定されたURLを既定のブラウザで開き、Edge または Chrome をアクティブにする OpenUrl(url) { Run url if WinExist(&amp;#34;ahk_exe msedge.exe&amp;#34;) WinActivate &amp;#34;ahk_exe msedge.exe&amp;#34; else if WinExist(&amp;#34;ahk_exe chrome.exe&amp;#34;) WinActivate &amp;#34;ahk_exe chrome.exe&amp;#34; } Numpad1::OpenUrl &amp;#34;https://www.perplexity.ai&amp;#34; Numpad2::OpenUrl &amp;#34;https://m365.cloud.microsoft/chat/?auth=2&amp;#34; Numpad3::OpenUrl &amp;#34;https://chat.openai.com/&amp;#34; Numpad7::OpenUrl &amp;#34;https://...&amp;#34; Numpad8::OpenUrl &amp;#34;https://...&amp;#34; Numpad9::OpenUrl &amp;#34;https://...&amp;#34; この .ahk ファイルをダブルクリックして実行しておけば、テンキーの 1〜9 キーを押すだけで指定した URL を既定のブラウザで開きます。 さらに、上のスクリプトでは、Edge または Chrome が起動していれば、そのウィンドウをアクティブにするようにしています（OpenUrl 関数を調整すれば、他のブラウザにも対応できます）。</description></item><item><title>左手小指だけで IME 操作 (AutoHotkey, Karabiner-Elements)</title><link>https://maku.blog/p/s3subpp/</link><pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate><guid>https://maku.blog/p/s3subpp/</guid><description>何をやるか？ 図: 小指で IME の ON/OFF Mac や Windows の日本語入力のオン／オフ (IME ON/OFF) 切り替えを、左手の小指だけでできるようにしてみます。
これまでずっと、Cmd + Space などのキーコンビネーションで IME の ON/OFF をしていたのですが、やはり IME ON/OFF 切り替えは別々のキーに割り当てた方が望ましい と思い、このたびがんばって設定することにしました。
新しい入力方法に慣れれば、「今 IME ON だっけ？ OFF だっけ？」と悩むことがなくなるので、毎日のストレスがほんの少しだけ軽減すると思います。 また、Cmd + Space などのキーコンビネーションが、アプリケーションのショートカットキーとバッティングしてしまうトラブルも避けられます。
前提条件は次の通りです。
macOS と Windows の両方で同じようにキー操作できること キーコンビネーションではなく、異なる単独キーで IME ON/OFF できること US（英字配列）キーボードを使うので、「かな」「英数」などのキーがなくてもよいこと 無料のソフトで設定できること 最終的には、次のように設定することにしました。
使用するアプリケーション macOS: Karabiner-Elements Windows: AutoHotkey キー設定 CapsLock キーの単押し → IME OFF 左 Shift キーの単押し → IME ON 今回は左小指で押せるキーを使いましたが、スペースキーの左右にある Cmd キーや Alt キーに割り当てるのもありだと思います。 最初は左右の Shift キーに割り当ててみたのですが、どうしても右側の Shift キーが押しにくく、上記のようなキー割り当てに落ち着きました。</description></item><item><title>Android Studio の IdeaVim プラグインで快適コーディング</title><link>https://maku.blog/p/f4ugxri/</link><pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/f4ugxri/</guid><description>IdeaVim プラグインのインストール Android Studio (IntelliJ IDEA) に IdeaVim プラグインを入れると、Vim 系のキーマッピングが有効になり、高速にコーディングできるようになります（もちろん Vim の操作に精通しておく必要がありますが）。 IdeaVim プラグインは Android Studio から下記のように辿って簡単にインストールできます。
File → Settings → Plugins IdeaVim で検索してインストール IdeaVim の設定 (.ideavimrc) 通常の Vim エディタの設定ファイルは ~/.vimrm ですが、IdeaVim の設定ファイルは ~/.ideavimrc です。 Windows の場合は、%USERPROFILE%\.ideavimrc です（or _ideavimrc）。
~/.ideavimrc set clipboard=unnamed nnoremap gd :action GotoDeclaration&amp;lt;CR&amp;gt; nnoremap gi :action GotoImplementation&amp;lt;CR&amp;gt; nnoremap gs :action GotoSuperMethod&amp;lt;CR&amp;gt; nnoremap gb :action Back&amp;lt;CR&amp;gt; nnoremap gf :action Forward&amp;lt;CR&amp;gt; nnoremap &amp;lt;C-Left&amp;gt; :action Back&amp;lt;CR&amp;gt; nnoremap &amp;lt;C-Right&amp;gt; :action Forward&amp;lt;CR&amp;gt; .</description></item><item><title>日本語入力時に数字を必ず半角で入力する</title><link>https://maku.blog/p/ey8rn5z/</link><pubDate>Sun, 20 Feb 2011 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ey8rn5z/</guid><description>Mac OSX の場合 ことえりで「ひらがな」入力状態にする。 「あ」のアイコンを右クリックして「環境設定を表示」を選択。 「入力文字」の項目で、「数字を全角で入力」のチェックを外す。 Windows Vista (MS IME) の場合 言語バーを右クリックして「設定」を選択。 Microsoft Office IME2007 を選択して「プロパティ」を開く。 「オートコレクト」タブの英字、数字を「常に半角に変換」に設定。 MS IME の場合、英数字を入力してから一回はスペースを押す必要があります。</description></item><item><title>VIM のフォントを設定する (gvimrc)</title><link>https://maku.blog/p/ba6kwjd/</link><pubDate>Wed, 09 Sep 2009 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ba6kwjd/</guid><description>Gvim のフォントは、guifont にフォント名と、pt 数を指定することで変更できます。
:set guifont Courier:14 &amp;#34;Windows の場合 :set guifont Courier\ 14 &amp;#34;Linux の場合 フォントの候補をカンマで区切って複数指定することができます。
:set guifont=Courier\ New:12, Arial:10 フォントの高さと幅を別々に指定することもできます。
:set guifont=FixedSys:w10:h8 フォントをダイアログから選んで設定する場合は、次のコマンドを実行します。
:set guifont=* 詳しくは、
:help &amp;#39;guifont&amp;#39; (gvimrc) ファイルタイプ別にフォントを設定する 例: *.txt ファイルを開いた場合のフォントを設定する autocmd BufEnter *.txt set guifont=Arial\ 12</description></item><item><title>パワーポイントのおすすめ設定</title><link>https://maku.blog/p/qm9cfjn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://maku.blog/p/qm9cfjn/</guid><description>PowerPoint のおすすめのフォント PowerPoint のフォントは、Windows Vista 以降であれば、
和文: メイリオ 欧文: Segoe UI で統一すると、そこそこ見た目が整います。
スライドマスタでフォントを設定する手順は下記の通りです。
メニューの [表示] =&amp;gt; [スライドマスター] を選択。 スライドマスタータブの [フォント] =&amp;gt; [新しいテーマのフォントパターンの作成] を選択。 英数字用のフォントで「Segoe UI」、日本語文字用のフォントで「メイリオ」を選択。 ちなみに、メイリオの代わりに Meiryo UI を使用すると、文字幅が若干縮まります。 Meiryo UI は Windows 7 で標準搭載されたフォントで、Windows のリボン UI 上のテキストを狭いスペースで表示できるように最適化されたものらしいです。 通常は「メイリオ」の方を使用しておけばよいでしょう。 もし、テキストをたくさん含めなければいけない資料を作らないといけなくなった場合は、「Meiryo UI」の方を使ってみるとよいかもしれません。
参考: Windows デベロッパーセンター ─ フォント
スライドの縦横比率は 16:9 スライドの縦横比率は 16:9 が主流です。 PowerPoint 2013 からはデフォルトで 16:9 になってます。
メニューの [表示] =&amp;gt; [スライドマスター] を選択。 スライドマスタータブの [ページ設定] を選択。 スライドのサイズ指定で 16:9 を選択。 PowerPoint ファイルを共有するときはフォントを埋め込む 異なる環境で PowerPoint ファイル開いたときに、設定したフォントで正しく描画されるようにするには、PowerPoint ファイルにフォントを埋め込んでおく必要があります。</description></item></channel></rss>