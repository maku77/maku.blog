<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>セキュリティ関連メモ on まくろぐ</title><link>https://maku.blog/p/jdgfe97/</link><description>Recent content in セキュリティ関連メモ on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 04 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/jdgfe97/index.xml" rel="self" type="application/rss+xml"/><item><title>セキュリティ雑多メモ: 脆弱性の分類とデータベース</title><link>https://maku.blog/p/m8688y4/</link><pubDate>Tue, 04 Jul 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/m8688y4/</guid><description>大規模なソフトウェア開発プロジェクトにおいて脆弱性を体系的に扱うには、それらの分類方法や、脆弱性データベースの存在を認識しておく必要があります。
セキュリティマネジメントには「既知」と「未知」のものがある 既知の脆弱性 (known vulnerabilities) 開発時、出荷時などにすでに発見されている脆弱性。管理は容易。 未知の脆弱性 (unknown vulnerabilities) 定期的なチェックの仕組み を導入して発見する必要がある。 脆弱性データベース 各種プログラミング言語用に配布されているライブラリで脆弱性が発見されると、下記のような脆弱性データベースに登録されて公開されます。
NVD: National Vulnerability Database NIST（アメリカ国立標準技術研究所）が管理している脆弱性データベースです。 GitHub Advisory Database GitHub が管理している脆弱性データベースです。いろいろなデータベースを横断的に検索できるので便利です（参考: GitHub Advisory Database について）。 JVN: Japan Vulnerability Notes 脆弱性 ID と指標 CVE: 脆弱性の識別子 脆弱性の ID 体系としては、CVE-ID が有名です。 NVD で管理されている脆弱性には、一意の CVE: Common Vulnerabilities and Exposures（共通脆弱性識別子） という ID が割り当てられています（CVE-2022-0123 のような形式）。 これにより、脆弱性の報告、追跡、共有が簡単になります。
CWE: 脆弱性のカテゴリ CWE: Common Weakness Enumeration（共通脆弱性タイプ一覧） という脆弱性カテゴリも定義されています。
CVSS: 脆弱性の深刻度 脆弱性の深刻度を評価するための、CVSS: Common Vulnerability Scoring System（共通脆弱性評価システム） という枠組みが定義されており、脆弱性の影響、機密性、可用性、完全性、およびその他の要因を評価して、それぞれの脆弱性に 0 ～ 10 の CVSS スコアが割り当てられています。 CVSS スコアにより、組織は脆弱性を優先順位付けして対処することができます。</description></item><item><title>SBOM（ソフトウェア部品表）とは</title><link>https://maku.blog/p/bw9qjeu/</link><pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/bw9qjeu/</guid><description>ソフトウェア開発の世界で、SBOM という用語がよく出てくるようになったので簡単にまとめておきます。
SBOM とは SBOM とは、ソフトウェア製品の部品表（Software Bill of Materials）の略称で、ソフトウェア製品が構成されている部品のリストを指します。 SBOM は、ソフトウェア製品がどのように構成されているかを明確にするために使用されます。 2021 年 5 月の米国大統領令に SBOM の作成と脆弱性対策を義務付ける条項 が盛り込まれました。
SBOM の目的 SBOM を作成することにより、以下のような恩恵を得ることができます。
セキュリティ向上（セキュリティ・マネージメント）: SBOM を利用することで、ソフトウェア製品がどのような部品から構成されているかを正確に把握することができ、悪意のある部品が含まれているかどうかを特定することができます。 規制遵守（コンプライアンス・マネージメント）: SBOM は、製品のライセンス情報、サードパーティー製品の使用状況、およびその他の規制要件に関する情報を提供するため、規制遵守に役立ちます。 品質向上: SBOM は、ソフトウェア製品がどのように構成されているかを明確にするため、品質管理プロセスの改善に役立ちます。 SBOM の代表的なフォーマット SPDX: Software Package Data Exchange 標準: ISO/IEC 5962:2021 サポート団体: The Linux Foundation SPDX Group CycloneDX: CycloneDX specification サポート団体: OWASP Foundation SWID: Software Identification Tags 標準: ISO/IEC 19770-2:2015 GitHub から SBOM を出力する GitHub で管理しているプロジェクトであれば、GitHub の Web サイト上で SBOM ファイル（SPDX 形式）を出力することができます。</description></item><item><title>電子署名と電子証明書の基礎</title><link>https://maku.blog/p/fzwyf7z/</link><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid>https://maku.blog/p/fzwyf7z/</guid><description>電子署名（デジタル署名）(digital signature) 「電子署名」とは、データに付加され、そのデータが本当に作成者が作ったのかを確認するためのものです。 別の言い方をすると、受け取ったデータが第三者によって作られた偽物でないことを確認するための印です。
以下のような手順で、データが偽物でないか確認します。
データ送信側の「電子署名の作成」手順 送信するデータのメッセージダイジェストを求める。 メッセージダイジェストを非公開鍵 (private key) で暗号化し、「電子署名」とする。 データ受信側の「電子署名の確認」手順 受信した「データ」のメッセージダイジェストを求める。 受信した「電子署名」を「送信者の公開鍵」で復号化し、メッセージダイジェストに戻す。 1 と 2 のメッセージダイジェストが等しければ、本人が作成したデータだと分かる。 上記の手順からも分かるように、一般的に「電子署名」の仕組みには、公開鍵暗号方式が用いられます。 問題は、公開鍵 (public key) が偽物である場合に、なりすましができてしまうことです。 そこで、公開鍵が本物であるかを証明するための、「電子証明書」が必要になってきます。
電子証明書（デジタル証明書) (digital certificate) 電子証明書とは？ 公開鍵が偽物であると、公開鍵暗号方式は意味をなさなくなるため、公開鍵の正当性を証明することが重要になってきます。 電子証明書は、ある公開鍵が本物であることを証明するためのものです。
電子証明書は、一般的には、ITU-T X.509 の標準フォーマット（拡張子 .cer）で作成されます。 X.509 で作成された電子証明書ファイル (.cer) には、公開鍵そのものに加え、公開鍵の作成者（証明書の申請者）の情報、有効期限などが含まれています。
電子証明書の発行 電子証明書は、公開鍵が本物であることを示すためのものですが、その電子証明書自体が本物であることを示すために、末尾に電子署名が付加されます。 その署名は、公開鍵を作成したユーザが行うこともあるし、信頼のおける第三者が行うこともあります。 通常は、信頼のおける第三者機関である認証局 (CA: Certificate Authority) が電子証明書への署名を行い、電子証明書の発行を行います。
電子証明書 (X.509) の構成 電子証明書は、下記のようなデータで構成されています。
+------------------------------------+---------------------------------+ | 公開鍵 + 作成者情報 + 有効期限など | ← これが本物だと示す CA の署名 | +------------------------------------+---------------------------------+ 認証局による電子証明書の発行の流れ 公開鍵の作成者が、身元情報と公開鍵を CA（認証局）へ提出する。 CA は 1 の情報を厳密に審査し、電子証明書（X.</description></item><item><title>暗号技術まとめ</title><link>https://maku.blog/p/6rn67mc/</link><pubDate>Tue, 20 Dec 2005 00:00:00 +0000</pubDate><guid>https://maku.blog/p/6rn67mc/</guid><description>暗号技術についてのメモです。
共通鍵暗号 ブロック暗号 ブロック暗号というのは、共通鍵暗号の一種。 データを一定のブロックごとに暗号化する方式。 高速な暗号化処理を行える。
Triple DES - 1990年代。64 bit のブロック暗号 DES を 3 回繰り返す暗号化アルゴリズム。かつては米国政府標準暗号だった。 MISTY1 - 1990年代。三菱電機が開発した 128 bit 暗号鍵を持つ 64 bit ブロック暗号アルゴリズム。 CAST-128 - 64 bit ブロック暗号。 Camellia - 2000年代。128 bit ブロック暗号。NTT・三菱電機。 AES: Advanced Encryption Standard - 2000年代。128 bit ブロック暗号。 SEED - 128 bit ブロック暗号。 国際標準のブロック暗号 (ISO/IEC18033-3) は、Camellia、AES、SEED、CAST-128、MISTY1、Triple DES。
ストリーム暗号 MUGI MULTI-S01 SNOW 国際標準のストリーム暗号 (ISO/IEC18033-4) は、MUGI、MULTI-S01、SNOW。
公開鍵暗号 RSA RSA: Rivest - Shamir - Adleman - 大きな素数の素因数分解が難しいという根拠に基づいた暗号方式。 楕円曲線暗号 楕円曲線状での離散対数問題に基づいた公開鍵暗号方式。</description></item></channel></rss>