<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Unity on まくろぐ</title><link>https://maku.blog/p/g3gs5gs/</link><description>Recent content in Unity on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 24 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/g3gs5gs/index.xml" rel="self" type="application/rss+xml"/><item><title>Unityメモ: Unity の動画を撮る (Unity Recorder)</title><link>https://maku.blog/p/j8mzbnx/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/j8mzbnx/</guid><description>Unity Recorder を使用すると、Unity のゲーム画面を簡単に動画ファイル（mp4 など）にして保存することができます。
Unity Recorder のインストール Unity Recorder は Package Manager からインストールします（Unity 2018 より以前は Asset Store で配布されていましたが、Unity 2019 以降は Package Manager からインストールしたものしか動作しません）。 Package Manager は Unity のメニューから下記のように辿ると起動できます。
Window → Package Manager Unity Recorder は、Preview Package として配布されているので、まず、Package Manager の Advanced というプルダウンメニューから Show preview packages を選択してください。
図: Preview Package を表示する すると、リストに Unity Recorder が表示されるので、選択して Install ボタンを押せばインストールできます。
図: Unity Recorder のインストール Unity Recorder で動画を作成する まず Unity Recorder の設定を行い、mp4 で録画するための設定を行います。 メニューから次のように辿り、Recorder ウィンドウを開きます。</description></item><item><title>Unityスクリプト: オブジェクトを移動する (Transform.position)</title><link>https://maku.blog/p/53o7p8p/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/53o7p8p/</guid><description>ゲームオブジェクトに設定された Transform コンポーネントを操作することで、ゲームオブジェクトを移動させることができます。 Transform コンポーネントのオブジェクトは下記のいずれかの方法で取得できます。
Transform tf = gameObject.GetComponent&amp;lt;Transform&amp;gt;(); Transform tf = gameObject.transform; Transform クラス には、ゲームオブジェクトを移動させるためのプロパティやメソッドが定義されています。
ワールド座標での位置 (Transform.position) Transform.position プロパティは、ワールド座標でのオブジェクトの位置を示します。 次の例では、3 つのオブジェクトの X 座標を -2、0、2 に設定しています。
using UnityEngine; public class Sample : MonoBehaviour { private void Start() { GameObject cube = GameObject.CreatePrimitive(PrimitiveType.Cube); GameObject sphere = GameObject.CreatePrimitive(PrimitiveType.Sphere); GameObject capsule = GameObject.CreatePrimitive(PrimitiveType.Capsule); cube.transform.position = new Vector3(-2, 0, 0); sphere.transform.position = new Vector3(0, 0, 0); capsule.transform.position = new Vector3(2, 0, 0); } } += 演算子や -= 演算子を使用すれば、指定した数値分だけワールド座標での位置を移動できます。</description></item><item><title>Unityスクリプト: オブジェクトを回転する (Transform.rotation)</title><link>https://maku.blog/p/dx9is3c/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/dx9is3c/</guid><description>ゲームオブジェクトに設定された Transform コンポーネントを操作することで、ゲームオブジェクトを回転させることができます。 Transform コンポーネントのオブジェクトは下記のいずれかの方法で取得できます。
Transform tf = gameObject.GetComponent&amp;lt;Transform&amp;gt;(); Transform tf = gameObject.transform; Transform クラス には、ゲームオブジェクトを回転させるためのプロパティやメソッドが定義されています。
ワールド座標での回転 (Transform.rotation) Transform.rotation プロパティは、ワールド座標でのオブジェクトの回転角度を示します。 次の例では、Y 軸（上下方向）を中心とした回転角度を 45° に設定しています。
using UnityEngine; public class Sample : MonoBehaviour { private void Start() { GameObject cube = GameObject.CreatePrimitive(PrimitiveType.Cube); cube.transform.rotation = Quaternion.Euler(0, 45, 0); } } Transform.rotation プロパティには Quaternion オブジェクト を設定するのですが、上記のように Quaternion.Euler() 関数 を使用すると、直感的に Quaternion オブジェクトを生成することができます。
ローカル座標での回転 (Transform.localRotation) オブジェクト自身の向きを考慮した軸（ローカル座標）での回転角度を設定するには、Transform.rotation プロパティの代わりに、 Transform.localRotation プロパティを使用します。
次の例では、親 Cube の上下に子 Cube を配置し、それぞれ Y 軸の回転角度として 30° を設定しています。 ただし、上の Cube は localRotation プロパティ、下の Cube は rotation プロパティで回転角度を設定しています。</description></item><item><title>Unityスクリプト: オブジェクトを拡大縮小する (Transform.localScale)</title><link>https://maku.blog/p/neuatgr/</link><pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/neuatgr/</guid><description>ゲームオブジェクトに設定された Transform コンポーネントを操作することで、ゲームオブジェクトを拡大縮小することができます。 Transform コンポーネントのオブジェクトは下記のいずれかの方法で取得できます。
Transform tf = gameObject.GetComponent&amp;lt;Transform&amp;gt;(); Transform tf = gameObject.transform; オブジェクトの拡大率を指定する (Transform.localScale) オブジェクトの拡大縮小の設定は Transform.localScale プロパティで行います。 位置の設定 (position) や 回転角度の設定 (rotation) には、ワールド座標とローカル座標の区別がありますが、拡大縮小には、localScale の一種類しかないのでシンプルです。
次の例では、Cube オブジェクトを X 軸方向に 4 倍、Y 軸方向に 0.5 倍、Z 軸方向に 2 倍に拡大縮小しています。
using UnityEngine; public class Sample : MonoBehaviour { private void Start() { GameObject cube = GameObject.CreatePrimitive(PrimitiveType.Cube); cube.transform.localScale = new Vector3(4, 0.5f, 2); } } 全ての軸に同じ比率だけ拡大縮小したいのであれば、Vector3(1, 1, 1) を示す定数 Vector3.one を使って次のように記述できます。</description></item><item><title>Unityスクリプト: 加速度センサー／ジャイロスコープの値を取得する</title><link>https://maku.blog/p/m6hs3dn/</link><pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/m6hs3dn/</guid><description>加速度センサ (Input.acceleration) 加速度センサからの入力を取得するには、Input.acceleration プロパティを参照します。 Vector3 型で、X/Y/Z 軸の加速度を -1.0 〜 +1.0 の範囲で取得できます。
Vector3 accel = Input.acceleration; 次の例では、Update() のタイミングで加速度を読み取り、画面上のテキストで X, Y, Z 各軸の加速度を表示しています。
Sample.cs using UnityEngine; public class Sample : MonoBehaviour { private Vector3 m_accel; void Update() { m_accel = Input.acceleration; } private void OnGUI() { var rect = new Rect(30, 30, 500, 50); GUI.skin.label.fontSize = 30; GUI.Label(rect, string.Format(&amp;#34;X={0:F2}, Y={1:F2}, Z={2:F2}&amp;#34;, m_accel.x, m_accel.y, m_accel.z)); } } ジャイロスコープ (Input.gyro) ジャイロスコープからの入力を取得するには、Input.</description></item><item><title>Unityスクリプト: キー入力を取得する (UnityEngine.GetKey)</title><link>https://maku.blog/p/xitjt3c/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/xitjt3c/</guid><description>キーが押されているか調べる (GetKey) UnityEngine.GetKey() 関数を使用すると、指定したキーが現在押されているかどうかを調べることができます。 次の例では、Update メソッド内で上カーソルキーと下カーソルキーが押されているかどうかを調べ、入力状態によって Cube オブジェクトを上下に動かしています。
using UnityEngine; public class Sample : MonoBehaviour { private GameObject _cube; private void Start() { _cube = GameObject.CreatePrimitive(PrimitiveType.Cube); } private void Update() { float amount = 0; if (Input.GetKey(KeyCode.UpArrow)) { amount = 3; } else if (Input.GetKey(KeyCode.DownArrow)) { amount = -3; } _cube.transform.Translate(0, amount * Time.deltaTime, 0); } } 継続的にオブジェクトの位置を動かす場合、上記のように移動量に Time.deltaTime をかけることで、1 秒あたりの移動量を示すことができます。
単発のキー入力 (GetKeyDown/ GetKeyUp) UnityEngine.GetKey() 関数の代わりに、GetKeyDown() や GetKeyUp() 関数を使うと、指定したキーが押された瞬間、あるいは離された瞬間を調べることができます。</description></item><item><title>Unityスクリプト: デバッグログを表示する (Debug.Log)</title><link>https://maku.blog/p/bxcp2dp/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/bxcp2dp/</guid><description>デバッグログの基本 Debug.Log() 系の関数を使用すると、Unity の Console ビュー内にデバッグ用ログを出力することができます。
Debug クラス public static void Log(object message); public static void LogWarning(object message); public static void LogError(object message); デフォルトのレイアウトでは、Conosle ビューは画面の下の方に配置されています。
Debug.Log() の代わりに、Debug.LogWarning() で警告レベルのログ、Debu.LogError() でエラーレベルのログを出力できます。 Console ビュー上に表示されるアイコンも変化します。
Debug.Log() の使用例 using UnityEngine; public class Sample : MonoBehaviour { void Start() { Debug.Log(&amp;#34;Normal Log&amp;#34;); Debug.LogWarning(&amp;#34;Warning Log&amp;#34;); Debug.LogError(&amp;#34;Error Log&amp;#34;); } } デバッグログをゲームオブジェクトに関連づける Debug クラス public static void Log(object message, Object context); public static void LogWarning(object message, Object context); public static void LogError(object message, Object context); Debug.</description></item><item><title>Unityスクリプト: 空のゲームオブジェクトを作成する (GameObject)</title><link>https://maku.blog/p/j4fqyaj/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/j4fqyaj/</guid><description>GameObject クラス public GameObject(); public GameObject(string name); public GameObject(string name, params Type[] components); Unity のシーンは、様々なゲームオブジェクトを配置することで構築していきます。 GameObject クラスのコンストラクタ を使用して、空の GameObject インスタンスを生成することができます。
GameObject インスタンスを生成した後は、そこにコンポーネントを追加することで、オブジェクトの性質を付け加えていくことができます。
次の例では、MyGameObject という名前を付けて空のゲームオブジェクトを作成しています。 作成した GameObject インスタンスはフィールドで保持していませんが、明示的に削除するまではシーン上に残ります。
using UnityEngine; public class Sample : MonoBehaviour { void Start() { var obj = new GameObject(&amp;#34;MyGameObject&amp;#34;); } } 動的に作成されたゲームオブジェクトは、Hierarchy ビュー上で確認することができます。
空のゲームオブジェクトであっても、Transform コンポーネントだけはデフォルトで設定されているため、座標を移動するための矢印が画面上に表示されます。</description></item></channel></rss>