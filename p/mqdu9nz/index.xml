<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GraphQL クエリ仕様 on まくろぐ</title><link>https://maku.blog/p/mqdu9nz/</link><description>Recent content in GraphQL クエリ仕様 on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 14 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/mqdu9nz/index.xml" rel="self" type="application/rss+xml"/><item><title>GraphQL クエリ仕様: フィールド名にエイリアスを付ける</title><link>https://maku.blog/p/vnkd4ur/</link><pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/vnkd4ur/</guid><description>GraphQL クエリ言語の フィールド・エイリアス 機能を使うと、取得したフィールド値を参照するときに、任意の別名を付けて参照することができます。 例えば、GraphQL スキーマとしては company というフィールド名で定義されているものを、companyName という JSON プロパティ名で返して欲しいときは、次のようにフィールド・エイリアスを使用します。
GraphQL クエリ queryProfileInfoWithAlias{user(login:&amp;#34;maku77&amp;#34;){namecompanyName:companybio}} レスポンス { &amp;#34;data&amp;#34;: { &amp;#34;user&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;Makkuma&amp;#34;, &amp;#34;companyName&amp;#34;: &amp;#34;maku maku company&amp;#34;, &amp;#34;bio&amp;#34;: &amp;#34;すーぱーぷにぐらまー&amp;#34; } } } フィールド・エイリアスは、同名のフィールドを異なる引数で取得するときに役立ちます。
GraphQL クエリ query{maku77:user(login:&amp;#34;maku77&amp;#34;){...basicUserInfo}puni:user(login:&amp;#34;puni&amp;#34;){...basicUserInfo}}fragmentbasicUserInfoonUser{namebio} 上記のように 1 つのクエリの中で同名のフィールド（ここでは user）を要求する場合に、フィールド・エイリアス（ここでは maku と puni）を付けることで、レスポンスのプロパティ名がコンフリクトしないようにします。 というより、このケースではエイリアスを設定しないと、リクエスト時にエラーになります。
レスポンス { &amp;#34;data&amp;#34;: { &amp;#34;maku77&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;Makkuma&amp;#34;, &amp;#34;bio&amp;#34;: &amp;#34;すーぱーぷにぐらまー&amp;#34; }, &amp;#34;puni&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;Puni Puni&amp;#34;, &amp;#34;bio&amp;#34;: &amp;#34;ぷにぷにぷにょーん&amp;#34; }, } }</description></item><item><title>GraphQL クエリ仕様: フラグメント (Fragments) とインラインフラグメント (Inline Fragments)</title><link>https://maku.blog/p/wiv7it5/</link><pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/wiv7it5/</guid><description>GraphQL フラグメントでクエリをパーツ化する GraphQL クエリの中で、同じようなフィールドの指定（選択セット）を複数回使用する場合、それを フラグメント (Fragments) という再利用可能な選択セットとして切り出して定義しておくことができます。
例えば次の GraphQL クエリは、GitHub から自分のユーザー情報 (viewer) と、特定のユーザーの情報 (user) を一度に取得しています。
GraphQL クエリ queryQueryTwoUsers{viewer{login# ログインIDname# ユーザー名url# ユーザーの GitHub ホームページwebsiteUrl# ユーザーの Web サイトavatarUrl# ユーザーのアバター画像}user(login:&amp;#34;ログインID&amp;#34;){loginnameurlwebsiteUrlavatarUrl}} viewer フィールドと user フィールドは、両方とも User 型 のフィールドで、しかも、上記の例では User オブジェクトの中の同じフィールドを参照しています。 明らかに冗長な書き方です。
このようなケースでは、あるオブジェクトの特定のフィールドを参照するための選択セット (selection set) を、フラグメントの形で定義することができます。 次の例では、User オブジェクトの特定のフィールドを選択するための userFragment というフラグメントを定義しています。 フラグメントを使用する場所では、...userFragment のようにドットを 3 つ付けて参照します。
GraphQL クエリ queryQueryTwoUsers{viewer{...userFragment}user(login:&amp;#34;ログインID&amp;#34;){...userFragment}}# User オブジェクトの中のフィールドを選択するためのフラグメントfragmentuserFragmentonUser{login# ログインIDname# ユーザー名url# ユーザーの GitHub ホームページwebsiteUrl# ユーザーの Web サイトavatarUrl# ユーザーのアバター画像} ...userFragment のような記述を、GraphQL 用語で フラグメント・スプレッド（fragment spread) といいます。 その場所にフラグメントの内容を「展開する」という意味です。 JavaScript でオブジェクトを展開するときのスプレッド構文 (.</description></item></channel></rss>