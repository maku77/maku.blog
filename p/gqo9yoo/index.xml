<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TypeScript メモ on まくろぐ</title><link>https://maku.blog/p/gqo9yoo/</link><description>Recent content in TypeScript メモ on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 08 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/gqo9yoo/index.xml" rel="self" type="application/rss+xml"/><item><title>TypeScript とは</title><link>https://maku.blog/p/tdouo5p/</link><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/tdouo5p/</guid><description>TypeScript は、JavaScript に静的な型付けを行えるようにしたプログラミング言語です。 トランスパイラ (tsc コマンド）を使って、TypeScript で記述したコードを JavaScript のコードに変換するのが主な使い方になります。 大規模な JavaScript アプリケーションを開発するときに TypeScript を導入すると、品質の高いコードを効率よく作成できるようになります。
TypeScript はマイクロソフトによって開発が進められており、同じくマイクロソフトによって開発されている Visual Studio Code でコーディングを行うのがよいとされています。
数年前に CoffeeScript と呼ばれる同様の言語が一時的にブームになりましたが、現在は TypeScript が主流です。 TypeScript には下記のような特徴があり、しばらくは JavaScript alternative として主流であり続けるでしょう。
Microsoft により強力にサポートされており、Visual Studio Code が最新の TypeScript バージョンに迅速に対応します。 静的な型付けにより、実行前（トランスパイル時）にコーディングのミスを発見しやすくなります。型の推論がしやすくなるため、IDE（VS Code など）のプロパティ名の自動補完が効くようになります。これがほんとに便利で、特にサードパーティ製のライブラリを使っているときにありがたみが分かります。 JavaScript (ECMAScript) の新しい仕様を使ってコーディングできます。TypeScript が新しい構文で書かれたコードを過去バージョンの JavaScript コードに変換してくれるため、各ブラウザベンダーが新しい仕様に対応するのを待つ必要がありません。 JavaScript のコードは有効な TypeScript のコードとして動作します（構文に互換性があります。専門用語では JavaScript の「スーパーセット」であると言う）。そのため、既存の JavaScript プロジェクトに TypeScript を導入しようとするとき、既存の JavaScript コードを修正する必要がありません。また、これまでに身に着けた JavaScript のノウハウをそのまま活かし続けることができます。</description></item><item><title>TypeScript のコーディング規約（ルール／ガイドライン）</title><link>https://maku.blog/p/avssq37/</link><pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/avssq37/</guid><description>有名な JavaScript/TypeScript スタイル TypeScript のコーディングスタイルは下記のサイトが参考になります。
スタイルガイド（コーディング規約） - TypeScript Deep Dive 日本語版 TypeScript Deep Dive のスタイルガイドは、重要なポイントが簡潔にまとまっていてわかりやすいです。 standard/standard: JavaScript Standard Style セミコロンの省略を推奨していますが、2021 年時点ではまだセミコロン有り派の方が多いようです。モダンなプログラミング言語では行末にセミコロンを付けないものが多いので、セミコロン省略派が増えてきているというのも何となく頷けます。 関数定義の際に、カッコの前にスペースを強制するところがちょっと気持ち悪いです。 Node.js、npm、GitHub、Electron など有名どころが採用しています。 ドキュメントサイト airbnb/javascript: JavaScript Style Guide Airbnb は JS スタイルを細かく定義しています。ただ、長大すぎるので、重要なポイントをかいつまんで読むのには向いてません。ESLint などのツールを使ってスタイル強制する 場合にもよく使われますが、TypeScript 対応が不完全で、モジュールインポート時の拡張子省略がエラーになったりします（2021-05 時点）。 Coding guidelines · microsoft/TypeScript Wiki TypeScript 自体のコントリビューター用のコーディングガイドラインです。ユーザーレベルの開発プロジェクトに強制するものではないと注記がありますが、多くのルールはそのまま採用できると思います。インデントサイズは 4 とされていますが、多くの TypeScript プロジェクトではインデントサイズは 2 が採用されているので、ここだけ例外的です。 google/styleguide: Google Style Guides JavaScript/TypeScript 以外にもいろいろな言語の Google スタイルが説明されています。 JavaScript/TypeScript の世界では、上記の JavaScript Standard か Airbnb のスタイルの方が人気があるようです。 ESLint 用の設定ファイルはこちら まとめると、多くのスタイルガイドでは次のようなルールが採用されています。</description></item></channel></rss>