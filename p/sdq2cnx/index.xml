<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS CloudFormation/SAM/CDK のメモ on まくろぐ</title><link>https://maku.blog/p/sdq2cnx/</link><description>Recent content in AWS CloudFormation/SAM/CDK のメモ on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 13 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/sdq2cnx/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS CloudFormation 入門 (Hello World)</title><link>https://maku.blog/p/h7arpdj/</link><pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/h7arpdj/</guid><description>CloudFormation とは AWS CloudFormation を使用すると、テンプレートファイル (YAML or JSON) で定義した AWS リソース群をまとめて生成（更新）することができます。 いわゆる IaC (Infrastructure as Code) 環境を提供するものであり、Ansible や Chef を使ったことがあれば、それの AWS リソース構築用だと考えると分かりやすいです。
テンプレートから生成されるインフラ（AWS リソース群）は スタック と呼ばれ、テンプレートがあればスタックは何度でも生成することができます。 これはオブジェクト指向プログラミングにおける、クラスとインスタンスの関係に似ています。 必要のなくなったリソース群は、スタック単位でまとめて削除することができます。
CloudFormation の主な特徴は次の通りです。
何度でも同じ構成でリソースをセットアップできる（他のリージョンに複製したり、一時的に使うインフラを自動生成できる） テンプレートはテキストファイル (YAML/JSON) なので、GitHub などでバージョン管理することができ、PullRequest ベースのコードレビューを行える 冪等性が考慮されており、テンプレートには最終的な結果だけを定義しておけばよい（構成のアップデート時に差分を意識する必要はない） 例えば、次のようなテンプレートを使用すると、S3 サービスのバケットリソースを自動で作成することができます。
template.yml AWSTemplateFormatVersion:&amp;#34;2010-09-09&amp;#34;Resources:HelloBucket:Type:AWS::S3::Bucket 必須のルートプロパティは Resources だけですが、テンプレートフォーマットのバージョンを示す AWSTemplateFormatVersion は最低限指定しておくのがよいでしょう（2021年時点で、2010-09-09 が最新バージョンです）。
CloudFormation コンソールからスタックを生成する CloudFormation マネージメントコンソール を使うと、Web サイト上でスタックを生成することができます。
CloudFormation マネージメントコンソールを使ったスタックの生成手順は以下の通りです。
サイドバーから Stacks（スタック）を選択する CloudFormation で管理されているスタックの一覧が表示されます。 （スタックの作成）ボタンを押す テンプレートを指定する S3 上に置いたファイルを指定することもできますが、ここではローカルに作成した YAML ファイルをアップロードします。そのためには、Template is ready（テンプレートの準備完了） → Upload a template file（テンプレートファイルのアップロード）を選択し、YAML ファイルを選択します。 任意のスタック名（mystack など）を入力します テンプレートファイル内にパラメータ (Parameters) を定義している場合は、ここで具体的な値を入力できます。 あとはそのまま進めていって、Create stack（スタックの作成）を押せば、スタックの生成処理が始まります。 スタックの一覧画面に戻ると、作成中のスタックのステータスが CREATE_IN_PROGRESS となって表示されます。 しばらくしてスタックの生成処理が完了すると、ステータスが CREATE_COMPLETE に変わります。 これで、テンプレートで定義した AWS リソース群が使用できる状態になります。</description></item><item><title>AWS CloudFormation をコマンドライン (CLI) で操作する</title><link>https://maku.blog/p/zkxamw9/</link><pubDate>Thu, 11 Mar 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/zkxamw9/</guid><description>テンプレートファイルが正しく記述できているか確認する (cloudformation validate-template) YAML や JSON 形式で作成した CloudFormation 用のテンプレートファイルが、正しく記述できているかを調べることができます。
正しく記述できている場合 $ aws cloudformation validate-template --template-body file://template.json Description: Sample template Parameters: [] 不正なフォーマットの場合 An error occurred (ValidationError) when calling the ValidateTemplate operation: Template format error: JSON not well-formed. (line 5, column 2) 不正なプロパティがある場合 An error occurred (ValidationError) when calling the ValidateTemplate operation: Invalid template property or properties [ABC] スタックを作成する (cloudformation create-stack) ローカルの YAML テンプレートから生成 $ aws cloudformation create-stack --stack-name mystack \ --template-body file://template.</description></item><item><title>AWS CloudFormation で Lambda 関数のリソースを生成する</title><link>https://maku.blog/p/w8s8kx9/</link><pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/w8s8kx9/</guid><description>何をするか？ AWS CloudFormation を使うと Lambda 関数を含むインフラ（AWS リソース群）をまとめて生成することができますが、AWS CloudFormation の拡張である AWS SAM を使うと、もっと簡潔に Lambda 関数のリソースを生成することができます。
例えば、CloudFormation テンプレートの AWS::Lambda::Function リソースでは、Role プロパティが必須でしたが、SAM テンプレートの AWS::Serverless::Function リソースでは、Role プロパティはオプショナルになっています。 Role プロパティを省略すると、Lambda 関数に付けた論理 ID (Logical ID) をもとに、&amp;lt;論理ID&amp;gt;Role という名前のロールが自動生成されます。
ここでは、AWS SAM を使った Lambda 関数生成の基本として、次のようなパターンで CloudFormation スタックを生成してみます。
SAM テンプレートに関数コードを埋め込んでデプロイ S3 バケット上の関数の ZIP ファイルを使ってデプロイ SAM テンプレートに関数コードを埋め込んでデプロイ まずは、一番シンプルな例として、SAM テンプレート内に Lambda 関数の実装をハードコーディングしてしまい、それをデプロイ（CloudFormation スタックの生成）してみます。
下記が SAM テンプレートです。 SAM で Lambda 関数のリソースを定義するときは、リソースタイプとして AWS::Serverless::Function を指定します（CloudFormation では AWS::Lambda::Function です）。 ここでは関数の実装を InlineCode プロパティでハードコーディングし、単純な Hello World! メッセージをレスポンスとして返すようにしています。</description></item><item><title>AWS CloudFormation の設定例: Lambda 関数の設定いろいろ</title><link>https://maku.blog/p/pbo2dpy/</link><pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/pbo2dpy/</guid><description>タイムアウト時間 (Timeout) Lambda 関数のタイムアウト時間（最大実行可能時間）を設定するには、Timeout プロパティで秒単位の指定を行います。
例: タイムアウトを 15 秒にする AWSTemplateFormatVersion:&amp;#39;2010-09-09&amp;#39;Transform:AWS::Serverless-2016-10-31Resources:MyLambda:Type:AWS::Serverless::FunctionProperties:Runtime:nodejs14.xCodeUri:function.zipHandler:index.handlerTimeout:15 すべての Lambda 関数の Timeout 値をまとめて設定したいときは、Globals セクションを使います。
AWSTemplateFormatVersion:&amp;#39;2010-09-09&amp;#39;Transform:AWS::Serverless-2016-10-31Globals:Function:Runtime:nodejs14.xCodeUri:function.zipTimeout:15Resources:MyLambda1:Type:AWS::Serverless::FunctionProperties:Handler:index.handler1MyLambda2:Type:AWS::Serverless::FunctionProperties:Handler:index.handler2 環境変数 (Environment) Lambda 関数の中から参照可能な環境変数を設定するには、Variables プロパティに、キーと値のペアを指定します。 すべての Lambda 関数に共通で設定する環境変数は、Globals セクションで定義します。
Globals:Function:Environment:Variables:STAGE:ProductionTABLE_NAME:global-tableResources:MyFunction:Type:AWS::Serverless::FunctionProperties:Environment:Variables:TABLE_NAME:resource-tableNEW_VAR:hello トリガー設定 (Events) Lambda 関数を呼び出すためのトリガー（イベント）は、Events プロパティで定義できます。 Resouces プロパティと同様に、Events プロパティの一階層目にはイベントの論理 ID (Logical ID) を記述して、その下にそのイベントの設定を記述します。
Events プロパティの構成 Resources:MyFunction:Type:AWS::Serverless::FunctionProperties:Events:イベントの論理ID1:イベントの設定...イベントの論理ID2:イベントの設定... 一定時間ごとに呼び出す (Type: Schedule) Lambda 関数を一定時間ごとに呼び出したり、毎日決まった時刻に呼び出したりするには、Type: Schedule のイベントを設定します。 実際に生成される AWS リソースは EventBridge (CloudWatch Events) ルールです（リソースタイプは AWS::Events::Rule）。
次の例では、5 分おきに Lambda 関数を呼び出すように設定しています。
AWSTemplateFormatVersion:&amp;#39;2010-09-09&amp;#39;Transform:AWS::Serverless-2016-10-31Resources:HelloFunction:Type:AWS::Serverless::FunctionProperties:Runtime:python3.7Handler:index.handlerCodeUri:src/Events:MySchedule:Type:ScheduleProperties:Schedule:&amp;#39;rate(5 minutes)&amp;#39;# Schedule: &amp;#39;cron(0 * * * ?</description></item><item><title>AWS CloudFormation の設定例: Lambda 関数から S3 にアクセスできるようにする</title><link>https://maku.blog/p/dzdq3ep/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/dzdq3ep/</guid><description>CloudFormation (SAM) を利用して、Lambda 関数および S3 バケットを作成し、Lambda 関数から S3 バケットにアクセスできるようにポリシー設定するテンプレートの例です。 参考までに Lambda 関数の TypeScript コードも載せましたが、あくまで SAM テンプレートの記述例を示すことを目的としています。
SAM テンプレートの記述例 次の SAM テンプレートでは、AWS リソースとして S3 バケット (MyBucket) と Lambda 関数 (MyFunction) を定義しています。
template.yml AWSTemplateFormatVersion:&amp;#39;2010-09-09&amp;#39;Transform:AWS::Serverless-2016-10-31Resources:# S3 バケットの定義MyBucket:Type:AWS::S3::Bucket# Lambda 関数の定義MyFunction:Type:AWS::Serverless::FunctionProperties:Runtime:nodejs14.xHandler:build/index.handlerCodeUri:function.zipPolicies:- S3CrudPolicy:BucketName:!Ref MyBucketEnvironment:Variables:BUCKET_NAME:!Ref MyBucket S3 バケットは単純にスタック内に新規作成するだけなので、何もプロパティ設定していません。 ポイントは、Lambda 関数側のポリシー設定（Policies プロパティ）です。
Policies:- S3CrudPolicy:BucketName:!Ref MyBucket ここでは、AWS が標準で用意している S3CrudPolicy というポリシーを使っています。 このポリシーの BucketName パラメータとして、作成した S3 バケットの物理 ID (Physical ID) を渡すことで、Lambda 関数から S3 バケットの読み書き（CRUD 操作）が可能になります。 S3 バケットの Physical ID は、Ref 関数に Logical ID を渡すことで取得することができます。</description></item><item><title>AWS CloudFormation で S3 バケットのリソースを作成する</title><link>https://maku.blog/p/ugt6gr4/</link><pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ugt6gr4/</guid><description>S3 バケット定義の基本 AWS CloudFormation で S3 バケットを作成・設定するには、次のようにテンプレートファイル内で AWS::S3::Bucket タイプのリソースを定義します。
template.yml AWSTemplateFormatVersion:&amp;#39;2010-09-09&amp;#39;Resources:MyBucket:Type:AWS::S3::Bucket 上記の例では、論理 ID (Logical ID) が MyBucket の S3 バケットを定義しています。 論理 ID はこのテンプレートで生成するスタック内で一意の ID です。 実際に生成される S3 バケット名（物理 ID）は CloudFormation が自動で生成します（後述）。
このテンプレートを使って、CloudFormation スタック（ここでは S3 バケットのみ含まれる）を生成するには、次のように aws cloudformation deploy コマンドを実行します。
mystack スタックを生成 $ aws cloudformation deploy --template-file template.yml --stack-name mystack スタック内に生成された AWS リソースの一覧は次のように確認できます。
$ aws cloudformation describe-stack-resources --stack-name mystack StackResources: - DriftInformation: StackResourceDriftStatus: NOT_CHECKED LogicalResourceId: MyBucket PhysicalResourceId: mystack-mybucket-bq8iux8uepew ResourceStatus: CREATE_COMPLETE ResourceType: AWS::S3::Bucket StackId: arn:aws:cloudformation:ap-northeast-1:123456789012:stack/mystack/c7e06a46-9902-11eb-9a29-8b1f770a16f7 StackName: mystack Timestamp: &amp;#39;2021-04-09T07:09:13.</description></item><item><title>AWS CloudFormation で DyanamoDB のリソースを作成する</title><link>https://maku.blog/p/h3gsjs2/</link><pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/h3gsjs2/</guid><description>SAM で簡単な DynamoDB テーブルを生成してみる DynamoDB のテーブルリソースも、Lambda 関数などのリソースと同様に AWS SAM で自動生成＆更新することができます。 CloudFormation のテンプレートをそのまま記述するより、拡張された SAM テンプレートの形式で記述することで、シンプルにリソースを定義することができます。
SAM テンプレート内で DynamoDB のテーブルを定義するときは、リソースタイプとして AWS::Serverless::SimpleTable を指定します（CloudFormation スタック内に実際に生成されるリソースのタイプは AWS::DynamoDB::Table になります）。
DynamoDB テーブルを作成するための最低限の SAM テンプレートはとてもシンプルです。 次の例では、MyTable という 論理 ID (Logical ID) で DynamoDB のテーブルを定義しています。 論理 ID はスタック内でリソースを特定するための名前です。
template.yml AWSTemplateFormatVersion:&amp;#39;2010-09-09&amp;#39;Transform:AWS::Serverless-2016-10-31Description:My sample appResources:MyTable:Type:AWS::Serverless::SimpleTable ひとつもプライマリキーを指定していませんが、その場合はデフォルトで id という名前のプライマリキー（String 型）が定義されます。 AWS CLI で次のように実行すると、CloudFormation のスタックを作成することができます。
$ aws cloudformation deploy --stack-name mystack \ --template-file template.yml CloudFormation スタック内に、実際にどのような AWS リソースが作成されたかを調べるには以下のようにします。 ここではリソースタイプと、その物理 ID (Pysical ID) を table 形式で出力してみました。</description></item><item><title>AWS CloudFormation で SNS トピックのリソースを生成する</title><link>https://maku.blog/p/ymzbmx9/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ymzbmx9/</guid><description>CloudFormation で SNS トピックを作成する CloudFormation スタック内に SNS トピックを生成するには、CloudFormation テンプレートで AWS::SNS::Topic というタイプのリソースを定義します。
このリソースのプロパティはすべてオプショナル（省略可能）なので、最低限のリソース定義は次のようになります。
template.yml AWSTemplateFormatVersion:&amp;#39;2010-09-09&amp;#39;Resources:MyTopic:Type:AWS::SNS::Topic トピック名 (Properties.TopicName) すら指定していませんが、その場合は、CloudFormation のスタック名と、トピックの論理 ID（上記の場合は MyTopic）の組み合わせから、自動的にトピック名が割り当てられるようになっています（例: mystack-MyTopic-WMD9B9WWLEXN）。
上記のテンプレートから CloudFormation スタックを生成するには、AWS CLI を使って次のように実行します。
mystack スタックの生成 $ aws cloudformation deploy --stack-name mystack \ --template-file template.yml \ --capabilities CAPABILITY_IAM 無事スタックが生成されたら、次のようにして生成された SNS トピックの物理 ID (ARN) を調べることができます。
SNS トピックの ARN を調べる $ aws cloudformation describe-stack-resources \ --stack-name mystack \ --output text \ --query &amp;#34;StackResources[].PhysicalResourceId&amp;#34; arn:aws:sns:ap-northeast-1:123456789012:mystack-MyTopic-WMD9B9WWLEXN Lambda 関数や S3 バケットから SNS トピックに対して publish するときは、この ARN を指定することになります。</description></item><item><title>AWS CloudFormation の設定例: SNS トピックを Lambda 関数からサブスクライブする</title><link>https://maku.blog/p/5q4epyb/</link><pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/5q4epyb/</guid><description>何をするか？ ここでは、CloudFormation (SAM) のテンプレートを使って、SNS トピックをサブスクライブする Lambda 関数を定義してみます。
サブスクライブ対象とする SNS トピック自体は、あらかじめ何らかの方法で作成済みであり、次のような ARN を取得できているものとします。
SNS トピックの ARN arn:aws:sns:ap-northeast-1:123456789012:mytopic 上記のような CloudFormation スタックが完成すると、マネージメントコンソールや CLI で SNS トピックのメッセージを発行して、Lambda 関数にイベントが届くことを確認できます。
参考リンク CloudFormation で SNS トピックの作成 CloudFormation の設定例: S3 通知を SNS トピックに Publish する テンプレートの記述例 次の SAM テンプレートでは、Lambda 関数を定義しつつ、そのイベントソースとして SNS トピックを設定しています。 イベントソースの指定は、実際には、SNS トピックに Lambda 関数をサブスクライブすることを意味しています。 SNS トピックの ARN は、入力パラメータ TopicArn のデフォルト値として指定しています。
template.yml AWSTemplateFormatVersion:2010-09-09Transform:AWS::Serverless-2016-10-31Parameters:TopicArn:Type:StringDefault:arn:aws:sns:ap-northeast-1:123456789012:mytopicResources:MyFunction:Type:AWS::Serverless::FunctionProperties:Runtime:python3.7Handler:index.handlerInlineCode:|import json def handler(event, context): s = json.dumps(event, indent=2) print(&amp;#39;Message received from SNS:&amp;#39; + s) return {&amp;#39;body&amp;#39;: s, &amp;#39;statusCode&amp;#39;: 200}# Lambda 関数を SNS トピックにサブスクライブするEvents:MySnsEvent:Type:SNSProperties:Topic:!</description></item><item><title>AWS CloudFormation の設定例: S3 通知を SNS トピックに Publish する</title><link>https://maku.blog/p/3o2dpyb/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/3o2dpyb/</guid><description>何をするか？ ここでは、CloudFormation のテンプレートを使って、次のような AWS リソースを定義してみます。
S3 バケット（Logical ID: MyBucket) SNS トピック (Logical ID: MyTopic) 上記の S3 バケットへの書き込み時に、SNS トピックへ publish 動作のイメージとしてはこんな感じです。
このような構成でリソースを作っておくと、S3 バケット上のデータ更新を、SNS トピックのサブスクライブによって監視できるようになります。 例えば、Lambda 関数を SNS トピックのサブスクライバーとして登録すれば、S3 バケットへの書き込みを Lambda 関数でハンドルできます。
参考情報 CloudFormation テンプレートで S3 バケットや SNS トピックを定義する方法は、下記の記事を参考にしてください。
CloudFormation で S3 バケットの作成 CloudFormation で SNS トピックの作成 テンプレートの記述例 次の CloudFormation テンプレートでは、S3 バケットと SNS トピックのリソースを定義しています。 デフォルトの名前はそれぞれ次のようになっています。
S3 バケット名: myapp-sample-bucket-&amp;lt;AccountId&amp;gt; SNS トピック名: myapp-sample-topic S3 バケット名は世界で一意でなければいけないため、末尾に使用中のアカウント ID を付加するようにしています。</description></item></channel></rss>