<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React フック関連の記事 on まくろぐ</title><link>https://maku.blog/p/pfdpybm/</link><description>Recent content in React フック関連の記事 on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 18 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/pfdpybm/index.xml" rel="self" type="application/rss+xml"/><item><title>React フック: useSWR でデータフェッチ</title><link>https://maku.blog/p/vm2ft83/</link><pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/vm2ft83/</guid><description>SWR とは useSWR フック SWR (useSWR) は、Next.js を開発している人たち (Vercel) が開発したデータフェッチ用の React フックライブラリです。 React アプリでデータフェッチを真面目に実装しようとすると、大体最後にこのライブラリに行き着きますので、最初からこれを使いましょう（GraphQL の場合は Apollo Client がありますが）。
SWR - React Hooks library for data fetching React コンポーネント内から Web API などを呼び出してデータフェッチを行う場合、標準の仕組みだけで実現しようとすると、useEffect フックなどで fetch 関数を呼び出したりすることになります。
useEffect による不完全なデータフェッチ実装 function Page () { const [user, setUser] = useState(null) useEffect(() =&amp;gt; { fetch(&amp;#39;/api/user&amp;#39;) .then(res =&amp;gt; res.json()) .then(data =&amp;gt; setUser(data)) }, []) // ... } もちろん、それで実現は可能なのですが、「データ取得前の表示」「エラー処理/リトライ処理」「非同期処理のキャンセル処理」などをちゃんとやろうとすると非常に煩雑なコードになってきます（上記コードはそれらが全く考慮できていません）。 useSWR フックを使うと、クライアントサイド JavaScript からのデータフェッチ処理をとても綺麗に記述することができます。
useSWR の使用例 import { FC } from &amp;#39;react&amp;#39; import useSWR from &amp;#39;swr&amp;#39; const fetcher = (url: string) =&amp;gt; fetch(url).</description></item><item><title>React Context で複数のコンポーネント間でデータを共有する</title><link>https://maku.blog/p/qoz8fow/</link><pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/qoz8fow/</guid><description>Context とは React の Context（コンテクスト） は、いわゆるグローバル変数の格納領域のようなもので、複数のコンポーネント間でのデータ共有に使用できます。 各コンポーネントから Context 情報にダイレクトにアクセスできるため、prop のように上位のコンポーネントから情報を伝搬させていく必要がありません。
Context をむやみに使うと、コンポーネントの再利用性が下がってしまいますが、アプリケーション全体で使用する次のような情報を Context で管理するとコードがすっきりします。
ログイン中のユーザー情報（認証情報） 言語設定 テーマ設定 Context の使い方 Context を作成する (createContext) Context オブジェクトは、React.createContext() で作成することができます。 複数のコンポーネントから参照することになるので、Context オブジェクトは単独のファイルとしてモジュール化しておきます。
React.createContext() の引数に任意のオブジェクトを渡すと、その値を初期値とする Context オブジェクトが生成されます。 次の例では、string 型のデータを保持する Context オブジェクトを生成しています。
MyContext.ts import * as React from &amp;#39;react&amp;#39;; export const MyContext: React.Context&amp;lt;string&amp;gt; = React.createContext&amp;lt;string&amp;gt;(&amp;#39;Default message&amp;#39;); Context を参照する (useContext) 関数コンポーネント内で、Context が保持するデータを参照するには、React.useContext() を使用します。 デフォルトでは、React.createContext() の引数に設定したデフォルト値が返されます。 上記の例では、Default message というデフォルトテキストを設定しているので、その値が返されることになります。
App.tsx import * as React from &amp;#39;react&amp;#39;; import { MyContext } from &amp;#39;.</description></item><item><title>React Context の情報をローカルストレージに保存する</title><link>https://maku.blog/p/bv9kv7h/</link><pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/bv9kv7h/</guid><description>何をするか？ ここでは、React の Context オブジェクトにセットした値をローカルストレージに保存し、次回のアプリ起動時にそこから値を復帰させる方法を説明します。 Context の使い方の基本は、次の記事を参照してください。
React Context で複数のコンポーネント間でデータを共有する Context の実装 下記の UserContext.tsx モジュールでは、React.createContext() で UserContext というオブジェクトを作成しています。 このオブジェクトは、gitHubToken という文字列データと、その値を更新するための setGitHubToken 関数を保持しています。 次のように実装することで、UserContext のデータをローカルストレージと同期させることができます。
gitHubToken の初期値に localStorage.getItem() から取得した値を設定する setGitHubToken の呼び出し時に localStorage.setItem() で値を保存する UserContext.tsx import * as React from &amp;#39;react&amp;#39;; // UserContext が保持する値の型 export interface UserContextType { gitHubToken: string; setGitHubToken: (token: string) =&amp;gt; void; } // ローカルストレージ用のキー const KEY_GITHUB_TOKEN = &amp;#39;gitHubToken&amp;#39;; // UserContext の生成 export const UserContext = React.createContext&amp;lt;UserContextType&amp;gt;({ gitHubToken: localStorage.getItem(KEY_GITHUB_TOKEN), // デフォルト値 setGitHubToken: (token: string) =&amp;gt; {} // ダミーセッター }); // UserContext にセッター関数を登録するためのコンポーネント export const UserContextProvider: React.</description></item></channel></rss>