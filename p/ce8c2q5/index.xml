<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Doxygen on まくろぐ</title><link>https://maku.blog/p/ce8c2q5/</link><description>Recent content in Doxygen on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 10 Jul 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/ce8c2q5/index.xml" rel="self" type="application/rss+xml"/><item><title>Doxygen のコメントの書き方: メンバ変数の行末コメント</title><link>https://maku.blog/p/n83ryrp/</link><pubDate>Tue, 10 Jul 2012 00:00:00 +0000</pubDate><guid>https://maku.blog/p/n83ryrp/</guid><description>メンバ変数の後ろにドキュメント・ブロックを置くことができます。
class Hoge { ... int var1; ///&amp;lt; ドキュメント int var2; //!&amp;lt; ドキュメント int var3; /*!&amp;lt; ドキュメント */ int var4; /**&amp;lt; ドキュメント */ }; enum の各エントリに対しても同様にドキュメントを記述することができます。 このように、行末に1行で記述したドキュメントは、Brief description として扱われます。</description></item><item><title>Doxygen のコメントの書き方: TODO コメント</title><link>https://maku.blog/p/8nnbyho/</link><pubDate>Tue, 09 Jun 2009 00:00:00 +0000</pubDate><guid>https://maku.blog/p/8nnbyho/</guid><description>関数のコメントとして、以下のように @todo タグを入れておくと、 ドキュメント内の Member Function Documentation の節で、TODO リストとして表示されるようになります。
ヘッダファイルではなく、CPP ファイル内にインラインコメントとして @todo を含めることもできます。 この場合は、ヘッダファイル内の関数コメントとして有効な Doxygen コメントを記述しておく必要があります。
/** * @brief Brief description. * @todo Modify macros. */ void Hoge(); void MyClass::Hoge() { /// @todo Modify macro name. TEMPORARY_MACRO(); }</description></item><item><title>Doxygen のコメントの書き方: 関数のコメント</title><link>https://maku.blog/p/t3xmq3m/</link><pubDate>Tue, 09 Jun 2009 00:00:00 +0000</pubDate><guid>https://maku.blog/p/t3xmq3m/</guid><description>関数のコメントの書き方 ここでは、Javadoc スタイルのコメント記法を使っています。
/** * @brief Brief description 1. * Brief description 2. * * Detailed description 1. * Detailed description 2. * @param[in] param1 Param1's explanation. * @param[out] param2 Param2's explanation. * @param[in,out] param3 Param3's explanation. * @return The number of channels in the list. * @see RelatedFunction() */ int MyFunc(int param1, const Foo&amp;amp; param2, Bar&amp;amp; param3); Brief description と Detailed description の間には空行を入れるようにします。 できれば Brief description は一行で書くようにしてください。
Detailed description を記述しない場合は、以下のように空行を省略しても大丈夫です（コマンドが切れ目になるので）。</description></item><item><title>Doxygen の基本的な使い方と初期設定</title><link>https://maku.blog/p/ne3ocwx/</link><pubDate>Tue, 09 Jun 2009 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ne3ocwx/</guid><description>コマンド 設定ファイル Doxyfile を作成する $ doxygen -g 次のように -s オプションを付けて生成すれば、最小限のコメントを含んだ Doxyfile を生成できます。
$ doxygen -s -g ドキュメントを生成する $ doxygen [configName] ※設定ファイル名を省略した場合は、Doxyfile が使用されます。
Doxyfile で最低限設定しておいた方がよさそうなタグ プロジェクト名を指定 PROJECT_NAME = MyProject HTML 形式のドキュメントだけを作成するように設定 GENERATE_HTML = YES GENERATE_CHI = NO GENERATE_LATEX = NO ※これがデフォルトで YES になってる GENERATE_RTF = NO GENERATE_MAN = NO HTML 出力形式の設定 SOURCE_BROWSER = YES # Files tab includes *.cpp files. GENERATE_TREEVIEW = YES # A side panel will be generated.</description></item><item><title>Doxygen の設定いろいろ (Doxyfile)</title><link>https://maku.blog/p/x79fc82/</link><pubDate>Tue, 09 Jun 2009 00:00:00 +0000</pubDate><guid>https://maku.blog/p/x79fc82/</guid><description>基本的な設定 プロジェクト名を指定 PROJECT_NAME = MyProject HTML 形式のドキュメントだけを作成するように設定 GENERATE_HTML = YES GENERATE_CHI = NO GENERATE_LATEX = NO ※これがデフォルトで YES になってる GENERATE_RTF = NO GENERATE_MAN = NO HTML 出力形式の設定 SOURCE_BROWSER = YES # Files tab includes *.cpp files. GENERATE_TREEVIEW = YES # A side panel will be generated. doxygen コマンド実行時に warning 以外の出力を抑制する QUIET = NO WARNINGS = YES 指定したディレクトリ内のファイルを対象にする 例: カレントディレクトリ以下を対象にする（デフォルト） INPUT = RECURSIVE = YES 例: 指定したディレクトリ以下を対象にする INPUT = /home/john/src RECURSIVE = YES 特定のディレクトリを対象外にする パターンに一致する名前のディレクトリをドキュメント化の対象から外すことができます。</description></item><item><title>Doxygen でどのコメントスタイルを使うべきかの考察</title><link>https://maku.blog/p/qnnukuj/</link><pubDate>Tue, 08 Aug 2006 00:00:00 +0000</pubDate><guid>https://maku.blog/p/qnnukuj/</guid><description>方法(1) Javadoc スタイル これが一番よく使われている記法だと思います。 特にこだわりがないのであれば、この記法を使っておくのが無難です。
/** * @brief Brief description. * * Detail description. * @param a hogehoge * @param b hogehoge */ void Hoge(int a, int b); 特徴 brief コマンドの後ろに空行が必要なため、行数が増えてしまうし、少しアンバランスな感じになる。 ひとつのコメントブロックとして判別しやすい。 簡易説明は 2 行以上に渡って記述できる（その代わり、brief の下に空行が必要という制約がある）。 簡易説明だけでよい場合にすっきり書くのが難しい（その場合は /// で一行で済ませる手がある）。 一行の Brief description だけ記述したい場合でも、以下のように @brief が必要です。
/** * @brief Brief description. */ void Hoge(); あるいは、
/** @brief Brief description. */ void Hoge(); 通常は Javadoc スタイルで書いておいて、一行の Brief description だけを記述したい場合だけ、C# スタイルのコメントを使うのがすっきりするかもしれません。</description></item></channel></rss>