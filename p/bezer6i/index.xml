<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MUI（Material-UI) on まくろぐ</title><link>https://maku.blog/p/bezer6i/</link><description>Recent content in MUI（Material-UI) on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 10 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/bezer6i/index.xml" rel="self" type="application/rss+xml"/><item><title>MUI で GitHub のようなリソース削除の確認ダイアログを作る（AreYouSure ダイアログ）</title><link>https://maku.blog/p/cbuan5h/</link><pubDate>Wed, 10 Aug 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/cbuan5h/</guid><description>何を作るか？ GitHub や AWS などで、何らかのリソースを削除するときに、次のような確認ダイアログが表示されることがあります。
図: GitHub のリポジトリ削除時の確認ダイアログ ユーザーは、削除対象のリソース名をタイピングするまで、削除ボタンを押すことができません。 これは、不用意にリソースを削除してしまわないための措置で、このようなダイアログは様々な場所で活用できます。 ここでは、MUI (Material-UI) で同様のリソース削除確認ダイアログ (AreYouSureDialog) の実装例を紹介します。 コードをシンプルにするために、表示テキストをハードコーディングしていますが、props に切り出せば汎用的な確認ダイアログとして使えるはずです。
AreYouSureDialog を実装する 完成時のイメージはこんな感じです。 UI のベースは、MUI の Dialog コンポーネントです。
ダイアログコンポーネントの実装 components/AreYouSureDialog.tsx import { FC, useCallback, useState } from &amp;#39;react&amp;#39; import { Button, Dialog, DialogContent, DialogContentText, DialogTitle, TextField, Typography, IconButton, } from &amp;#39;@mui/material&amp;#39; import CloseIcon from &amp;#39;@mui/icons-material/Close&amp;#39; /** ダイアログコンポーネントの props の型定義 */ type Props = { /** ダイアログを表示するなら true */ open: boolean /** 操作対象のリソース名（= ユーザーに入力させるテキスト） */ targetName: string /** * ダイアログを閉じるべきときに呼び出されます。 * * ユーザーが処理を承認したときは、submit の値が true となり、 * 捜査対象のリソース名が targetName に格納されます。 */ onClose?</description></item><item><title>MUI のスナックバーを簡単に表示できるようにする (@mui/material/Snackbar)</title><link>https://maku.blog/p/jbv7gox/</link><pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/jbv7gox/</guid><description>何をするか？ React 用の UI ライブラリである mui（旧: Material-UI）が提供している Snackbar コンポーネント を使うと、次のようなスナックバーを表示することができます。
ただ、MUI はあくまで UI ライブラリなので、表示の制御は React コンポーネントのステート管理の仕組み（useState など）を使って自力で行わなければいけません。 ただメッセージを表示したいだけなのに、ステート管理とか面倒です。 ここでは、MUI のスナックバーを簡単に表示できるようなフック関数 (useSnackbar) を作成してみます。 使い方のイメージは次のような感じです。
pages/sample.tsx import { NextPage } from &amp;#39;next&amp;#39; import { Button } from &amp;#39;@mui/material&amp;#39; import { useSnackbar } from &amp;#39;../libs/snackbar/Snackbar&amp;#39; const SamplePage: NextPage = () =&amp;gt; { const { showSnackbar } = useSnackbar() return ( &amp;lt;Button onClick={() =&amp;gt; showSnackbar(&amp;#39;This is an error message!&amp;#39;, &amp;#39;error&amp;#39;)}&amp;gt; Show &amp;lt;/Button&amp;gt; ) } export default SamplePage 任意の React コンポーネント（あるいは Next.</description></item><item><title>MUI コンポーネント (v5) に独自のスタイルを設定する (sx prop、styled)</title><link>https://maku.blog/p/87p5o2d/</link><pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/87p5o2d/</guid><description>MUI v5 以降のカスタムスタイル設定 MUI v5 以降でコンポーネントにカスタムスタイル (CSS) を割り当てる方法には、大きく下記の 2 つのやり方があります。
sx prop を使う方法 MUI のコンポーネントには sx prop が定義されていて、ここにスタイルオブジェクトを渡すことで、個別にスタイルを調整できます。つまり、使い捨てのスタイル設定を行う方法です。sx prop は HTML 要素本来の style プロパティと比べて簡潔な構文で記述できます。例えば、margin や padding の設定用に 1 文字 (m, p) のプロパティ名が定義されていたりします。 styled API を使う方法 既存のコンポーネントをラップする形で、スタイル拡張したコンポーネントを生成します。sx prop を使った方法に比べて再利用性が高い方法で、複数個所で使用するコンポーネントにスタイル設定したいときに便利です。styled() 関数は内部的には Emotion というライブラリが提供する関数につながっていますが、MUI では @mui/material/styles パッケージをインポートすることで使えるようになっています。 いずれの方法でも、テーマ設定（theme オブジェクト）に基づいたカスタマイズが可能で、この仕組みにより、アプリ全体のデザインに一貫性を持たせやすくなっています。
☝️ Emotion と JSS MUI v4 以前は、スタイルエンジンとして JSS ライブラリベースの withStyles() や createStyles() といった関数を使用していましたが、MUI v5 以降は、動的スタイルにおけるパフォーマンスがよい Emotion の styled() 関数を使うように変更されました。 MUI v5 を使用するアプリケーションでも @mui/styles パッケージをインポートすれば withStyles() や createStyles() 関数を使用できますが、@mui/styles パッケージは deprecated（非推奨）扱いとなっています。 代わりに、@mui/material/styles パッケージの styled() 関数を使いましょう。 以下、2 つのやり方を詳しく見ていきます。</description></item><item><title>MUI でカスタムコンポーネントに sx プロパティを渡せるようにする</title><link>https://maku.blog/p/5e4cikn/</link><pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/5e4cikn/</guid><description>何をするか？ MUI (Material-UI) ver.5 以降では、各コンポーネントのスタイル設定に便利な sx props を使うことができます。
The sx prop - MUI MUI コンポーネントをラップするようなカスタムコンポーネントを作成するときは、カスタムコンポーネント経由で sx props を渡せるようにしておくと、利用するときにマージン設定などを簡単に行えて便利です。
実装例 下記は、sx props を渡せるようにした CustomButton コンポーネントの実装例です。 sx props の値は、MUI の Button コンポーネントにそのまま渡しています。 型情報として SxProps&amp;lt;Theme&amp;gt; を使うところがポイントです。
src/components/CustomButton.tsx import { FC, ReactNode } from &amp;#39;react&amp;#39; import Button from &amp;#39;@mui/material/Button&amp;#39; import { SxProps, Theme } from &amp;#39;@mui/material/styles&amp;#39; type Props = { children: ReactNode sx?: SxProps&amp;lt;Theme&amp;gt; } export const CustomButton: FC&amp;lt;Props&amp;gt; = ({ children, sx }) =&amp;gt; { return ( &amp;lt;Button variant=&amp;#34;contained&amp;#34; sx={sx}&amp;gt; {children} &amp;lt;/Button&amp;gt; ) } これで、次のように sx prop 流のマージン設定などを行えるようになります。</description></item><item><title>MUI コンポーネント (v4) に独自のスタイルを設定する (makeStyles)</title><link>https://maku.blog/p/cw9ju6f/</link><pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/cw9ju6f/</guid><description>この記事では、MUI v4 以前の makeStyles() 関数を使ったカスタムスタイル設定方法を説明しています。 MUI v5 以降のカスタムスタイル設定では sx prop や styled() 関数を使用しますので、下記の記事を参照してください。
参考: MUI コンポーネントに独自のスタイルを設定する（v5 以降の sx prop、styled 関数を使う方法） Material-UI コンポーネントのスタイル設定 Material-UI が提供する各種コンポーネントには、表示スタイルを切り替えるためのプロパティが用意されています。 例えば、Button コンポーネント は variant や color プロパティで見た目を切り替えることができます。
&amp;lt;Button&amp;gt;Default&amp;lt;/Button&amp;gt; &amp;lt;Button variant=&amp;#34;contained&amp;#34; color=&amp;#34;primary&amp;#34;&amp;gt;Primary&amp;lt;/Button&amp;gt; &amp;lt;Button variant=&amp;#34;contained&amp;#34; color=&amp;#34;secondary&amp;#34;&amp;gt;Secondary&amp;lt;/Button&amp;gt; &amp;lt;Button variant=&amp;#34;outlined&amp;#34; disabled&amp;gt;Disabled&amp;lt;/Button&amp;gt; 多くのケースでは、この仕組みで十分にスタイル設定できるのですが、デフォルトのスタイルから外れた表示をしたり、div 要素など Material-UI 以外のコンポーネントに対して独自の CSS を適用したいことがあります。 このような場合、コンポーネントの実装ファイル内に直接 CSS コードを記述してスタイルをカスタマイズできます（JavaScript 内に記述するので CSS-in-JS と呼びます）。 React の世界では色々な CSS 参照方法がありますが、Material-UI は次のような理由で CSS-in-JS な記述方法を採用しています。
現在のテーマ設定に基づいたスタイル設定を行える（例: 基準スペースの2倍のマージンを設定する） コンポーネントの props の値を使って動的にスタイル設定できる（例: &amp;lt;MyButton color=&amp;quot;vivid&amp;quot;&amp;gt; で派手な色のスタイルを設定する） フックによるスタイル設定 (makeStyle) Material-UI で、コンポーネントに独自スタイルを設定する方法としては、主に次の 3 種類の方法が用意されています。</description></item><item><title>Next.js で Material-UI を使う</title><link>https://maku.blog/p/s6djqw3/</link><pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/s6djqw3/</guid><description>Material-UI は、マテリアルデザインを提供する React コンポーネントライブラリです。
Material-UI のインストール Material-UI のコアパッケージ (@material-ui/core) は、npm コマンドで簡単にインストールできます。 マテリアルデザイン系のアイコン を使いたい場合は、@material-ui/icons パッケージもインストールしておきます。
### yarn の場合 $ yarn add @material-ui/core $ yarn add @material-ui/icons ### npm の場合 $ npm install @material-ui/core $ npm install @material-ui/icons Next.js の create-next-app コマンドでプロジェクトを作成済みであれば、これだけで Material-UI コンポーネントを使う準備は完了です。 Material-UI のデフォルトテーマは Roboto フォントを使用する ので、次のようなコードを head 要素内に記述する必要がありますが、これは後述の _document.tsx で設定します。
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;amp;display=swap&amp;#34; /&amp;gt; Material-UI は font weight に 300/400/500/700 のいずれかを使用するので、上記のように読み込むデータを制限することで、ロード時間を削減できます。
Material-UI のコンポーネントを使ってみる Material-UI のインストールができたら、あとは、各コンポーネントの実装ファイルから import するだけで使用できます。 次の例では、Button コンポーネントと、ButtonGroup コンポーネントを使っています。</description></item></channel></rss>