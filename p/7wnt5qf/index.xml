<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TypeScriptのサンプルコード on まくろぐ</title><link>https://maku.blog/p/7wnt5qf/</link><description>Recent content in TypeScriptのサンプルコード on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Fri, 08 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/7wnt5qf/index.xml" rel="self" type="application/rss+xml"/><item><title>TypeScript で JSON オブジェクトに型情報を付加する</title><link>https://maku.blog/p/2hr3eqx/</link><pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2hr3eqx/</guid><description>何が問題か？ JSON テキストファイルの内容を JSON.parse した結果や、fetch API のレスポンスを json() 関数にかけた結果は、型情報のない any 型のオブジェクトになります。 TypeScript コードから、このオブジェクトのプロパティを参照しようとすると、「定義されていないプロパティを参照している」という感じの ESLint エラーになってしまいます。 何より、型情報がないデータをそのまま扱おうとすると、VS Code などでプロパティ名の入力補完機能が働きません。
ここでは、サンプルデータとして次のような JSON 形式の文字列を使うことにします。
const jsonText = `{ &amp;#34;games&amp;#34;: [ { &amp;#34;title&amp;#34;: &amp;#34;Title1&amp;#34;, &amp;#34;genres&amp;#34;: [&amp;#34;ACT&amp;#34;] }, { &amp;#34;title&amp;#34;: &amp;#34;Title2&amp;#34;, &amp;#34;genres&amp;#34;: [&amp;#34;ACT&amp;#34;, &amp;#34;RPG&amp;#34;] }, { &amp;#34;title&amp;#34;: &amp;#34;Title3&amp;#34;, &amp;#34;genres&amp;#34;: [&amp;#34;STG&amp;#34;], &amp;#34;note&amp;#34;: &amp;#34;Fantastic shooting game&amp;#34; } ] } ` この JSON 文字列を JSON.parse 関数でオブジェクトに変換して、そのプロパティを参照しようとすると、ESLint がエラーを出します。
// Unsafe assignment of an `any` value (@typescript-eslint/no-unsafe-assignment) const jsonObj = JSON.</description></item><item><title>Node.js で GitHub GraphQL API を使用する (@octokit/graphql)</title><link>https://maku.blog/p/h5s6ht5/</link><pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/h5s6ht5/</guid><description>概要 GitHub 上の情報を扱う API として、GitHub は GraphQL API を提供しています。
GitHub GraphQL API v4 | GitHub Developer Guide Node.js で GraphQL を扱う方法としては、Apollo ライブラリを使った方法 などがありますが、GitHub の GraphQL API を呼び出したいのであれば、GitHub が提供している GraphQL パッケージ @octokit/graphql を使うのが手っ取り早いかもしれません（エンドポイントの URL などを省略できます）。
octokit/graphql.js: GitHub GraphQL API client for browsers and Node @octokit/graphql - npm ここでは、TypeScript からこの @octokit/graphql パッケージを使用する方法を紹介します。
☝️ REST API と GraphQL API GitHub API バージョン 3 は REST API でしたが、柔軟性などの観点 から、GitHub API バージョン 4 の GraphQL 版の API を使用することが推奨されています。 GraphQL API を使用することで、REST API で複数のリクエストが必要だったものを 1 度のリクエストで取得できたりします。 また、GraphQL API でしか取得できない情報もあったりします。 セットアップ まず、TypeScript のプロジェクトを作成します。</description></item><item><title>Node.js で GitHub REST API を使用する (@octokit/rest)</title><link>https://maku.blog/p/7r6gr3d/</link><pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/7r6gr3d/</guid><description>概要 Octokit は、様々な言語から GitHub API を使用するためのライブラリを提供しています。 ここでは、TypeScript (JavaScript) 用の GitHub API v3 (REST API) ライブラリである、@octokit/rest を使用する方法を紹介します。
インストール @octokit/rest は次のようにインストールします（npm init で package.json を作成済みだと想定します）。
$ npm install @octokit/rest --save 実装（基本） 基本的には下記の API ドキュメントを参照しながら実装していくことになります。
octokit/rest.js API ドキュメント Octokit インスタンスを生成する main.ts import { Octokit } from &amp;#39;@octokit/rest&amp;#39;; const octokit = new Octokit(); このように生成した Octokit インスタンスを使って、様々な REST API を呼び出します。
リポジトリの一覧を取得する (repos.listForOrg) API ドキュメント (Repos - Get a repository)
次の例では、組織名 sony のパブリックなリポジトリを 5 件分取得しています。
octokit .</description></item><item><title>TypeScriptサンプル: ジェネリッククラスの定義例（MyStackクラス）</title><link>https://maku.blog/p/tkwj6bw/</link><pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/tkwj6bw/</guid><description>TypeScript で型パラメータを使用したジェネリッククラスの定義サンプルとして、簡単なスタッククラスの実装例です。 TypeScript の配列がスタックの代わりになるので、スタッククラスなど作る必要はありませんが、Generics の使用例ということで。
myStack.ts export class MyStack&amp;lt;T&amp;gt; { private items: T[] = []; push(item: T): void { this.items.push(item); } pop(): T | undefined { return this.items.pop(); } } 使用例 (main.ts) import { MyStack } from &amp;#39;./myStack&amp;#39;; const stack = new MyStack&amp;lt;number&amp;gt;(); stack.push(1); stack.push(2); stack.push(3); console.log(stack.pop()); //=&amp;gt; 3 console.log(stack.pop()); //=&amp;gt; 2 console.log(stack.pop()); //=&amp;gt; 1 console.log(stack.pop()); //=&amp;gt; undefined</description></item><item><title>TypeScriptサンプル: 文字列内のひらがなとカタカナを変換する (hiraToKana, kanaToHira)</title><link>https://maku.blog/p/tzjvcad/</link><pubDate>Mon, 17 Feb 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/tzjvcad/</guid><description> util.ts export class Util { /** * 文字列に含まれているすべてのひらがなをカタカナに変換した文字列を作成します。 * ただし、半角文字は変換しません。 * @param str ひらがなを含む文字列 */ static hiraToKata(str: string): string { return str.replace(/[\u3041-\u3096]/g, ch =&amp;gt; String.fromCharCode(ch.charCodeAt(0) + 0x60) ); } /** * 文字列に含まれているすべてのカタカナをひらがなに変換した文字列を作成します。 * ただし、半角文字は変換しません。 * @param str カタカナを含む文字列 */ static kataToHira(str: string): string { return str.replace(/[\u30A1-\u30FA]/g, ch =&amp;gt; String.fromCharCode(ch.charCodeAt(0) - 0x60) ); } } 使用例 import { Util } from &amp;#39;./util&amp;#39;; console.log(Util.hiraToKata(&amp;#39;あいうアイウ&amp;#39;)); //=&amp;gt; アイウアイウ console.log(Util.kataToHira(&amp;#39;あいうアイウ&amp;#39;)); //=&amp;gt; あいうあいう 参考リンク ひらがなとカタカナを正規表現で表す</description></item></channel></rss>