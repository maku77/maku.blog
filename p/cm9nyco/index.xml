<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GraphQL 関連記事 on まくろぐ</title><link>https://maku.blog/p/cm9nyco/</link><description>Recent content in GraphQL 関連記事 on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 21 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/cm9nyco/index.xml" rel="self" type="application/rss+xml"/><item><title>GraphQL ベストプラクティス</title><link>https://maku.blog/p/4reqy9i/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/4reqy9i/</guid><description>GraphQL アプリ開発のノウハウ集です。 GraphQL のスキーマ設計から、サーバー実装、クライアント実装まで、GraphQL を使ったアプリ開発全般にわたるベストプラクティスをまとめています。 業務や趣味での GraphQL アプリ開発を通じて学んだことをまとめていますが、多くの項目は、主要な GraphQL ライブラリ (Apollo や gqlgen）の設計や、『Production Ready GraphQL』、『GraphQL in Action』 などの書籍を参考にしています。
クライアントファースト、スキーマファースト クライアントファースト (Client First) で考える 何よりも、クライアントのユースケースを念頭において考えます。 これは、GraphQL を採用するそもそもの目的でもあります。 バックエンドで使うデータベースや言語などの、実装詳細に引っ張られた API 設計にならないように気を付けます。
できるだけ早い段階でクライアントとのインテグレーションを始めるようにします。組織内での開発であれば、スキーマ定義が終わった段階で すぐにモックサーバーを用意する ことで、クライアント開発チームが実装を開始できます。 クライアントのユースケース以上の API は作らない ようにします。YAGNI (You Aren&amp;rsquo;t Going to Need It) の原則に従いましょう。クライアント要求のない API を提供しようとすると、混沌とした設計になりがちで、パフォーマンスの悪化やセキュリティリスクを招きます。そして、deprecated な API の管理に苦しむことになります。 既存のデータベースから GraphQL API を生成するツールはいろいろありますが、クライアントファーストの考えからするとナンセンスであり、多くの場合は採用すべきではありません。クライアントのニーズを満たす API にはなりませんし、バックエンドの実装詳細に依存した API になってしまいます。必要のない情報まで公開してしまうことによるセキュリティリスクなど、総合的にデメリットが多いです。こういったツールは、本当にデータベースに依存した API がマッチするケースでのみ導入すべきです。REST API 定義から GraphQL スキーマを生成するツールもありますが、そもそも両者はデザインコンセプトから異なるものであり、それでよい API ができると考えてはいけません。 スキーマファーストで実装を進める 多くのケースでは、スキーマ定義を先に考える スキーマファースト で設計を進めると、サーバーとクライアントを並行して開発することができます。 どのような API を実装すればよいか、どのような情報を取得できるのかが、早い段階で全員に明らかになるからです。</description></item><item><title>GraphQL スキーマの Lint ツール (graphql-schema-linter) を導入する</title><link>https://maku.blog/p/adxcp3g/</link><pubDate>Wed, 21 Dec 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/adxcp3g/</guid><description>graphql-schema-linter とは？ graphql-schema-linter は、GraphQL スキーマファイル (*.graphqls) の記述の不備を指摘してくれる Linter です。 スキーマファーストなアプローチで GraphQL サーバー／クライアントを実装している場合は、Linter は早い段階で導入しておくことをお勧めします。
graphql-schema-linter のインストール graphql-schema-linter コマンドは、yarn あるいは npm でインストールできます。 依存パッケージである graphql も一緒にインストールする必要があります（package.json ファイルがない場合は、先に npm init で作成しておいてください）。
graphql-schema-linter のインストール # yarn の場合 $ yarn add --dev graphql graphql-schema-linter # npm の場合 $ npm install --save-dev graphql graphql-schema-linter 次のように実行できるようになっていれば OK です。
コマンドを実行できるか確認 $ npx graphql-schema-linter --help ...（ヘルプ表示）... コマンド名が長いので、npm スクリプトを定義して、yarn lint だけで実行できるようにしておくと便利です。 最低限の package.json ファイルは次のような感じになります。
package.json { &amp;#34;license&amp;#34;: &amp;#34;UNLICENSED&amp;#34;, &amp;#34;scripts&amp;#34;: { &amp;#34;lint&amp;#34;: &amp;#34;graphql-schema-linter graph/*.</description></item><item><title>GraphQL Code Generator でスキーマから TypeScript の型情報を生成する (graphql-codegen)</title><link>https://maku.blog/p/n2k2hxd/</link><pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/n2k2hxd/</guid><description>GraphQL Code Generator とは GraphQL Code Generator (graphql-codegen) は、GraphQL スキーマ (schema.graphqls) とクエリ用のドキュメント (query {...}) を入力として与えることで、さまざまな言語とライブラリに対応した型情報を生成するツールです。
公式 Web サイト - GraphQL Code Generator GitHub リポジトリ - dotansimha/graphql-code-generator 図: graphql-codegen の動作概要 C# や Dart 用のコードも生成できるようですが、ツール自体が NPM パッケージとして提供されているので、やはり TypeScript がメインターゲットですね。 クライアント側で、React + Apollo Client のフレームワークを使用している場合は、Apollo Client のフック API (useQuery) に渡すためのオブジェクトを生成してくれます。 GraphQL サーバー側のリゾルバー実装に使用する型情報を生成するのにも使用できますが、GraphQL サーバーを Golang の gqlgen で作る 場合などは、スキーマから Golang コードを生成する仕組みがそれ自体に備わっていたりするので、そこではこのツールは使いません。 一方、フロントエンドは React + TypeScript で作ることが比較的多いので、このツールの出番も多くなります。
入力するスキーマ情報としては、スキーマファイル（schema.graphqls など）を指定することも、GraphQL サーバーのアドレスを指定して Introspection 機能で取得することもできます。 GraphQL クライアントの開発中は、接続先の GraphQL サーバーも動いているでしょうから、そこから直接スキーマ情報を取得するのは理にかなっています。 例えば、GraphQL サーバー側の Git リポジトリでスキーマファイルを管理している場合、クライアント開発時にこのスキーマファイル自体を共有しなくて済みます。</description></item></channel></rss>