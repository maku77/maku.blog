<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GitHub GraphQL API のクエリ例 on まくろぐ</title><link>https://maku.blog/p/ubkahpw/</link><description>Recent content in GitHub GraphQL API のクエリ例 on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Fri, 31 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/ubkahpw/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub の GraphQL API Explorer の使い方</title><link>https://maku.blog/p/sk3rykz/</link><pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/sk3rykz/</guid><description>GraphQL API Expolorer とは GitHub の GraphQL API (API ver.4) を使用すると、GitHub で管理されているリポジトリの情報やユーザーの情報などを、柔軟な GraphQL クエリを使って取得することができます。 しかし、いろいろなクエリ方法が用意されていて、実際にどのような情報が取得できるのかが分かりにくかったりします。 そんなとき便利なのが、GitHub が Web サイトとして用意してくれている、GraphQL API Explorer です。
GraphQL API Explorer | GitHub Developer Guide GraphQL API Explorer を使用すると、GraphQL API を使ってどのような情報を取得できるのか、実際にクエリを実行して確かめることができます。 GitHub アカウントでサインインした状態であれば、プライベートリポジトリの情報も取得することができます。 GitHub GraphQL API を利用するアプリケーションを作成するときは、このサイトでどのようなクエリを発行すればよいのかを調べながら作っていくことになると思います。
クエリエディタでは、下記のようなショートカットキーを使用することができます。
Ctrl + Space &amp;hellip; 入力補完 Ctrl + Enter &amp;hellip; 実行 History 機能と Explorer 機能 History ボタンを押すと、過去に実行したクエリをロードすることができます。 クエリに次のように名前を付けておくと、History にその名前が表示されるので、後ほど再利用する予定があれば、わかりやすい名前を付けておくとよいでしょう。
queryGetApolloRepo{repository(owner:&amp;#34;apollographql&amp;#34;,name:&amp;#34;apollo-client&amp;#34;){owner{loginurl}nameurl}} Explorer ボタンを押すと、スキーマ定義に基づいて、入力可能なフィールドをツリー形式で参照することができます（これを使うより、Ctrl + Space による補完の方が便利ですが）。</description></item><item><title>GitHub GraphQL クエリ例: マイルストーン情報を取得する (milestone)</title><link>https://maku.blog/p/fdnpuro/</link><pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/fdnpuro/</guid><description>マイルストーン番号で Milestone オブジェクトを取得する リポジトリ名（組織名/リポジトリ名）が分かっている場合は、repository クエリ で取得した Repository オブジェクト の milestone フィールドに マイルストーン番号 を指定することで、そのマイルストーンの Milestone オブジェクト を取得することができます。 例えば、Web アプリなどでは、/milestone/123 のようなパスで指定したマイルストーンの情報を表示したいことがありますが、このようなケースで 123 という番号を使って情報を取得することができます。
記述中
GraphQL クエリ query{repository(owner:&amp;#34;myorg&amp;#34;,name:&amp;#34;myrepo&amp;#34;){milestone(number:123){numbertitledueOndescriptionurlissues(first:100){nodes{numbertitleclosedurl}}}}} マイルストーンが設定されていないイシューを取得する search クエリ で、Issue や PullRequest を検索するときに、query パラメータで渡す文字列に no:milestone を含めると、マイルストーンの設定されていないものだけを検索することができます。
次の例では、myorg/myrepo リポジトリにおいて、マイルストーンの設定されていない Issue の一覧を取得しています（query 引数に is:issue を含めることで、PullRequest まで取得されてしまうのを防いでいます）。
GraphQL クエリ query{rateLimit{costremaining}search(type:ISSUE,last:100,query:&amp;#34;repo:myorg/myrepo is:issue no:milestone&amp;#34;){nodes{...onIssue{numbertitleclosedurlassignees(first:100){nodes{loginavatarUrlurl}}labels(first:100){nodes{namecolor}}}}}} no:milestone の他にも、no:label（ラベルのないもの）、no:assignee（アサインされていないもの）、といった条件で検索することができます。
参考: 欠損しているメタデータで検索 - GitHub Docs あるリポジトリのマイルストーンの一覧を取得する → こちらを参照</description></item><item><title>GitHub GraphQL クエリ例: PullRequest の情報を取得する (search)</title><link>https://maku.blog/p/z69a3tk/</link><pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/z69a3tk/</guid><description>自分のレビュー待ちになっている PR を取得する search クエリの query パラメータで、is:pr review-requested:@me と指定すると、自分がレビューワー (reviewer) として設定されているプルリクエストを検索することができます。
GraphQL クエリ query{search(type:ISSUE,last:100,query:&amp;#34;is:open is:pr review-requested:@me&amp;#34;){issueCountnodes{...onPullRequest{numbertitleurlcreatedAtauthor{loginavatarUrlurl}reviewRequests(first:100){nodes{requestedReviewer{...onUser{loginavatarUrlurl}}}}}}}} PullRequest オブジェクトの詳細はこちら。</description></item><item><title>GitHub GraphQL クエリ例: イシュー情報を取得する (search)</title><link>https://maku.blog/p/i5ht5ep/</link><pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/i5ht5ep/</guid><description>イシュー情報の取得方法 イシュー情報を取得する方法は次のような方法があります。
ユーザーからたどる方法 &amp;ndash; viewer/user クエリ で User オブジェクト を取得し、そのユーザーに関連するイシュー（issues フィールド）を参照する方法 リポジトリからたどる方法 &amp;ndash; repository クエリ で Repository オブジェクト を取得し、そのリポジトリ内のイシュー（issues フィールド）を参照する方法 ダイレクトに検索する方法 &amp;ndash; search クエリ でもろもろの検索条件（リポジトリ名、タイプなど）を使ってダイレクトに検索する方法 search クエリによる検索はとても柔軟で、様々な条件（query パラメータ）を指定してイシューを検索することができます。 query パラメータには、GitHub の Issues ページの検索窓に入力できる is:issue is:open といった文字列で、下記のサイトに詳細仕様が記述されています。
Issue およびプルリクエストを検索する - GitHub Docs あるリポジトリのイシューの一覧を取得する 次の GraphQL クエリでは、myorg/myrepo リポジトリの最新 5 件のイシュー情報を取得しています。
GraphQL クエリ query{search(type:ISSUE,query:&amp;#34;repo:myorg/myrepo is:issue&amp;#34;,last:100){issueCountnodes{...onIssue{idnumbertitleclosedurlauthor{login}assignees(first:100){nodes{loginnameemail}}labels(first:100){nodes{namecolor}}}}}} search クエリはそのパラメータの意味を理解するのが重要です。
type: ISSUE 検索対象を示す必須パラメータで、ISSUE / REPOSITORY / USER のいずれかを指定する必要があります。ここでは、イシューやプルリクエストの情報を検索することを示しています（ISSUE はプルリクエストの情報まで含むことに注意）。 query: &amp;quot;repo:myorg/myrepo is:issue&amp;quot; 検索対象を指定したリポジトリに絞り込み、さらに、is:issue を指定することでプルリクエストを除外します。他にもいろいろな指定方法があります。 last: 100 最新の 100 件までのイシュー情報を取得します。100 件を超えるデータを取得するときはページネーション処理により、複数回のクエリ実行が必要です。 その他のクエリ方法いろいろ あるマイルストーンが設定されたイシューを取得する search(type:ISSUE,last:100,query:&amp;#34;repo:myorg/myrepo milestone: \&amp;#34;Milestone #123\&amp;#34; is:issue&amp;#34;) この例では、myorg/myrepo リポジトリから、マイルストーン名 Milestone #123 が設定されたイシューの一覧を取得しています。 マイルストーン名にスペースを含んでいる場合は、上記のようにエスケープされたダブルクォートでマイルストーン名を囲む必要があります。</description></item><item><title>GitHub GraphQL クエリ例: リポジトリの情報を取得する (repository)</title><link>https://maku.blog/p/du6env5/</link><pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/du6env5/</guid><description>GitHub の GraphQL API を使ってリポジトリの情報を取得するには、次のような方法があります。
repository クエリ &amp;hellip; 組織名（あるいはユーザ名）とリポジトリ名が分かっている場合 organization クエリ &amp;hellip; ある組織内のリポジトリの一覧を取得する場合（こちらの記事 を参考にしてください） search クエリ &amp;hellip; 汎用的な検索用クエリ でリポジトリを検索する search クエリでリポジトリを検索する 特定の組織 (organization) 内のリポジトリを取得するには、organization クエリを使って 得られた Organization オブジェクトの repositories を参照する方法もありますが、最初から search クエリを使っていろいろな条件を指定して検索する方が早いです。
参考: リポジトリを検索する - GitHub Docs 次の例では、myorg という組織内の、product というトピックの付けられたリポジトリの一覧を取得しています。
クエリ例 query{search(type:REPOSITORY,query:&amp;#34;org:myorg topic:product&amp;#34;,last:100){repositoryCountnodes{...onRepository{idurlnamedescriptioncreatedAt}}}} 実行結果 { &amp;#34;data&amp;#34;: { &amp;#34;search&amp;#34;: { &amp;#34;repositoryCount&amp;#34;: 3, &amp;#34;nodes&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;DEMwOlJlcG9zaXRvcnkzODA5MTQ0OQ==&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;https://github.com/myorg/Repo1&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Repo1&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;Repo1 の概要説明&amp;#34;, &amp;#34;createdAt&amp;#34;: &amp;#34;2015-06-26T04:54:51Z&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;DEMwOlJlcG9zaXRvcnkxNjI2NjczMjY=&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;https://github.</description></item><item><title>GitHub GraphQL クエリ例: 組織の情報を取得する (organization)</title><link>https://maku.blog/p/3o2doyb/</link><pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/3o2doyb/</guid><description>GitHub GraphQL API で指定した組織の情報を（ここでは github organization）の情報を取得には、organization クエリ を使用します。 organization クエリには、login パラメーターで組織名を渡します。
organization クエリが返す Organization オブジェクト を参照すると、そこに所属する メンバーの一覧、チームの一覧、リポジトリの一覧 などを取得することができます。
ある組織に所属するユーザー情報を取得する (Organization.membersWithRole) Organization オブジェクトの membersWithRole フィールドは OrganizationMemberConnection オブジェクトを保持しており、この nodes を参照することで、組織に所属するメンバーの一覧を取得できます。
GraphQL クエリ query{organization(login:&amp;#34;github&amp;#34;){namedescriptionurlmembersWithRole(first:3){nodes{loginnameemailupdatedAt}}}} 実行結果 { &amp;#34;data&amp;#34;: { &amp;#34;organization&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;GitHub&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;How people build software.&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;https://github.com/github&amp;#34;, &amp;#34;membersWithRole&amp;#34;: { &amp;#34;nodes&amp;#34;: [ { &amp;#34;login&amp;#34;: &amp;#34;mtodd&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Matt Todd&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;xxx@example.com&amp;#34;, &amp;#34;updatedAt&amp;#34;: &amp;#34;2022-05-28T16:13:01Z&amp;#34; }, { &amp;#34;login&amp;#34;: &amp;#34;jonmagic&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Jonathan Hoyt&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;xxx@example.com&amp;#34;, &amp;#34;updatedAt&amp;#34;: &amp;#34;2022-06-07T18:27:30Z&amp;#34; }, { &amp;#34;login&amp;#34;: &amp;#34;mislav&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Mislav Marohnić&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;xxx@example.</description></item><item><title>GitHub GraphQL API のクエリ例: ユーザー情報を取得する (viewer, user)</title><link>https://maku.blog/p/9bku4cj/</link><pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/9bku4cj/</guid><description>サインイン済みのユーザー情報を取得する (viewer) viewer クエリを使用すると、現在アクセスしているユーザー（サインイン中のユーザー）のユーザー情報（User オブジェクト）を取得することができます。
Queries - viewer GraphQL クエリ query{viewer{login# ログインIDname# ユーザー名email# メールアドレス（ユーザーが公開していれば）url# ユーザーの GitHub ホームページwebsiteUrl# ユーザーの Web サイトavatarUrl# ユーザーのアバター画像}} 実行結果 { &amp;#34;data&amp;#34;: { &amp;#34;viewer&amp;#34;: { &amp;#34;login&amp;#34;: &amp;#34;maku77&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Maku Maku&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;maku@example.com&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;https://github.com/maku77&amp;#34;, &amp;#34;websiteUrl&amp;#34;: &amp;#34;https://maku77.github.io/&amp;#34;, &amp;#34;avatarUrl&amp;#34;: &amp;#34;https://avatars2.githubusercontent.com/u/5519503?v=4&amp;#34; } } } 指定したログイン ID のユーザー情報を取得する (user) user クエリを使用すると、指定したユーザー名のユーザー情報を取得することができます。
Queries - user GraphQL クエリ query{user(login:&amp;#34;maku77&amp;#34;){login# ログインIDname# ユーザー名email# メールアドレス（ユーザーが公開していれば）url# ユーザーの GitHub ホームページwebsiteUrl# ユーザーの Web サイトavatarUrl# ユーザーのアバター画像}} 取得できるオブジェクトは、viewer クエリの場合と同様に User オブジェクト です。</description></item></channel></rss>