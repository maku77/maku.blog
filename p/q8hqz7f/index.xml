<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Next.js のスタイル設定 (CSS) on まくろぐ</title><link>https://maku.blog/p/q8hqz7f/</link><description>Recent content in Next.js のスタイル設定 (CSS) on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 10 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/q8hqz7f/index.xml" rel="self" type="application/rss+xml"/><item><title>Next.js ですべてのページにグローバルな CSS を適用する (pages/_app.ts)</title><link>https://maku.blog/p/s9iry9g/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/s9iry9g/</guid><description>Next.js で、すべてのページコンポーネント (pages/*.tsx) に共通のスタイルシート（いわゆるグローバル CSS）を適用したい場合は、pages/_app.tsx(js) というファイルを作成して、そこで CSS ファイルをインポートします。
例えば、グローバル CSS として次のようなファイルを用意したとします。
styles/global.css * { box-sizing: border-box; } html { margin: 0; padding: 0; } body { font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif; max-width: 50rem; padding: 0.5rem; margin: 0 auto; font-size: 100%; } a { color: inherit; text-decoration: none; } この CSS ファイルを pages/_app.tsx からインポートすれば、すべてのコンポーネントにスタイルが反映されます。 このファイルが存在しない場合は作成してください。
pages/_app.tsx import type { AppProps } from &amp;#39;next/app&amp;#39; import &amp;#39;.</description></item><item><title>Next.js でコンポーネント単位の CSS を作成する (CSS Modules)</title><link>https://maku.blog/p/seq2cmw/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/seq2cmw/</guid><description>CSS Modules とは CSS Modules は、コンポーネント（ファイル）単位で CSS ファイルを分けて管理する仕組みです（これ自体は Next.js の仕組みではありません）。 CSS の名前空間がコンポーネントごとに分離されるため、シンプルな CSS クラス名を付けても名前がコンフリクトする心配がありません。
Next.js は標準で CSS Modules の仕組みをサポートしており、CSS ファイルの拡張子を .module.css にするだけで、各コンポーネントの実装ファイルから簡単にインポートすることができます。
Next.js で CSS Modules 機能を使う Next.js で特定のコンポーネント用に CSS ファイルを用意するときは、そのコンポーネントと同じディレクトリに .module.css という拡張子を持つファイルを作成します。 この拡張子は、Next.js で CSS Modules の仕組みを使うときのルールです。
ここでは、警告メッセージを表示する Alert コンポーネント用の Alert.module.css を作成してみます。 といっても、普通に CSS ファイルを記述するだけです。 グローバルに適用する CSS ファイルと異なるのは、Alert コンポーネント用のスタイル定義しか含まれていないことです。
components/Alert.module.css .box { margin: 1em; padding: 0.5em; background: red; color: white; font-weight: bolder; border-radius: 0.5em; } この CSS ファイルを Alert コンポーネントから使用するには、次のようにインポートします。</description></item><item><title>Next.js で Sass (scss/sass) を有効にする</title><link>https://maku.blog/p/2n2doyb/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2n2doyb/</guid><description>Next.js は Sass を使ったスタイルシート記述 (.scss / .sass ファイル）をサポートしています。 ほぼゼロコンフィグ（設定なし）で使用できますが、NPM の sass モジュールだけはマニュアルでインストールする必要があります。
sass のインストール ### yarn の場合 $ yarn add sass --dev ### npm の場合 $ npm install sass --save-dev 今まで .css 拡張子で作成していたファイルを、.scss に変更すれば、SCSS フォーマットでスタイル記述できます。
置換前: styles/global.css 置換後: styles/global.scss あとは、.css ファイルをインポートしている部分を、.scss に置換すれば導入完了です。
pages/_app.tsx import type { AppProps } from &amp;#39;next/app&amp;#39; import &amp;#39;../styles/global.scss&amp;#39; export default function MyApp({ Component, pageProps }: AppProps) { return &amp;lt;Component {...pageProps} /&amp;gt; } もちろん、CSS Modules の仕組み を使っている場合にも Sass を使うことができます。 その場合は、.</description></item><item><title>Next.js でコンポーネント内に直接 CSS を記述する (styled-jsx)</title><link>https://maku.blog/p/pbp2dpy/</link><pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/pbp2dpy/</guid><description>Next.js は CSS-in-JS ライブラリの一種である styled-jsx をデフォルトでサポートしています（styled-jsx も Next.js と同様に Vercel がメンテナンスしています）。 React コンポーネントの定義の中に、次のように CSS を直接記述することができます。
&amp;lt;style jsx&amp;gt;{` ... `}&amp;lt;/style&amp;gt; 下記は実際に styled-jsx を使って p 要素をスタイル設定した例です。
pages/sample.tsx export default () =&amp;gt; &amp;lt;&amp;gt; &amp;lt;p&amp;gt;only this paragraph will get the style&amp;lt;/p&amp;gt; &amp;lt;style jsx&amp;gt;{` p { color: red; } `}&amp;lt;/style&amp;gt; &amp;lt;/&amp;gt; ここで設定したスタイルのスコープは、この React コンポーネントに閉じたものになるため、他の React コンポーネントに影響を与えてしまう心配がありません。 そのため、シンプルなタグ名やクラス名でスタイル設定を行うことができます。
Next.js は、外部ファイルとして作成した .css や scss ファイルを読み込む CSS Modules の機能 もデフォルトでサポートしています（その場合は *.module.css というファイル名にするというルールがあります）。</description></item><item><title>Next.js で Bootstrap と React Bootstrap を使う</title><link>https://maku.blog/p/k8mxakw/</link><pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/k8mxakw/</guid><description>何をするか？ Next.js アプリから、CSS フレームワークの Bootstrap を使えるようにする方法を説明します。
Bootstrap を導入 各コンポーネントの実装で、Bootstrap の CSS クラスを参照できるようにします React Bootstrap を導入 Bootstrap を React コンポーネントの形で使えるようにします Bootstrap を導入する bootstrap モジュールをインストールする方法 Bootstrap は npm install で簡単にインストールできます。
$ npm install bootstrap@next --save あとは、次のような pages/_app.tsx ファイルを作成して、グローバル CSS としてインポートすれば OK です。
pages/_app.tsx import type { AppProps } from &amp;#39;next/app&amp;#39; import &amp;#39;bootstrap/dist/css/bootstrap.min.css&amp;#39; export default function MyApp({ Component, pageProps }: AppProps) { return &amp;lt;Component {.</description></item></channel></rss>