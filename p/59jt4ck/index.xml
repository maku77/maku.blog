<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure Functions のメモ on まくろぐ</title><link>https://maku.blog/p/59jt4ck/</link><description>Recent content in Azure Functions のメモ on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 17 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/59jt4ck/index.xml" rel="self" type="application/rss+xml"/><item><title>Azure Functions で簡単な関数を作ってみる</title><link>https://maku.blog/p/vgt5g7f/</link><pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/vgt5g7f/</guid><description>Azure Functions を使うと、Web API 的なものを、サーバーの存在を意識せずに作成することができます。 ここでは、最初のステップとして、HTTP リクエストで送ったメッセージをオウム返しするだけの簡単な関数を作ってみます。
Functions アプリを新規作成する 新しい Functions アプリを作成するには、Azure ポータルのリソースの作成画面 から、Functions App（関数アプリ） を選択します。 Azure のアカウントがない場合は先に作成する必要があります。
画面に従って入力していけば作成できますが、いくつかポイントがあるので説明しておきます。
基本タブ 関数アプリ名 &amp;hellip; 任意のアプリ名を付けることができますが、&amp;lt;アプリ名&amp;gt;.azurewebsites.net というアドレスが割り当てられるので、世界で一意な名前を指定する必要があります。 ランタイムスタック &amp;hellip; 関数の実装に使用する言語を選択します。JavaScript で記述するなら Node.js、C# で実装するなら .NET Core を選択しておきます。 ホスティングタブ プランの種類 &amp;hellip; 今回のテストのように、ときどき実行するだけなら 消費量（サーバーレス） を選択しておきます。App Service プラン は常時起動型の VM でホスティングするもので、ほとんど関数呼び出ししなくても月額数千円はかかってしまうので、最初は避けておくのが無難です。ただし、すでに他の Web サーバに App Service リソースを使用しているのであれば、そちらに相乗りしてホスティングすることが可能です。 最後に 作成 ボタンを押せば、数分で Functions のリソース作成が完了します。
Functions アプリに関数を追加する Functions リソースに新しい関数を追加するには、関数 → 追加 と選択します。 ここでは HTTP リクエストにより関数を実行するので、HTTP trigger を選択します。</description></item><item><title>Azure Functions に npm install で Node モジュールを追加する</title><link>https://maku.blog/p/9t7hs4e/</link><pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/9t7hs4e/</guid><description>Azure Functions への npm install Azure Functions の関数を Node.js ランタイムで動かしている場合は、通常の Node.js アプリと同様に NPM パッケージを npm コマンドでインストールして使用することができます。 簡単なのは、Azure ポータル の Function App リソースの コンソール 画面から npm install を実行する方法です。
コンソールを開くと、Function App のルートディレクトリ（通常は D:\home\site\wwwroot）がカレントディレクトリになってプロンプトが表示されます。 ここから次のように package.json の作成と、Node モジュールのインストールを行うことができます。
D:\home\site\wwwroot&amp;gt; npm init -y D:\home\site\wwwroot&amp;gt; npm install node-fetch --save これで、この Functions プロジェクト内のすべての関数から、インストールした Node モジュールを使用できるようになります。
npm install を実行するディレクトリ Functions プロジェクトのディレクトリ階層は次のように、関数ごとにディレクトリが分かれています。
D:\home\site\wwwroot +-- host.json +-- MyFunc1 | +-- function.json | +-- index.js +-- MyFunc2 +-- function.</description></item></channel></rss>