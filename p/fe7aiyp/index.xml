<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure DevOps のメモ on まくろぐ</title><link>https://maku.blog/p/fe7aiyp/</link><description>Recent content in Azure DevOps のメモ on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 28 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/fe7aiyp/index.xml" rel="self" type="application/rss+xml"/><item><title>Azure DevOps で無料のプライベート Git リポジトリ (Repos) を使用する</title><link>https://maku.blog/p/qt5qyzu/</link><pubDate>Mon, 30 Sep 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/qt5qyzu/</guid><description>Azure DevOps について GitHub は Microsoft によって買収されましたが、Azure ブランドの DevOps サービスでも Git リポジトリを扱う Repos という機能が提供されています。 GitHub は 2019 年から無制限に Private リポジトリを作成できるようになりましたが、Azure DevOps の方も無制限に Private リポジトリを作成することができ、5 ユーザーまでのコラボレーションが無料です（GitHub は 3 ユーザーまで）。 DevOps の Repos でも、GitHub のようにプルリクエストを使ったレビューを行えます。
さらに、DevOps には Pipelines という、継続的インテグレーション/継続的デリバリー (CI/CD) の機能も含まれており、こちらも毎月 1,800 分の実行まで無料で使用できます。 GitHub Actions なども同じような機能を提供する予定であり、これから Azure DevOps とどのような関係で進化していくのかわかりませんが、現状では Azure DevOps は魅力的な選択肢と言えそうです。
Azure DevOps の Git リポジトリ (Repos) を使用する DevOps で Git リポジトリを作成する場合、まずは DevOps のプロジェクトを作成し、その中に Git リポジトリを作成していくという構成になります。 1 つの DevOps プロジェクトには、いくつでも Git リポジトリを作成できます。</description></item><item><title>Azure Pipelines の使い方 (Hello World)</title><link>https://maku.blog/p/vxoctbs/</link><pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/vxoctbs/</guid><description>ここでは、Azure Pipelines の Hello World として、任意の GitHub リポジトリへ git push したときのビルド処理を自動化してみます。 ビルド処理は、Hello World らしく、echo Hello, world! を実行するだけにしておきます。
DevOps organization を作成する Azure Pipelines は、Azure DevOps の中の 1 サービスであり、まず最初に Azure DevOps の organization（組織）を作成する必要があります。 Azure アカウント上でまだ DevOps organization を作成していない場合は、下記 URL にアクセスすることで作成することができます。
https://dev.azure.com/ DevOps organization の構成は次のようになっており、organization 以下に複数のプロジェクトを作成することができます。 各プロジェクトには、複数の Repos（Gitリポジトリ）や Pipelines (CI/CDの仕組み) を設定することができます。
+ Azure DevOps organization + Project - Repos (Gitリポジトリ） - Pipelines (CI/CDの仕組み) - Boards（かんばん、バックログ管理など） - ... + Project - Repos - Pipelines - Boards - .</description></item><item><title>Azure Pipelines で Hugo サイトのビルド＆デプロイ</title><link>https://maku.blog/p/kevcr7m/</link><pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/kevcr7m/</guid><description>前提知識 Azure Pipelines の基本的な使い方は下記ページを参考にしてください。
Azure Pipelines の使い方 (Hello World) hugo deploy コマンドによる Hugo サイトのデプロイについては下記ページを参考にしてください。
hugo deploy コマンドで Azure などのクラウドサービス上にデプロイする | まくまくHugo/Goノート 事前準備 ここでは、Azure Pipelines の設定の説明をしますので、下記の作成・準備は終わっているものとします。
Hugo コンテンツ用の Git リポジトリ Azure Repos や GitHub の Git リポジトリに、Hugo サイトのコンテンツをコミットしてください。 hugo deploy コマンドのための設定 Hugo の設定ファイル config.toml に、deployment.targets などの設定をしてください。 Azure Pipelines の作成 Azure DevOps のプロジェクト内に、上記の Git リポジトリと連携する Pipelines を作成してください。 Hugo 自動ビルド＆デプロイのための Azure Pipelines 設定 azure-pipelines.yml trigger: - master variables: hugo_version: &amp;#39;0.68.3&amp;#39; pool: vmImage: &amp;#39;ubuntu-latest&amp;#39; steps: - script: wget -O hugo.</description></item><item><title>Azure Pipelines の Pull Request 時の起動トリガ設定</title><link>https://maku.blog/p/i6549xd/</link><pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/i6549xd/</guid><description>ビルドしない azure-pipelines.yml trigger: none # will disable CI builds entirely Azure Pipelines によるビルドを起動しないようにします。
trigger プロパティを省略すると、デフォルトですべてのブランチへのプッシュ時にビルドが走るので、ビルドしないようにするには、上記のように明示的に none 指定が必要です。 この設定を行うと、pr プロパティの設定（後述）も無効になります（Pull Request 時もビルドは実行されない）。
master ブランチへのプッシュ or マージでビルド？ azure-pipelines.yml trigger: - master 次のように複数のブランチをビルド対象とすることもできます。
trigger: - master - release このように記述すると、指定したブランチへのプッシュ or マージ時にのみ Pipelines が起動しそうに見えますが、この指定だけだと、 あらゆる Pull Request の作成時に Pipelines が起動します。 master ブランチや release ブランチをターゲットとしない Pull Request でもビルドが走ります。 なぜなら、Pull Request トリガの設定がデフォルトで次のようになっているからです。
pr: branches: include: - &amp;#39;*&amp;#39; このため、一連のステップにデプロイ処理まで組み込んでいると、レビュー用に Pull Request を上げただけでデプロイまで実行されてしまうという振る舞いになります。
Pull Request 時にビルドしない azure-pipelines.yml trigger: - master pr: none # no PR triggers 上記のように設定しておくと、Pull Request を作成したときには Pipelines は起動しなくなります。 つまり、master ブランチへのプッシュ or マージ時のみビルドが実行されます。</description></item><item><title>Azure Pipelines のビルド結果を GitHub にバッジ表示する</title><link>https://maku.blog/p/teq2cmv/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/teq2cmv/</guid><description>ステータスバッジとは ステータスバッジというのは、GitHub プロジェクトのトップページ (README.md) でよく見かける上のようなアイコンのことです。 ステータスバッジを貼り付けておくことで、最新のソースコードが正しくビルドできていることを一目で確認することができますし、ちゃんと開発しているんだということをアピールすることにもなります。
Azure Pipelines のビルド結果を示すステータスバッジは、下記のように簡単に追加することができます。
Azure Pipelines のステータスバッジを表示する ステータスバッジは、画像ファイルの URL の形で提供されているので、GitHub の README.md などにその URL を貼り付けるだけで OK です。
ステータスバッジの画像 URL を確認するには、Azure Pipelines のページを開き、右上のメニューアイコン → Status badge と選択します。
画像の URL と一緒に、Markdown ファイルに記述する場合のコード (Sample markdown) も表示してくれるので、GitHub のページに貼り付ける場合はそちらを使えばよいでしょう。 右側のコピーアイコンを押してクリップボードにコピーし、GitHub の README.md ファイルに次のような感じで貼り付ければ OK です。
これで、GitHub プロジェクトのトップページアクセスしたときに、次のようにステータスバッジが表示されるはずです。
ステータスバッジの画像が表示されないとき Azure DevOps にサインインしていない状態で、ステータスバッジが表示されない場合は、Pipelines の設定を確認してみてください。
上記のように、Disable anonymous access to badge という項目を OFF にすれば表示されるようになると思います。</description></item><item><title>Azure Pipelinesメモ: azure-pipelines.yml から別の Yaml をインクルードする (template)</title><link>https://maku.blog/p/36h9xj9/</link><pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/36h9xj9/</guid><description>Template 機能 Azure Pipelines の Template 機能を使用すると、別の Yaml ファイルに記述したビルド設定をインクルードすることができます。
Templates - Azure Pipelines | Microsoft Docs 変数を渡して、部分的に内容を置き換えることができるので、「インクルード」ではなく「テンプレート」と呼んでいるみたいです。
単純に共通の steps を読み込んで使うこともできるし、逆にテンプレートファイルに対してパラメータで stepList を渡すということもできます。
使用例（steps の共通化） 例えば、別の Yaml ファイル（テンプレート）に記述した steps 定義を、azure-pipelines.yml から読み込むとします。 テンプレートファイルには次のような感じで、ルートに steps 要素を記述します。
common-steps.yml（テンプレート） steps: - task: NodeTool@0 inputs: versionSpec: &amp;#39;10.x&amp;#39; displayName: &amp;#39;Install Node.js&amp;#39; - task: Npm@1 inputs: command: &amp;#39;ci&amp;#39; displayName: &amp;#39;npm ci&amp;#39; - task: Npm@1 inputs: command: &amp;#39;custom&amp;#39; customCommand: &amp;#39;run lint&amp;#39; displayName: &amp;#39;npm run lint&amp;#39; # ... azure-pipelines.yml の steps 以下で、上記のテンプレートファイルを読み込むには、template というキーワードを使用します。</description></item><item><title>Azure Pipelines トラブル: npm タスクを実行できないとき</title><link>https://maku.blog/p/7c2kdub/</link><pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/7c2kdub/</guid><description>Azure Pipelines の設定で、次のような感じで Npm タスクを追加したとき、
azure-pipelines.yml steps: - task: Npm@1 inputs: command: &amp;#39;ci&amp;#39; displayName: &amp;#39;npm ci&amp;#39; - task: Npm@1 inputs: command: &amp;#39;custom&amp;#39; customCommand: &amp;#39;run lint&amp;#39; displayName: &amp;#39;npm run lint&amp;#39; Node.js 系のコマンドが認識されていないと、エラーが出て Npm タスクを実行できません。
No agent found in pool Default which satisfies the specified demands: npm, Agent.Version -gtVersion 2.163.1 そのような場合は、steps の先頭で、次のように NodeTool (Node.js Tool Installer) タスクを実行しておくと、うまく動作するようになります 。
azure-pipelines.yml steps: # これで npm コマンドを認識するようになる - task: NodeTool@0 inputs: versionSpec: &amp;#39;10.x&amp;#39; displayName: &amp;#39;Install Node.</description></item></channel></rss>