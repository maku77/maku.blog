<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React の基本と環境構築 on まくろぐ</title><link>https://maku.blog/p/ofuan2e/</link><description>Recent content in React の基本と環境構築 on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 18 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/ofuan2e/index.xml" rel="self" type="application/rss+xml"/><item><title>React + TypeScript の環境を整える (1) 自力で webpack 設定する方法</title><link>https://maku.blog/p/m4dmt3a/</link><pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/m4dmt3a/</guid><description>React とは Web サイトを作成するときに React を採用すると、HTML をフラットな形でゴリゴリ記述していくのではなく、独自コンポーネント（例: &amp;lt;MyButton&amp;gt; コンポーネント）を定義してまとまりのある単位でサイトを構築していくことができます。 Web Components という同様な技術の標準化が進んでいますが、しばらくは React のようなコンポーネントライブラリが使われるでしょう。
React – ユーザインターフェース構築のための JavaScript ライブラリ ここでは React を使った Web サイト開発用に、下記のようなツールを組み合わた環境を構築します。
React &amp;hellip; コンポーネントベースで Web サイト構築するためのライブラリ TypeScript &amp;hellip; JavaScript を型付けできるようにした言語 webpack &amp;hellip; Web サイトのリソースをバンドルするためのツール この環境構築方法を理解すれば、React を利用した Web サイトをどんどん作ることができます。 ちなみに、上記のすべてのツールは Node.js 上で動作するため、Node.js がインストールされていない場合は先にインストールしてください。
TypeScript、React、webpack のインストール チュートリアルなどでは、create-react-app を使って React アプリの雛形を生成する方法がよく載っていますが、よくわからないモジュールが勝手にインストールされるのは気持ち悪いので、ここでは自力で各モジュールをインストールしてきます。
☝️ create-react-app は使わない方がいい TypeScript ベースの React アプリの雛形を生成するには、create-react-app myapp --template typescript のように実行します。 このコマンドによって作成された雛形をリファレンスにするのがよいかなと思ったのですが、少なくともバージョン 3.4.1 時点で生成される雛形はかなり怪しいです。 例えば、TypeScript の処理系や型定義ファイルが devDependencies ではなく、dependencies でインストールされるようになっていたりします。 最終的に Web サーバーにデプロイするファイル群は webpack で生成（バンドル）することを想定しているので、npm (or yarn) でインストールするモジュールは、 すべて devDependencies（開発用モジュール）としてインストール していきます（Web サーバー側で npm install を実行することはないということです）。</description></item><item><title>React + TypeScript の環境を整える (2) Parcel を使う方法</title><link>https://maku.blog/p/r7fov4b/</link><pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/r7fov4b/</guid><description>Parcel とは Parcel は、ゼロ設定 をウリとした Web アプリバンドラーです。 React + TypeScript + SCSS + CSS Modules といった環境を自力でセットアップしようとすると なかなか大変な設定が必要 なのですが、Parcel を使うと、開発環境がサクサクッと完成します。
React プロジェクトを作成するときは、create-react-app を使って雛形を生成する方法もありますが、余計なファイルがたくさん作られたりして、あまり分かりやすいとは言えません。 そんなときは Parcel を使ってみると、そのシンプルさに驚くと思います。
Parcel を使うと、次のような機能がほとんど設定なしでいきなり使えます。 コマンドラインオプションの一覧 を見ると、どのような機能があるかをざっと把握することができます。
開発用の Web サーバー機能（HMR: Hot Module Replacement 対応） TypeScript の自動変換（HTML ファイルから直接ロードする記述が可能） PostCSS による CSS 生成（SCSS、ベンダープレフィックス） CSS ファイルのインポート (CSS Modules) JSON ファイルのインポート PNG ファイルのインポート Pug (Jade) による HTML 生成 リリース用の minify また、Parcel は Node モジュールの自動インストール機能を備えており、parcel コマンドで開発用 Web サーバーを起動すると、自動的に依存モジュールをインストールしてくれます。 例えば、HTML ファイルから TypeScript ファイルを読み込んでいると、typescript モジュールが自動的にインストールされます。</description></item><item><title>React コンポーネント実装の基本（関数コンポーネントとクラスコンポーネント）</title><link>https://maku.blog/p/vfr3cnw/</link><pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/vfr3cnw/</guid><description>React で独自コンポーネントを作成する方法として、大きく次の 2 種類の方法があります。
関数コンポーネント (Function Components) クラスコンポーネント (Class Components) 昔は、ステートを持つコンポーネントは「クラスコンポーネント」で作成し、ステートを持たないものは「関数コンポーネント」として作成するという使い分けがありました。 現在は、関数コンポーネントでも Hook の仕組みでステートを管理することができるようになったため、関数コンポーネントの使用が推奨されています。
関数コンポーネント 関数コンポーネントの基本 下記は、固定のテキストを表示するシンプルな関数コンポーネントの定義例です。 TypeScript (@types/react) では、関数コンポーネントの型は React.FunctionComponent インタフェースとして定義されています。 エイリアスとして React.FC が定義されているので、こちらを使えばより短く記述できます。
components/Hello.tsx import * as React from &amp;#39;react&amp;#39;; // Hello コンポーネントの定義 export const Hello: React.FC = () =&amp;gt; { return &amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt; }; HTML ファイルから読み込む JS ファイルでは、ReactDOM.render() で上記の Hello コンポーネントを描画します。 次のコードを実行すると、&amp;lt;div id=&amp;quot;root&amp;quot;&amp;gt; 要素の内容が、Hello コンポーネントの内容に置き換えられます。
index.tsx（使用例） import * as React from &amp;#39;react&amp;#39;; import * as ReactDOM from &amp;#39;react-dom&amp;#39;; import { Hello } from &amp;#39;.</description></item><item><title>React コンポーネントのプロパティでハンドラメソッドを渡す</title><link>https://maku.blog/p/e2dpycn/</link><pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/e2dpycn/</guid><description>ここでは、次のようにプロパティ（属性）でハンドラメソッドを設定可能な React コンポーネントの実装例を示します。
&amp;lt;MyButton onClick={handleClick} /&amp;gt; ハンドラメソッドを設定可能なコンポーネントを実装する 次の MyButton コンポーネントは、ボタンクリック時に呼び出されるイベントハンドラを、onClick プロパティで設定できるようにしています。 この MyButton コンポーネントは、クリックするたびに内部のカウンタ (state.count) を +1 し、その値を指定されたイベントハンドラへ通知します。
components/myButton.tsx import * as React from &amp;#39;react&amp;#39;; // MyButton のプロパティ（属性）の型 export interface MyButtonProps { onClick?: (count: number) =&amp;gt; void; } // MyButton の状態（ステート）の型 interface MyButtonState { count: number; } // MyButton コンポーネント export class MyButton extends React.Component&amp;lt;MyButtonProps, MyButtonState&amp;gt; { constructor(props: MyButtonProps) { super(props); this.state = {count: 0}; } public render(): React.ReactNode { const {count} = this.</description></item><item><title>React コンポーネントのプロパティで配列データを渡す</title><link>https://maku.blog/p/av9mxak/</link><pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/av9mxak/</guid><description>React コンポーネントのプロパティには、文字列や数値などの単純なスカラ値だけではなく、配列などの複雑なオブジェクトを渡すことができます。 使用イメージは次のような感じです。
&amp;lt;MyComponent values={配列変数} /&amp;gt; 配列型のプロパティを扱うコンポーネントを作成する 次の Books コンポーネントは、プロパティ titles で文字列配列を受け取り、それぞれの値を li 要素で描画します。 配列の map メソッドを使用すると、複数の li 要素を簡単に生成することができます。
components/books.tsx（Books コンポーネント） import * as React from &amp;#39;react&amp;#39;; // Books コンポーネントのプロパティの型 export interface BooksProps { titles: string[] } // Books コンポーネントの定義 export const Books: React.FC&amp;lt;BooksProps&amp;gt; = (props) =&amp;gt; { // titles プロパティの要素数が 0 であれば何も描画しない if (props.titles.length == 0) return null; // titles プロパティの値を使って、複数の li 要素を作る const listItems = props.titles.map((title: string) =&amp;gt; &amp;lt;li&amp;gt;{title}&amp;lt;/li&amp;gt; ); // ul 要素の描画 return &amp;lt;ul&amp;gt;{listItems}&amp;lt;/ul&amp;gt;; }; この Books コンポーネントは次のような感じで使用します。</description></item><item><title>React コンポーネントで入力フォームを作成する (1) 自力編</title><link>https://maku.blog/p/tdpybmw/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/tdpybmw/</guid><description>制御コンポーネント (controlled components) React コンポーネントでフォームを構成する場合、コンポーネントの状態 (state) に基づいて表示を行うように実装すると、フォームの表示内容を制御しやすくなります。
このように、コンポーネントの表示内容が、完全にその状態 (state) によって決まるように実装されたものを、制御されたコンポーネント (controlled components) と呼びます。
このように設計することで、若干コード量は増えますが、表示内容を変更したいときはコンポーネントの state を変更するだけで済むようになります。 例えば、ネットワークから取得したデータをフォームに表示するような場合、そのフォームの構造を知る必要はなく、単純に state を更新するだけでよくなります。 これは、データとビューが分離された設計になっており、アプリ設計におけるベストプラクティスのひとつです。
input 要素の実装例 下記は、&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt; 要素と &amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt; 要素を持つ MessageForm コンポーネントの実装例です。 ユーザーがテキストを入力するたびに handleChange() が呼び出され、コンポーネントの状態 (state) が更新されます。 setState() の呼び出しにより state が変更が変更されると、再度 render() が実行され、表示内容が state の値に基づいて更新されます。
まずは、クラスコンポーネント形式での実装例。
components/MessageForm.tsx import * as React from &amp;#39;react&amp;#39;; interface IState { msg: string; } // テキスト入力エリアと、submit ボタンを持つフォームを表示するコンポーネント export class MessageForm extends React.Component&amp;lt;{}, IState&amp;gt; { constructor(props: {}) { super(props); // ステートの初期化（最初は入力エリアは空っぽ） this.</description></item><item><title>React コンポーネントで入力フォームを作成する (2) react-hook-form 編</title><link>https://maku.blog/p/k7it5fp/</link><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/k7it5fp/</guid><description>React Hook Form とは React アプリで入力フォームを自力で作ろうとすると、各入力エリアのステート管理などが 意外と大変だったりします。 React Hook Form ライブラリ (react-hook-form) を使用すると、そのあたりの定型処理をシンプルに記述することができます。
React Hook Form / npm / GitHub React Hook Form は次のような特徴を備えています。
軽量（別のライブラリに依存しない） TypeScript をサポート パフォーマンスがよい（不要なレンダリングを軽減） HTML 標準のフォームバリデーション との互換性 required / min / max / minLength / maxLength / pattern / validate React Native でも使える 2022 年 2 月時点で活発に開発が進められており、npm のダウンロード数は右肩上がりに増えています。 GitHub のスター数も 25,000 を超えているため、しばらくは安心して使えそうなライブラリです。
React Hook Form を導入する react-hook-form パッケージは、npm あるいは yarn で簡単にインストールできます。 既存の React プロジェクト内で次のように実行してください。
$ npm install react-hook-form あるいは $ yarn add react-hook-form React Hook Form の基本的な使い方 次の MyForm コンポーネントは、1 つのテキスト入力フィールドと、1 つの数値入力フィールドを持つフォームの実装例です。 ここでは TypeScript を使い、フォームの入力要素の型を FormData と定義しています。</description></item></channel></rss>