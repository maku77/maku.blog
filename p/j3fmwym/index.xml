<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>D3.js 関連記事 on まくろぐ</title><link>https://maku.blog/p/j3fmwym/</link><description>Recent content in D3.js 関連記事 on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 13 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/j3fmwym/index.xml" rel="self" type="application/rss+xml"/><item><title>D3.js による SVG 描画の基本</title><link>https://maku.blog/p/v38nmhw/</link><pubDate>Tue, 08 Aug 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/v38nmhw/</guid><description>D3.js は、クライアントサイド JavaScript で SVG 描画を行うためのライブラリです。 素の JavaScript（バニラ JavaScript) だけでも svg 要素を動的に構築していくことはできますが、D3.js を使うことでよりシンプルな API を使って描画処理を記述することができます。 ここでは、D3.js で基礎的な SVG 描画を行う方法を紹介します。
矩形を 1 つ描く D3.js で矩形を描画するには、d3.select() で svg 要素を選択し（D3 セレクションオブジェクトを取得）、そこに append() メソッドで rect 要素を追加します。 そして、メソッドチェーンさせる形で attr() を呼び出し、rect の属性（サイズや色）を設定していきます。
次の例では、svg 要素に緑色の矩形を 1 つ追加しています。 rect 要素の塗り潰し色は fill 属性で指定することに注意してください（CSS の &amp;ldquo;background&amp;rdquo; プロパティとは名前が異なります）。
図: 矩形の表示 &amp;lt;svg id=&amp;#34;mysvg&amp;#34; width=&amp;#34;200&amp;#34; height=&amp;#34;100&amp;#34; /&amp;gt; &amp;lt;script&amp;gt; d3.select(&amp;#34;#mysvg&amp;#34;) // svg 要素を選択 .append(&amp;#34;rect&amp;#34;) // svg 内に rect 要素を追加 .attr(&amp;#34;x&amp;#34;, 10) // rect 要素の属性値を設定 .</description></item><item><title>D3.js の d3-force でノードの引力・反発力・重力を考慮したレイアウトを行う (1) 基礎編</title><link>https://maku.blog/p/6kavdch/</link><pubDate>Wed, 13 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/6kavdch/</guid><description>d3-force とは D3.js の Force Simulation (d3-force) モジュールは、粒子（ノード）間の引力を考慮した座標計算を行うためのライブラリです（d3 モジュールに含まれています）。 主に、ノードとエッジで表現されるネットワークモデルをビジュアライズするために利用されます。 d3-force によって逐次計算される座標をもとにノードやエッジを描画することで、レイアウトが収束していく過程をアニメーションさせて見せることができます。
次の例では、d3-force を使って 5 つのノードの座標値を計算して、SVG の circle 要素として描画しています。
図: d3-force によるレイアウト 実装コード &amp;lt;svg id=&amp;#34;#svg-gi3ajww&amp;#34; width=&amp;#34;300&amp;#34; height=&amp;#34;200&amp;#34;&amp;gt;&amp;lt;/svg&amp;gt; &amp;lt;script&amp;gt; const svg = d3.select(&amp;#34;#svg-gi3ajww&amp;#34;) const width = +svg.attr(&amp;#34;width&amp;#34;) const height = +svg.attr(&amp;#34;height&amp;#34;) // ノード配列（どんなオブジェクトでもよい） const nodesData = [{}, {}, {}, {}, {}] // ノードを描画するための circle 要素を svg に追加しておく const nodes = svg.selectAll(&amp;#34;circle&amp;#34;) .data(nodesData) .join(&amp;#34;circle&amp;#34;) .attr(&amp;#34;r&amp;#34;, 10) .attr(&amp;#34;fill&amp;#34;, &amp;#34;blue&amp;#34;) // Simulation オブジェクトの作成とフォース設定 const simulation = d3.</description></item><item><title>D3.js でキーボードイベントを扱う (keydown)</title><link>https://maku.blog/p/6emds9m/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/6emds9m/</guid><description>D3.js でキーボードからの入力イベントを扱うコードのサンプルです。
図: クリックしてから上下左右キーで動かす 次の例では、svg 要素でキーボードイベントをハンドルしています。 svg 要素がフォーカスされた状態でカーソルキー（上下左右）を入力すると、丸印 (circle) が上下左右に動きます。
&amp;lt;svg id=&amp;#34;svg-z5a3fzu&amp;#34; width=&amp;#34;200&amp;#34; height=&amp;#34;100&amp;#34;&amp;gt;&amp;lt;/svg&amp;gt; &amp;lt;script&amp;gt; const svg = d3.select(&amp;#34;#svg-z5a3fzu&amp;#34;); // D3 Selection オブジェクトを取得 svg .on(&amp;#34;keydown&amp;#34;, handleKeyDown) // keydown イベントのハンドラーを設定 .attr(&amp;#34;tabindex&amp;#34;, 0) // フォーカスを当てられるようにする // .node().focus() // 自動でフォーカスする場合 // カーソルキーで動かせる丸を表示 const circle = svg.append(&amp;#34;circle&amp;#34;) .attr(&amp;#34;cx&amp;#34;, 100) .attr(&amp;#34;cy&amp;#34;, 50) .attr(&amp;#34;r&amp;#34;, 10) .attr(&amp;#34;fill&amp;#34;, &amp;#34;dodgerblue&amp;#34;) function handleKeyDown(event) { switch (event.code) { case &amp;#34;ArrowLeft&amp;#34;: circle.attr(&amp;#34;cx&amp;#34;, +circle.attr(&amp;#34;cx&amp;#34;) - 5) event.preventDefault(); break; case &amp;#34;ArrowRight&amp;#34;: circle.attr(&amp;#34;cx&amp;#34;, +circle.attr(&amp;#34;cx&amp;#34;) + 5) event.</description></item><item><title>D3.js でボタンなどの入力要素を扱う</title><link>https://maku.blog/p/s5zrgp3/</link><pubDate>Sun, 10 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/s5zrgp3/</guid><description>D3.js は主に SVG の描画に使われるライブラリですが、一般的な DOM 要素のイベントをハンドルするためにも使用できます。 ここでは、ボタンやテキスト入力要素を D3.js で扱う例を示します。
次の例では、ボタン (button) をクリックしたときに、その独自属性 (data-color) にセットされた値を取り出しています。 この仕組みを利用すれば、ボタンを押したときに SVG の表示内容を切り替えるといったことが可能です。
Green Yellow Red ボタンを押してみて
&amp;lt;div id=&amp;#34;buttonContainer&amp;#34;&amp;gt; &amp;lt;button data-color=&amp;#34;g&amp;#34;&amp;gt;Green&amp;lt;/button&amp;gt; &amp;lt;button data-color=&amp;#34;y&amp;#34;&amp;gt;Yellow&amp;lt;/button&amp;gt; &amp;lt;button data-color=&amp;#34;r&amp;#34;&amp;gt;Red&amp;lt;/button&amp;gt; &amp;lt;p id=&amp;#34;message&amp;#34;&amp;gt;ボタンを押してみて&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script type=&amp;#34;module&amp;#34;&amp;gt; import * as d3 from &amp;#34;https://cdn.jsdelivr.net/npm/d3@7/+esm&amp;#34;; d3.selectAll(&amp;#34;#buttonContainer button&amp;#34;) .on(&amp;#34;click&amp;#34;, function() { const color = d3.select(this).attr(&amp;#34;data-color&amp;#34;) d3.select(&amp;#34;#message&amp;#34;).text(`選択したカラーコード = ${color}`) }) &amp;lt;/script&amp;gt; 上記の例では、click ハンドラーの中で、d3.select() を使って D3 セレクションオブジェクトを生成していますが、次のように従来の DOM API だけを使って記述することも可能です。
.on(&amp;#34;click&amp;#34;, (event) =&amp;gt; { const color = event.target.dataset[&amp;#34;color&amp;#34;] // button の data-color の値を取得 document.</description></item><item><title>D3.js で各要素から任意のデータを取り出す (datum)</title><link>https://maku.blog/p/8m4drzr/</link><pubDate>Sun, 10 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/8m4drzr/</guid><description>図: D3 セレクションのデータを参照する D3 セレクションオブジェクトの datum() メソッドを使うと、任意のデータ（オブジェクト）を紐づけて、後から自由に参照できるようになります。 例えば、任意の要素上でマウスイベントが発生した場合に、その要素のデータを参照するというのが典型的な使用方法です。 D3 セレクションオブジェクトに紐づけられたデータを参照するときは、datum() メソッドを引数なしで呼び出します。 D3.js で複数要素をまとめて追加する際には data() メソッドを使用しますが、それでセットしたデータも datum() メソッドで参照することができます。
下記の例では、3 つの circle 要素のデータとして、name プロパティと color プロパティを持つ独自のオブジェクトを紐づけています。
&amp;lt;svg id=&amp;#34;svg-vmhww5v&amp;#34; w=&amp;#34;200&amp;#34; h=&amp;#34;100&amp;#34; /&amp;gt; &amp;lt;script&amp;gt; const svg = d3.select(&amp;#34;#svg-vmhww5v&amp;#34;); // 3 つの circle 要素に紐づけるデータ const data = [ { name: &amp;#34;circle-1&amp;#34;, color: &amp;#34;cyan&amp;#34; }, { name: &amp;#34;circle-2&amp;#34;, color: &amp;#34;yellow&amp;#34; }, { name: &amp;#34;circle-3&amp;#34;, color: &amp;#34;magenta&amp;#34; }, ]; // 情報表示用の text 要素 const text = svg.</description></item><item><title>D3.js でマウスイベントを扱う (click, mousemove, mouseover, mouseout)</title><link>https://maku.blog/p/ffz4v3w/</link><pubDate>Sat, 09 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ffz4v3w/</guid><description>D3.js でマウスイベントを扱うコードのサンプルです。
click イベント 図: click イベントをハンドルする D3.js でマウスのクリックイベントをハンドルするには、D3 Selection オブジェクトに click イベントハンドラを追加します。 上記の svg 要素内でクリックすると、その座標にピンク色の円が表示されます。
&amp;lt;svg id=&amp;#34;svg-vwuifrt&amp;#34; width=&amp;#34;200&amp;#34; height=&amp;#34;100&amp;#34; /&amp;gt; &amp;lt;script&amp;gt; const svg = d3.select(&amp;#34;#svg-vwuifrt&amp;#34;); // D3 Selection オブジェクトを取得 svg.on(&amp;#34;click&amp;#34;, (event) =&amp;gt; { const [x, y] = d3.pointer(event) svg.append(&amp;#34;circle&amp;#34;) .attr(&amp;#34;cx&amp;#34;, x) .attr(&amp;#34;cy&amp;#34;, y) .attr(&amp;#34;r&amp;#34;, 10) .attr(&amp;#34;fill&amp;#34;, &amp;#34;deeppink&amp;#34;) .style(&amp;#34;fill-opacity&amp;#34;, 0.5) }) &amp;lt;/script&amp;gt; event.clientX や event.clientY でマウスカーソルの座標値を取得してしまうと、ブラウザのクライアント領域全体の座標値になってしまうので、d3.point() で svg 要素内の座標値に変換するところがポイントです。
mousemove イベント 図: mousemove イベントをハンドルする D3.js でマウスカーソルを動かしたときのイベントをハンドルするには、D3 Selection オブジェクトに mousemove イベントハンドラを追加します。 上記の svg 要素内でマウスカーソルを動かすと、現在の座標値を表示します。</description></item></channel></rss>