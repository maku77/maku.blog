<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HTML/CSS のメモ on まくろぐ</title><link>https://maku.blog/p/jto2isn/</link><description>Recent content in HTML/CSS のメモ on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 19 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/jto2isn/index.xml" rel="self" type="application/rss+xml"/><item><title>フレックスボックス (Flexbox) レイアウトでサイドバーと本文を別々にスクロールできるようにする</title><link>https://maku.blog/p/zgqz8gp/</link><pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/zgqz8gp/</guid><description>CSS のフレックスボックスの登場により、サイドバーなどの2段組レイアウトを簡単に実現できるようになりました。 アプリによっては、サイドバーと本文部分を別々にスクロールできるようになっていると便利です。 次の例では、フレックスボックスのアイテムとして配置した 2 つの div 要素 (left と right) を、別々に縦スクロールできるようにしています。
HTML &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;left&amp;#34;&amp;gt; Left&amp;lt;br&amp;gt;Left&amp;lt;br&amp;gt;Left&amp;lt;br&amp;gt;Left&amp;lt;br&amp;gt;Left&amp;lt;br&amp;gt;Left&amp;lt;br&amp;gt; Left&amp;lt;br&amp;gt;Left&amp;lt;br&amp;gt;Left&amp;lt;br&amp;gt;Left&amp;lt;br&amp;gt;Left&amp;lt;br&amp;gt;Left&amp;lt;br&amp;gt; Left&amp;lt;br&amp;gt;Left&amp;lt;br&amp;gt;Left&amp;lt;br&amp;gt;Left&amp;lt;br&amp;gt;Left&amp;lt;br&amp;gt;Left&amp;lt;br&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;right&amp;#34;&amp;gt; Right&amp;lt;br&amp;gt;Right&amp;lt;br&amp;gt;Right&amp;lt;br&amp;gt;Right&amp;lt;br&amp;gt;Right&amp;lt;br&amp;gt; Right&amp;lt;br&amp;gt;Right&amp;lt;br&amp;gt;Right&amp;lt;br&amp;gt;Right&amp;lt;br&amp;gt;Right&amp;lt;br&amp;gt; Right&amp;lt;br&amp;gt;Right&amp;lt;br&amp;gt;Right&amp;lt;br&amp;gt;Right&amp;lt;br&amp;gt;Right&amp;lt;br&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; CSS body { margin: 0; height: 100vh; } .container { display: flex; height: 100%; } .left { width: 100px; background: #f9c; overflow-y: auto; } .right { flex: 1; background: #9cf; overflow-y: auto; } ポイントは次の通りです。
親要素 (container) の height で高さを指定する 子要素 (left/right) の overflow-y に auto を指定する これらの設定により、子要素の内容が表示領域 (height) に収まらないときに、自動的にスクロールバーが表示されるようになります。</description></item><item><title>Facebook や Twitter でシェアするときに画像や説明文が表示されるようにする (OGP: Open Graph Protocol)</title><link>https://maku.blog/p/awakw8i/</link><pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/awakw8i/</guid><description>OGP とは Web ページ内に、OGP: Open Graph Protocol に基づいた HTML タグを含めておくと、Facebook や Twitter などの SNS アプリで URL 共有したときに、サイト画像や説明文を表示することができます。 下記は、https://www.yahoo.co.jp/ を Facebook で共有したときの表示例です。
図: Yahoo! Japan の例 何も指定しなくても、ある程度はコンテンツから推測して表示してくれますが、想定外の画像が表示されてしまったりするので、ちゃんと指定しておいた方がよいです。
Web サイトに OGP メタ情報を付加する Open Graph タグを使ってメタ情報を付加するときは、主に次のような情報を記述します。
og:site_name : サイト名（og:title の方は個々のページの名前） og:title : ページのタイトル（サイト名は含まれないようにします） og:type : コンテンツの種類（website で OK。ブログ記事の場合は article を使うことも） og:url : ページの URL（絶対パスで指定） og:image : サムネイル画像の URL（絶対パスで指定）。さらに下記を指定することで、ページを最初にシェアするユーザーが画像を表示できるようになります。 og:image:width : サムネイル画像の幅（ピクセル値） og:image:height : サムネイル画像の高さ（ピクセル値） og:description : コンテンツの内容を示す説明文 og:locale : コンテンツのロケール（ja_JP で OK） これらのメタ情報は、HTML の meta 要素として、head 要素内に記述します。</description></item><item><title>HTML5 の time 要素の正しい使い方</title><link>https://maku.blog/p/ukama8m/</link><pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ukama8m/</guid><description>time 要素とは HTML5 には、機械（コンピュータ）の読み取りのための要素として data 要素が定義されています。 中でも時刻はよく使用する情報なので、特別に time 要素として定義されています。
この要素を記事内に含めておくことで、article 要素の作成日時や、ページ自体の作成日時を表現することができます。 正しいフォーマットで記述しておけば、検索エンジンの検索結果に日付を表示してもらえるかもしれません。 SEO 対策のためにも、time 要素を正しく記述できるようにしておきましょう。
time 要素の記述方法 &amp;lt;time datetime=&amp;#34;日時情報&amp;#34;&amp;gt;表示される日時&amp;lt;/time&amp;gt; time 要素のフォーマットは上記のようになっており、datetime はオプショナルな属性です。 datetime を省略する場合は、表示される日時 の部分が、RFC 3339 - Date and Time on the Internet で定義された形式で記述されている必要があります。 典型的な書き方は下記のような感じ。
書式 意味 2019-04-27 日付（UTC あるいは日本時間） 2019-04-27T21:30Z 日付＆時刻（UTC） 2019-04-27T21:30+0900 日付＆時刻（日本時間） 逆に、datetime オプションに上記のような日時情報を含めておけば、表示される日時 の部分には任意のテキストを指定することができます。 なので、下記の 2 つの time 要素はどちらも正しい記述です。
正しい書き方 &amp;lt;time&amp;gt;2019-01-01&amp;lt;/time&amp;gt; &amp;lt;time datetime=&amp;#34;2019-01-01&amp;#34;&amp;gt;2019年の元日&amp;lt;/time&amp;gt; datetime 属性を省略している場合は、表示される日時 の部分を独自形式で記述してはいけません。</description></item></channel></rss>