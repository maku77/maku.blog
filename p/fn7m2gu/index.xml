<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript / Node.js 関連メモ on まくろぐ</title><link>https://maku.blog/p/fn7m2gu/</link><description>Recent content in JavaScript / Node.js 関連メモ on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 16 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/p/fn7m2gu/index.xml" rel="self" type="application/rss+xml"/><item><title>NPM パッケージを作るときの package.json ファイルの書き方に関してのメモ</title><link>https://maku.blog/p/ryq6it6/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ryq6it6/</guid><description>name, version フィールド name と version フィールドは、パッケージを公開するつもりがないなら指定する必要はありません。
description フィールド description プロパティは、ユーザーがこのパッケージを探しやすくするための説明文で、npm search を実行したときに表示されます。
パッケージ対象外にするファイル (.npmignore / .gitignore) NPM パッケージを作るときに、.npmignore に書かれたファイルはパッケージングされなくなります。 .npmignore ファイルがない場合は、.gitignore ファイルが代わりに参照されます。 これらの設定にかかわらず、下記のファイルは必ずパッケージングされます。
package.json
README（大文字小文字と拡張子は問わない）
CHANGES / CHANGELOG / HISTORY（大文字小文字と拡張子は問わない）
LICENSE / LICENCE（大文字小文字と拡張子は問わない）
NOTICE（大文字小文字と拡張子は問わない）
main フィールドで指定されたファイル
bin フィールド NPM パッケージで何らかの実行コマンドを提供したいときは、bin フィールドを使用します。 例えば、mycommand コマンドを提供するときは次のように記述します。
{ // ... &amp;#34;bin&amp;#34;: { &amp;#34;mycommand&amp;#34;: &amp;#34;./cli.js&amp;#34; } } 単独のコマンドをインストールするための NPM パッケージを作る場合は、bin フィールドのコマンド名を省略して次のように記述できます。</description></item><item><title>JavaScript で任意のテキストをクリップボードにコピーする</title><link>https://maku.blog/p/buk5i2o/</link><pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/buk5i2o/</guid><description>copyToClipboard 関数 次の copyToClipboard 関数を使うと、引数で指定したテキストを OS のクリップボードにコピーすることができます。
function copyToClipboard(text){ // テキストコピー用の一時要素を作成 const pre = document.createElement(&amp;#39;pre&amp;#39;); // テキストを選択可能にしてテキストセット pre.style.webkitUserSelect = &amp;#39;auto&amp;#39;; pre.style.userSelect = &amp;#39;auto&amp;#39;; pre.textContent = text; // 要素を追加、選択してクリップボードにコピー document.body.appendChild(pre); document.getSelection().selectAllChildren(pre); const result = document.execCommand(&amp;#39;copy&amp;#39;); // 要素を削除 document.body.removeChild(pre); return result; } JavaScript からクリップボードにテキストをコピーするときは、任意の HTML 要素のテキストを選択して、document.execCommand('copy') を実行するという流れになります。 そのため、上記の関数では、テキスト選択用の一時的な pre 要素を作成しています。
使用例 例えば次のようにすると、ボタンを押したときにクリップボードにテキストをコピーできます。
クリップボードにコピー ← 実際に動作します
function copyToClipboard(text){ const pre = document.createElement('pre'); pre.style.webkitUserSelect = 'auto'; pre.style.userSelect = 'auto'; pre.</description></item><item><title>JavaScript で現在のページの URL の構成要素を取得する (window.location)</title><link>https://maku.blog/p/j6iu6gs/</link><pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/j6iu6gs/</guid><description>Web サイト上で実行される JavaScript から window.location を参照すると、カレントページの URL の構成要素をパーツごとに取得することができます。
JavaScript const loc = window.location; console.log(&amp;#39;location.href = &amp;#39; + loc.href); console.log(&amp;#39;location.origin = &amp;#39; + loc.origin); console.log(&amp;#39;location.host = &amp;#39; + loc.host); console.log(&amp;#39;location.protocol = &amp;#39; + loc.protocol); console.log(&amp;#39;location.hostname = &amp;#39; + loc.hostname); console.log(&amp;#39;location.port = &amp;#39; + loc.port); console.log(&amp;#39;location.pathname = &amp;#39; + loc.pathname); console.log(&amp;#39;location.search = &amp;#39; + loc.search); console.log(&amp;#39;location.hash = &amp;#39; + loc.hash); 例えば、次のようなアドレスにアクセスした場合は、
https://example.com:8042/over/there?key1=val1&amp;amp;key2=val2#nose 次のような結果を取得することができます。
location.href = https://example.com:8042/over/there?key1=val1&amp;amp;key2=val2#nose location.origin = https://example.com:8042 location.host = example.</description></item><item><title>Node.js で Evernote API を使用する（evernote モジュールインストールする）</title><link>https://maku.blog/p/ti537g4/</link><pubDate>Mon, 11 Nov 2013 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ti537g4/</guid><description>Evernote API を使用するには、API キーの取得と、Sandbox 用アカウントの作成を行っておく必要があります。
API キーの取得: http://dev.evernote.com/#apikey Sandbox 用アカウントの作成: https://sandbox.evernote.com Node.js から Evernote API を使用するために、evernote モジュールをインストールします。
$ npm install evernote 下記のようにして、evernote モジュールをロードできれば準備完了です。
var Evernote = require(&amp;#39;evernote&amp;#39;).Evernote; console.log(Evernote.EDAM_VERSION_MAJOR); console.log(Evernote.EDAM_VERSION_MINOR);</description></item></channel></rss>