<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Astro on まくろぐ</title><link>https://maku.blog/tags/astro/</link><description>Recent content in Astro on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 15 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/astro/index.xml" rel="self" type="application/rss+xml"/><item><title>Astro と Svelte を使ってみた所感（Web サイト作るときに何を使うか）</title><link>https://maku.blog/p/zays9nw/</link><pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/zays9nw/</guid><description>Next.js 以外の選択肢 2023 年現在、ある程度の規模の Web アプリを作れと言われたら、間違いなく Next.js (React.js) を使うのですが、小規模でほとんど静的な Web サイトを作れと言われたらちょっと迷ってしまうので、Astro と Svelte を少しだけ触ってみました。 もちろん、HTML や CSS を生でガリガリ書いて Web サイトを作ることもできますが、これらのフレームワークを使うことで、コンポーネント単位で Web ページを組み上げていくことができるのでコードの見通しがよくなります。
参考: Svelte 関連記事 Astro vs. Svelte 感覚としては、完全に静的な Web サイトを作るのであれば Astro がとてもシンプル でよさそうです。 ただし、フォームなどの入力要素が必要な場合は、データバインドを独自構文でサポートしている Svelte の方が便利かもしれません。 Svelte は簡単に使えるというけれど、独自のテンプレート構文などは若干 Vue.js の匂いがするので、そこを嫌う人は多そうです。 一方、Astro であれば、ほとんどドキュメントすら読まなくても理解できるくらい簡単です（React.js 触ったことがあれば即理解できるはず）。
Astro も Svelte も npm でビルドツールをインストールしますが、Astro であれば package.json の dependencies セクションが astro モジュールだけになるくらいシンプルです。
package.json { // ... &amp;#34;dependencies&amp;#34;: { &amp;#34;astro&amp;#34;: &amp;#34;^2.10.7&amp;#34; } } Astro モジュール自体が TypeScript や Vite を内包してくれているので、別途 TypeScript や Vite をインストールする必要はないし、VS Code の Astro 拡張 をポチッとインストールするだけで、Prettier による自動整形や TypeScript の型チェックがかかるようになります。 Svelte の場合は、Svelte 本体の他にも、SvelteKit や Vite や TypeScript などが dependencies にごちゃっと入ってきてしまうので、シンプルさに欠けます（こちらを好む人もいるのかもですが）。 まぁどちらも npm create で雛形生成すれば、ほぼゼロコンフィグで使えるんですが、Hello World レベルのコードで依存ファイルが多くなるのは避けたいところです。</description></item><item><title>Astro アプリから D3.js を使う</title><link>https://maku.blog/p/a8rq9gs/</link><pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/a8rq9gs/</guid><description>D3.js はクライアントサイド JavaScript から SVG 画像を生成するためのライブラリです。 ここでは、Web サイト生成用のフレームワークである Astro 上で、D3.js を使う方法を紹介します。 前提条件として、Astro のプロジェクトはすでに作成済みであるとします。 まだ作成していない場合は、次のように作成できます。
Astro プロジェクトの生成 $ npm create astro@latest D3.js はコンポーネントスクリプトからは使えない D3.js はクライアントサイド JS として動作し、DOM ツリー上の SVG 要素を動的に操作することを想定して設計されています。 一方で、Astro コンポーネントのフロントマター部分に記述するスクリプトは、サーバーサイドで（ビルド時に）実行されることを想定しています。 つまり、D3.js を使ったコードは、Astro のフロントマタースクリプトとして記述することはできません。 残念！
Chart.astro（間違った方法） --- import * as d3 from &amp;#34;d3&amp;#34;; const svg = d3.select(&amp;#34;#mysvg&amp;#34;); // ここでは DOM 要素にアクセスできない！ // ... --- &amp;lt;svg id=&amp;#34;mysvg&amp;#34; width=&amp;#34;400&amp;#34; height=&amp;#34;200&amp;#34;&amp;gt;&amp;lt;/svg&amp;gt; D3.js を使ったコードは、次のように &amp;lt;script&amp;gt; 要素の中に記述する必要があります。 ここに記述した JavaScript コードは、クライアントサイド（Web ブラウザ上）で実行されます。
Chart.astro（正しい方法） --- --- &amp;lt;svg id=&amp;#34;mysvg&amp;#34; width=&amp;#34;400&amp;#34; height=&amp;#34;200&amp;#34;&amp;gt;&amp;lt;/svg&amp;gt; &amp;lt;script&amp;gt; import * as d3 from &amp;#34;d3&amp;#34;; const svg = d3.</description></item></channel></rss>