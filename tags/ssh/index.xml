<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SSH on まくろぐ</title><link>https://maku.blog/tags/ssh/</link><description>Recent content in SSH on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Thu, 24 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/ssh/index.xml" rel="self" type="application/rss+xml"/><item><title>SSH キーの管理: SSH キーを作成する (ssh-keygen)</title><link>https://maku.blog/p/ftducs9/</link><pubDate>Wed, 13 Aug 2008 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ftducs9/</guid><description>SSH (Secure Shell) によるマシン間接続を有効にするには、接続元のマシンで SSH のキーペア（秘密鍵＋公開鍵）を作成し、接続先のマシンに公開鍵を登録する必要があります。 ここでは OpenSSH の ssh-keygen コマンドを使用した SSH キーの作成方法を紹介します。
SSH 鍵の作成 ssh-keygen コマンドをオプションなしで実行すると、SSH キー（秘密鍵＋公開鍵）を作成できます（SSH プロトコル ver.2 用）。 デフォルトでは暗号アルゴリズムとして RSA を使用するキーが生成されますが、-t オプションで暗号アルゴリズムを指定することができます。
SSH キーペアの生成 $ ssh-keygen -t ed25519 # Ed25519 鍵を作成する場合 -t オプション アルゴリズム 説明 rsa RSA 鍵 4096 bits の長い鍵長を選べば強度は出るが遅くなる ecdsa ECDSA 鍵 楕円曲線暗号。少ない鍵長で強度あり。ED25519 より普及している ed25519 Ed25519 鍵 楕円曲線暗号。少ない鍵長で強度あり。ECDSA より高速 dsa DSA 鍵 （非推奨）SSH2 の環境で使えるが、1024 bits しか選べないことが多い rsa1 RSA1 鍵 （非推奨）SSH1 のレガシー環境用。強度が弱いので使わない方がよい 実際に ssh-keygen コマンドを実行すると、パスワード (passphrase) の入力を求められるので、秘密鍵を使用する際のパスワードを設定しておきます。 このパスワードは、ssh コマンドでリモートホストに接続する際に入力することになります。 パスワード入力時に、何も入力せずに Enter を入力すれば、パスワードなしの SSH キーを生成できますが、通常はパスワードを設定してください。</description></item><item><title>SSH キーの管理: SSH キーのコメントを確認する／変更する (ssh-keygen -c)</title><link>https://maku.blog/p/o3m4j2h/</link><pubDate>Thu, 24 Nov 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/o3m4j2h/</guid><description>SSH 鍵ファイルのコメントを確認する OpenSSH の ssh-keygen コマンド で生成した SSH キーペア（秘密鍵＋公開鍵）には、デフォルトで ユーザー名@ホスト名 という形のコメントが付加されます。 このコメントは、公開鍵ファイル (~/.ssh/id_XXX.pub) の末尾を見ると確認できます。
~/.ssh/id_ed25519.pub ssh-ed25519 AAA3NzaC1AA...省略...COst+87ciWFY maku@macobook.local あるいは、ssh-keygen -l コマンドで確認することもできます。
SSH キーの内容を確認 $ ssh-keygen -l -f ~/.ssh/id_ed25519 256 SHA256:vd6Ab577wzS6/so1BR1zGP8r7br0smWV4Wklw28Rre0 maku@macbook.local (ED25519) SSH 鍵ファイルのコメントを設定する SSH キーのコメントは、キーの作成時に -C オプションで自由に設定できます。
コメントを指定して SSH キーを生成 $ ssh-keygen -t ed25519 -C &amp;#34;your_email@example.com&amp;#34; 既存の SSH キーのコメントを修正するには、ssh-keygen -c コマンドを使用します。
SSH キーのコメントを変更 $ ssh-keygen -c -C &amp;#34;新しいコメント&amp;#34; -f ~/.ssh/id_ed25519 オプションの大文字と小文字に注意してください。 最初は小文字 (-c) で、後ろは大文字 (-C) です。</description></item><item><title>SSH キーの管理: SSH キーのパスワードを変更する (ssh-keygen -p)</title><link>https://maku.blog/p/as2ahpw/</link><pubDate>Thu, 24 Nov 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/as2ahpw/</guid><description>既存の SSH キー（秘密鍵）のパスワード（パスフレーズ）を変更するには、ssh-keygen -p コマンドを使用します。
$ ssh-keygen -p [-a rounds] [-f keyfile] [-m format] [-N new_passphrase] [-P old_passphrase] 変更する SSH キーのファイルパス (-f) や、旧パスワード (-P)、新パスワード (-N) をオプションで指定することもできますが、次のようにオプションなしで実行すれば、対話的に変更内容を入力していけます。
$ ssh-keygen -p Enter file in which the key is (/Users/maku/.ssh/id_rsa): Enter old passphrase: ******** Key has comment &amp;#39;maku@macbook.local&amp;#39; Enter new passphrase (empty for no passphrase): ******** Enter same passphrase again: ******** Your identification has been saved with the new passphrase. パスワードはオプションで指定すると入力内容が見えてしまうので、上記のように対話的に入力した方がよいでしょう。</description></item><item><title>SSH キーの管理: SSH キーの種類やフィンガープリントを確認する (ssh-keygen -l)</title><link>https://maku.blog/p/m2k4j2h/</link><pubDate>Thu, 24 Nov 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/m2k4j2h/</guid><description>作成済みの SSH 鍵ファイルの種類（暗号アルゴリズム）やフィンガープリントを確認したいときは、ssh-keygen -l コマンドを使用します。 -f オプションで指定する鍵ファイルのパスは、秘密鍵でも公開鍵でも構いません。 次の例では、OpenSSH の ssh-keygen コマンドで作成したさまざまな種類の SSH キーの内容を表示しています。
$ ssh-keygen -l -f ~/.ssh/id_ed25519.pub 256 SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yourname@example.com (ED25519) $ ssh-keygen -l -f ~/.ssh/id_ecdsa.pub 256 SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yourname@example.com (ECDSA) $ ssh-keygen -l -f ~/.ssh/id_rsa.pub 2048 SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yourname@example.com (RSA) $ ssh-keygen -l -f ~/.ssh/id_dsa.pub 1024 SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yourname@example.com (DSA) 各フィールドは、「鍵のビット長」「フィンガープリント」「コメント」「暗号アルゴリズム」を示しています。
Windows PC の場合は、~/.ssh の部分は %USERPROFILE%\.ssh と読みかえてください。</description></item><item><title>Ansible で SSH サーバーをセキュアにする (ansible.builtin.lineinfile, ansible.builtin.service)</title><link>https://maku.blog/p/hufvdta/</link><pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/hufvdta/</guid><description>SSH サーバーを安全に運用するには、いくつかのベストプラクティスがあります。 ここでは、root ユーザーでの SSH 接続を拒否 (PermitRootLogin no) する設定例を紹介します。
secure-sshd.yaml (Playbook) --- - hosts: all gather_facts: false become: true tasks: - name: Prohibit root login ansible.builtin.lineinfile: path: /etc/ssh/sshd_config state: present regexp: &amp;#39;^PermitRootLogin &amp;#39; line: &amp;#39;PermitRootLogin no&amp;#39; notify: - Reload ssh daemon handlers: - name: Reload ssh daemon ansible.builtin.service: name: sshd state: reloaded この Ansible Playbook では、次のようなことを行っています。
lineinfile モジュールで /etc/ssh/sshd_config の内容を修正する PermitRootLogin で始まる行が見つからない場合は、ファイルの末尾に PermitRootLogin no を追加する PermitRootLogin で始まる行が見つかった場合は、PermitRootLogin no に置換する（ただし、最初からその設定が記述されていたら何もしない） service モジュール で SSH デーモンに設定をリロードさせる この設定を行うと、root ユーザーでの SSH 接続ができなくなるので注意してください。 必ず、root ユーザー以外で SSH 接続できることを確認してから実行してください。</description></item><item><title>SSH キーの管理: SSH の接続先ごとにキーを使い分ける (~/.ssh/config)</title><link>https://maku.blog/p/szajt4d/</link><pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/szajt4d/</guid><description>何をするか？ SSH 鍵を使って複数の SSH サーバーに接続する場合、1 つの SSH 鍵ファイルを使い回すこともできますが、場合によっては SSH サーバーごと（SSH ユーザーごと）に鍵ファイルを使い分けたいこともあるかもしれません。 ここでは、SSH サーバーごとの SSH キーを用意する方法を説明します。
鍵ファイルを作成する 例えば、ConoHa VPS に maku というユーザーで SSH 接続するための SSH キーを作成するとします。 一般的に SSH のキーペアは ~/.ssh ディレクトリ以下に保存しますが、次のような感じで接続先ごとにディレクトリ (&amp;lt;接続先&amp;gt;-&amp;lt;ユーザー&amp;gt;) を作ると管理しやすくなります（ファイル名で表現することもできます）。
~/.ssh/conoha-maku/id_rsa &amp;hellip; 秘密鍵 ~/.ssh/conoha-maku/id_rsa.pub &amp;hellip; 公開鍵 # SSH キーペア用のディレクトリを作成 $ mkdir -p -m 0700 ~/.ssh/conoha-maku # SSH キーペアを作成 $ ssh-keygen -t rsa -f ~/.ssh/conoha-maku/id_rsa 公開鍵を SSH サーバーに登録 SSH キーで SSH 接続するには、接続先の SSH サーバーの ~/.ssh/authorized_keys に公開鍵を登録しておく必要があります。 この作業は、ssh-copy-id コマンドを使うと簡単に済ませられます（参考: ssh-id-copy で SSH の公開鍵をリモートホストに登録する）。</description></item><item><title>SSH サーバー (sshd) の起動・停止・再起動方法まとめ</title><link>https://maku.blog/p/9gs3cmu/</link><pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/9gs3cmu/</guid><description>各 OS（ディストリビューション）で SSH サーバーを起動・停止するときのコマンドのまとめです。
Debian 系 (Ubuntu/Debian) Ubuntu 15.04 以降 $ sudo systemctl start ssh （起動） $ sudo systemctl stop ssh （停止） $ sudo systemctl restart ssh （再起動） $ sudo systemctl reload ssh （設定リロード） Ubuntu 14.10 以前 $ sudo service ssh start （起動） $ sudo service ssh stop （停止） $ sudo service ssh restart （再起動） $ sudo service ssh reload （設定リロード） ☝️ ssh でも sshd でも OK /lib/systemd/system/ssh.service ファイルに、エイリアスとして sshd.service が定義されています。 なので、上記コマンドの ssh の部分は sshd としても動作します。 サービス名のサフィックス (.</description></item><item><title>SSH サーバー (sshd) 設定のベストプラクティス</title><link>https://maku.blog/p/42cmu5d/</link><pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/42cmu5d/</guid><description>これは何？ SSH をできるだけ安全に使うための sshd（OpenSSH サーバー）の設定方法です。
sshd の設定は、/etc/ssh/sshd_config ファイルで行います。 sudo などで設定ファイルを編集後、sshd サービスにリロード要求することで反映できます。
典型的な sshd の設定変更手順 $ sudo vim /etc/ssh/sshd_config # エディタで設定を変更 $ sudo systemctl reload ssh # sshd を再起動 参考: SSH サーバー (sshd) の起動・停止・再起動方法まとめ sshd の再起動や設定のリロードを行っても、作業中の SSH 接続が切れることはありません。 設定変更後は、別のターミナルから接続できることを確認してから、作業用の SSH 接続をクローズするようにしましょう。
root ユーザーでの接続を拒否する (PermitRootLogin) PermitRootLogin を no に設定することで、このサーバーには root ユーザーで SSH 接続することができなくなります（ssh root@example.com できなくなる）。
/etc/ssh/sshd_config PermitRootLogin no 管理者権限での作業が必要な場合は、一般ユーザーでの接続後に sudo 実行することになります。 root ユーザーで直接 SSH 接続できるようになっていると、悪意のあるユーザーによるパスワード総当たり攻撃を許してしまうことになります。 後述の PasswordAuthentication 設定でパスワードによる認証を拒否している場合でも、root ユーザーでの直接接続は避けるべきです。 なぜなら、いきなり root ユーザーで接続してしまうと、実際に誰が root 接続して作業したのかをログから判別できなくなってしまうからです。 一般ユーザーでログインして sudo することを強制しておけば、誰が管理者権限でコマンド実行したのかをログから確認することができます (sudo grep COMMAND /var/log/auth.</description></item><item><title>SSH キーの管理: ssh-id-copy で SSH の公開鍵をリモートホストに登録する</title><link>https://maku.blog/p/2mzbmw8/</link><pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2mzbmw8/</guid><description>ssh-id-copy とは SSH で公開鍵認証方式を使ってリモートホストに接続するには、リモートホスト側の ~/.ssh/authorized_keys ファイルに公開鍵を書き込んでおく必要がありますが、ssh-copy-id コマンドを使うと、この作業を一撃で済ますことができます。 ssh-copy-id コマンドは Linux 環境であれば標準でインストールされているはずです。
前提条件として、接続先ホストにパスワード認証で SSH 接続できる状態 にしておく必要があります。 公開鍵の内容をコピーする段階では、まだ SSH キーを使った接続ができないからです。 例えば、次のような感じで、接続先ホストに登録されている「ユーザー名」と「ユーザーパスワード」のペアで接続できるようになっていれば OK です。
パスワード認証で接続できるか確認 $ ssh maku@192.168.1.20 maku@192.168.1.20&amp;#39;s password: （接続先ホストのユーザー maku のパスワードを入力） 本記事の作業が完了すれば、SSH 接続時に「ユーザーパスワード」を送信する必要はなくなり、代わりに「SSH 秘密鍵」を使って接続できるようになります。 SSH 秘密鍵のパスフレーズを入力する必要があるかもしれませんが、このパスフレーズがネットワーク上に流れることはないので安全です。
（必要があれば）鍵ファイルの作成 (ssh-keygen) 接続元のマシンに次のような秘密鍵＆公開鍵のペアが存在しないときは、ssh-keygen コマンドなどで作成しておきます。
~/.ssh/id_rsa &amp;hellip; 秘密鍵 ~/.ssh/id_rsa.pub &amp;hellip; 公開鍵（これをリモートホストに登録します） 秘密鍵と公開鍵を生成する $ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/Users/maku/.ssh/id_rsa): （このパスでよければ Enter） Enter passphrase (empty for no passphrase): （鍵のパスワードを入力） Enter same passphrase again: （パスワードを再入力） Your identification has been saved in /Users/maku/.</description></item></channel></rss>