<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SSH on まくろぐ</title><link>https://maku.blog/tags/ssh/</link><description>Recent content in SSH on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sat, 06 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/ssh/index.xml" rel="self" type="application/rss+xml"/><item><title>Ansible で SSH サーバーをセキュアにする (ansible.builtin.lineinfile, ansible.builtin.service)</title><link>https://maku.blog/p/hufvdta/</link><pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/hufvdta/</guid><description>SSH サーバーを安全に運用するには、いくつかのベストプラクティスがあります。 ここでは、root ユーザーでの SSH 接続を拒否 (PermitRootLogin no) する設定例を紹介します。
secure-sshd.yaml (Playbook) ---- hosts:allgather_facts:falsebecome:truetasks:- name:prohibit root loginansible.builtin.lineinfile:path:/etc/ssh/sshd_configstate:presentregexp:&amp;#39;^PermitRootLogin &amp;#39;line:&amp;#39;PermitRootLogin no&amp;#39;notify:- reload ssh daemonhandlers:- name:reload ssh daemonansible.builtin.service:name:sshdstate:reloaded この Ansible Playbook では、次のようなことを行っています。
lineinfile モジュールで /etc/ssh/sshd_config の内容を修正する PermitRootLogin で始まる行が見つからない場合は、ファイルの末尾に PermitRootLogin no を追加する PermitRootLogin で始まる行が見つかった場合は、PermitRootLogin no に置換する（ただし、最初からその設定が記述されていたら何もしない） service モジュール で SSH デーモンに設定をリロードさせる この設定を行うと、root ユーザーでの SSH 接続ができなくなるので注意してください。 必ず、root ユーザー以外で SSH 接続できることを確認してから実行してください。</description></item><item><title>SSH の接続先ごとにキーを使い分ける</title><link>https://maku.blog/p/szajt4d/</link><pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/szajt4d/</guid><description>何をするか？ SSH 鍵を使って複数の SSH サーバーに接続する場合、1 つの SSH 鍵ファイルを使い回すこともできますが、場合によっては SSH サーバーごと（SSH ユーザーごと）に鍵ファイルを使い分けたいこともあるかもしれません。 ここでは、SSH サーバーごとの SSH キーを用意する方法を説明します。
鍵ファイルを作成する 例えば、ConoHa VPS に maku というユーザーで SSH 接続するための SSH キーを作成するとします。 一般的に SSH のキーペアは ~/.ssh ディレクトリ以下に保存しますが、次のような感じで接続先ごとにディレクトリ (&amp;lt;接続先&amp;gt;-&amp;lt;ユーザー&amp;gt;) を作ると管理しやすくなります（ファイル名で表現することもできます）。
~/.ssh/conoha-maku/id_rsa &amp;hellip; 秘密鍵 ~/.ssh/conoha-maku/id_rsa.pub &amp;hellip; 公開鍵 # SSH キーペア用のディレクトリを作成 $ mkdir -p -m 0700 ~/.ssh/conoha-maku # SSH キーペアを作成 $ ssh-keygen -t rsa -f ~/.ssh/conoha-maku/id_rsa 公開鍵を SSH サーバーに登録 SSH キーで SSH 接続するには、接続先の SSH サーバーの ~/.ssh/authorized_keys に公開鍵を登録しておく必要があります。 この作業は、ssh-copy-id コマンドを使うと簡単に済ませられます（参考: ssh-id-copy で SSH の公開鍵をリモートホストに登録する）。</description></item><item><title>SSH サーバー (sshd) の起動・停止・再起動方法まとめ</title><link>https://maku.blog/p/9gs3cmu/</link><pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/9gs3cmu/</guid><description>Debian 系 (Ubuntu/Debian) Ubuntu 15.04 以降 $ sudo systemctl start ssh （起動） $ sudo systemctl stop ssh （停止） $ sudo systemctl restart ssh （再起動） $ sudo systemctl reload ssh （設定リロード） Ubuntu 14.10 以前 $ sudo service ssh start （起動） $ sudo service ssh stop （停止） $ sudo service ssh restart （再起動） $ sudo service ssh reload （設定リロード） ☝️ ssh でも sshd でも OK /lib/systemd/system/ssh.service ファイルに、エイリアスとして sshd.service が定義されています。 なので、上記コマンドの ssh の部分は sshd としても動作します。 サービス名のサフィックス (.</description></item><item><title>SSH サーバー (sshd) 設定のベストプラクティス</title><link>https://maku.blog/p/42cmu5d/</link><pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/42cmu5d/</guid><description>これは何？ SSH をできるだけ安全に使うための sshd（OpenSSH サーバー）の設定方法です。
sshd の設定は、/etc/ssh/sshd_config ファイルで行います。 sudo などで設定ファイルを編集後、sshd サービスにリロード要求することで反映できます。
典型的な sshd の設定変更手順 $ sudo vim /etc/ssh/sshd_config # エディタで設定を変更 $ sudo systemctl reload ssh # sshd を再起動 参考: SSH サーバー (sshd) の起動・停止・再起動方法まとめ sshd の再起動や設定のリロードを行っても、作業中の SSH 接続が切れることはありません。 設定変更後は、別のターミナルから接続できることを確認してから、作業用の SSH 接続をクローズするようにしましょう。
root ユーザーでの接続を拒否する (PermitRootLogin) PermitRootLogin を no に設定することで、このサーバーには root ユーザーで SSH 接続することができなくなります（ssh root@example.com できなくなる）。
/etc/ssh/sshd_config PermitRootLogin no 管理者権限での作業が必要な場合は、一般ユーザーでの接続後に sudo 実行することになります。 root ユーザーで直接 SSH 接続できるようになっていると、悪意のあるユーザーによるパスワード総当たり攻撃を許してしまうことになります。 後述の PasswordAuthentication 設定でパスワードによる認証を拒否している場合でも、root ユーザーでの直接接続は避けるべきです。 なぜなら、いきなり root ユーザーで接続してしまうと、実際に誰が root 接続して作業したのかをログから判別できなくなってしまうからです。 一般ユーザーでログインして sudo することを強制しておけば、誰が管理者権限でコマンド実行したのかをログから確認することができます (sudo grep COMMAND /var/log/auth.</description></item><item><title>ssh-id-copy で SSH の公開鍵をリモートホストに登録する</title><link>https://maku.blog/p/2mzbmw8/</link><pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2mzbmw8/</guid><description>ssh-id-copy とは SSH で公開鍵認証方式を使ってリモートホストに接続するには、リモートホスト側の ~/.ssh/authorized_keys ファイルに公開鍵を書き込んでおく必要がありますが、ssh-copy-id コマンドを使うと、この作業を一撃で済ますことができます。 ssh-copy-id コマンドは Linux 環境であれば標準でインストールされているはずです。
前提条件として、パスワード認証で SSH 接続できる状態にはしておく必要があります。
（必要があれば）鍵ファイルの作成 (ssh-keygen) 接続元のマシンに次のような秘密鍵＆公開鍵のペアが存在しないときは、ssh-keygen コマンドなどで作成しておきます。
~/.ssh/id_rsa &amp;hellip; 秘密鍵 ~/.ssh/id_rsa.pub &amp;hellip; 公開鍵（これをリモートホストに登録します） 秘密鍵と公開鍵を生成する $ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/Users/maku/.ssh/id_rsa): （このパスでよければ Enter） Enter passphrase (empty for no passphrase): （鍵のパスワードを入力） Enter same passphrase again: （パスワードを再入力） Your identification has been saved in /Users/maku/.ssh/id_rsa. Your public key has been saved in /Users/maku/.</description></item></channel></rss>