<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SVG on まくろぐ</title><link>https://maku.blog/tags/svg/</link><description>Recent content in SVG on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 25 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/svg/index.xml" rel="self" type="application/rss+xml"/><item><title>D3.js による SVG 描画の基本</title><link>https://maku.blog/p/v38nmhw/</link><pubDate>Tue, 08 Aug 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/v38nmhw/</guid><description>D3.js は、クライアントサイド JavaScript で SVG 描画を行うためのライブラリです。 素の JavaScript（バニラ JavaScript) だけでも svg 要素を動的に構築していくことはできますが、D3.js を使うことでよりシンプルな API を使って描画処理を記述することができます。 ここでは、D3.js で基礎的な SVG 描画を行う方法を紹介します。
矩形を 1 つ描く D3.js で矩形を描画するには、d3.select() で svg 要素を選択し（D3 セレクションオブジェクトを取得）、そこに append() メソッドで rect 要素を追加します。 そして、メソッドチェーンさせる形で attr() を呼び出し、rect の属性（サイズや色）を設定していきます。
次の例では、svg 要素に緑色の矩形を 1 つ追加しています。 rect 要素の塗り潰し色は fill 属性で指定することに注意してください（CSS の &amp;ldquo;background&amp;rdquo; プロパティとは名前が異なります）。
図: 矩形の表示 &amp;lt;svg id=&amp;#34;mysvg&amp;#34; width=&amp;#34;200&amp;#34; height=&amp;#34;100&amp;#34; /&amp;gt; &amp;lt;script&amp;gt; d3.select(&amp;#34;#mysvg&amp;#34;) // svg 要素を選択 .append(&amp;#34;rect&amp;#34;) // svg 内に rect 要素を追加 .attr(&amp;#34;x&amp;#34;, 10) // rect 要素の属性値を設定 .</description></item><item><title>SVG の marker 要素で矢印（マーカー）を描画する</title><link>https://maku.blog/p/hoiytvm/</link><pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/hoiytvm/</guid><description>SVG の marker 要素を使うと、line 要素などの線の先端に表示するマーカー形状を定義することができます。 多くの場合、矢印を表す三角形を使いますが、丸や四角など、任意の形状のマーカーを定義できます。
marker による矢印描画の基本 実装例 次の例では、line 要素の先端に marker で定義した三角形を割り当てています。 マーカー形状を分かりやすくするために、半透明の赤色で表示しています（通常は line の色と合わせます）。
図: marker 要素による矢印の描画 svg のコード &amp;lt;svg width=&amp;#34;480&amp;#34; height=&amp;#34;140&amp;#34; viewBox=&amp;#34;0 0 240 70&amp;#34; xmlns=&amp;#34;http://www.w3.org/2000/svg&amp;#34; style=&amp;#34;border: thin solid gray&amp;#34;&amp;gt; &amp;lt;!-- marker で矢印の形を定義する --&amp;gt; &amp;lt;defs&amp;gt; &amp;lt;marker id=&amp;#34;arrow&amp;#34; viewBox=&amp;#34;0 0 10 10&amp;#34; refX=&amp;#34;5&amp;#34; refY=&amp;#34;5&amp;#34; markerWidth=&amp;#34;16&amp;#34; markerHeight=&amp;#34;16&amp;#34; orient=&amp;#34;auto-start-reverse&amp;#34;&amp;gt; &amp;lt;path d=&amp;#34;M0,0 L10,5 L0,10 Z&amp;#34; fill=&amp;#34;red&amp;#34; opacity=&amp;#34;0.5&amp;#34; /&amp;gt; &amp;lt;/marker&amp;gt; &amp;lt;/defs&amp;gt; &amp;lt;!-- marker を割り当てる --&amp;gt; &amp;lt;line x1=&amp;#34;20&amp;#34; y1=&amp;#34;20&amp;#34; x2=&amp;#34;100&amp;#34; y2=&amp;#34;20&amp;#34; stroke=&amp;#34;green&amp;#34; stroke-width=&amp;#34;1&amp;#34; marker-end=&amp;#34;url(#arrow)&amp;#34; /&amp;gt; &amp;lt;line x1=&amp;#34;80&amp;#34; y1=&amp;#34;50&amp;#34; x2=&amp;#34;160&amp;#34; y2=&amp;#34;20&amp;#34; stroke=&amp;#34;red&amp;#34; stroke-width=&amp;#34;1&amp;#34; marker-start=&amp;#34;url(#arrow)&amp;#34; marker-end=&amp;#34;url(#arrow)&amp;#34; /&amp;gt; &amp;lt;line x1=&amp;#34;140&amp;#34; y1=&amp;#34;50&amp;#34; x2=&amp;#34;220&amp;#34; y2=&amp;#34;50&amp;#34; stroke=&amp;#34;blue&amp;#34; stroke-width=&amp;#34;1&amp;#34; marker-start=&amp;#34;url(#arrow)&amp;#34; /&amp;gt; &amp;lt;/svg&amp;gt; 解説 marker で矢印の形を定義する &amp;lt;defs&amp;gt; &amp;lt;marker id=&amp;#34;arrow&amp;#34; viewBox=&amp;#34;0 0 10 10&amp;#34; refX=&amp;#34;5&amp;#34; refY=&amp;#34;5&amp;#34; markerWidth=&amp;#34;16&amp;#34; markerHeight=&amp;#34;16&amp;#34; orient=&amp;#34;auto-start-reverse&amp;#34;&amp;gt; &amp;lt;path d=&amp;#34;M0,0 L10,5 L0,10 Z&amp;#34; fill=&amp;#34;red&amp;#34; opacity=&amp;#34;0.</description></item><item><title>SVG の path 要素によるベジェ曲線の描画例</title><link>https://maku.blog/p/ka6xumg/</link><pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ka6xumg/</guid><description>svg の path 要素を使用すると、直線と曲線を組み合わせて多様な図形を描画できます。 図形の形状は、path 要素の d 属性に一連のコマンドを指定することで定義されます。 しかし、ベジェ曲線の制御点をどのように指定すれば、どのような曲線が描かれるのかが直感的に理解しにくいことがあります。 ここではさまざまな曲線の描画例を紹介します。
C / S コマンドによる 3 次ベジェ曲線 C コマンド は、2 つの制御点と終点を指定することで、始点（現在座標）と終点を曲線で繋ぎます。 path の d 属性の内容は、M始点 C制御点1 制御点2 終点 のような形で指定することになります。
(0, 0) (5, 70) (95, 70) (100, 0) 始点 制御点1 制御点2 終点 &amp;lt;path d="M0,0 C5,70 95,70 100,0" stroke="black" stroke-width="2" fill="none" /> (0, 50) (50, 150) (50, -50) (100, 50) 始点 制御点1 制御点2 終点 &amp;lt;path d="M0,50 C50,150 50,-50 100,50" stroke="black" stroke-width="2" fill="none"/> C コマンドによる 3 次ベジェ曲線に続けて次の曲線を描く場合、S コマンド を使用すると 1 つ目の制御点を省略してなめらかに繋ぐことができます。 この場合、先行する曲線の 2 つ目の制御点の反対側に 1 つ目の制御点を指定したのと同様に振る舞います。 S コマンドの引数としては、2 つの座標値を S制御点2 終点 の形で渡します（C コマンドと異なり、制御点 1 の座標値を省略します）。</description></item><item><title>SVG の viewBox の使い方とレスポンシブ対応</title><link>https://maku.blog/p/563uibg/</link><pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/563uibg/</guid><description>svg 要素の viewBox 属性について svg 要素内の各描画要素に設定する座標値のデフォルト単位はピクセル (px) ですが、上位の svg 要素に viewBox 属性が設定されている場合は、その論理的な座標系（ユーザー座標系）の座標値を指定することになります。 例えば、次のように viewBox を設定すると、画面上での svg 要素の表示サイズは 800px x 600px となりますが、svg 要素内に配置する各描画要素 (rect など）は、40x30 という仮想的なサイズの中で座標指定することになります。
viewBox の指定 &amp;lt;svg width=&amp;#34;800&amp;#34; height=&amp;#34;600&amp;#34; viewBox=&amp;#34;0 0 40 30&amp;#34;&amp;gt; viewBox 属性を指定してある場合は、width 属性と height 属性の一方を省略して記述できるようになります。 その場合は、viewBox のアスペクト比を考慮した width あるいは height が自動的に設定されます。 よって、上記の svg タグは次のように省略して記述することが可能です。
height の省略 &amp;lt;svg width=&amp;#34;800&amp;#34; viewBox=&amp;#34;0 0 40 30&amp;#34;&amp;gt; 下記の例では 1 つの rect 要素を配置していますが、これは svg 要素の左上 4 分の 1 を占める矩形を描画します。
&amp;lt;svg width=&amp;#34;200&amp;#34; viewBox=&amp;#34;0 0 40 20&amp;#34;&amp;gt; &amp;lt;rect x=&amp;#34;0&amp;#34; y=&amp;#34;0&amp;#34; width=&amp;#34;20&amp;#34; height=&amp;#34;10&amp;#34; fill=&amp;#34;steelblue&amp;#34; /&amp;gt; &amp;lt;/svg&amp;gt; 表示例 svg 要素のレスポンシブ対応 svg 要素も img 要素と同様に、CSS で max-width: 100%; と指定しておけば、横幅が足りなくなった場合に縮小して表示することができます。</description></item><item><title>SVG の g 要素の使い方</title><link>https://maku.blog/p/rx9hdei/</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/rx9hdei/</guid><description>SVG の g 要素は、子要素をグループ化して操作を行うための要素です。 ここでは、g 要素をどのような用途で利用できるのかをまとめておきます。
子要素に共通のスタイル（色、太さなど）をセットする &amp;lt;svg width=&amp;#34;195&amp;#34; height=&amp;#34;60&amp;#34; style=&amp;#34;border: solid 1px gray;&amp;#34;&amp;gt; &amp;lt;g fill=&amp;#34;#cef&amp;#34; stroke=&amp;#34;blue&amp;#34; stroke-width=&amp;#34;1.5&amp;#34;&amp;gt; &amp;lt;rect x=&amp;#34;15&amp;#34; y=&amp;#34;15&amp;#34; width=&amp;#34;30&amp;#34; height=&amp;#34;30&amp;#34; /&amp;gt; &amp;lt;circle cx=&amp;#34;75&amp;#34; cy=&amp;#34;30&amp;#34; r=&amp;#34;15&amp;#34; /&amp;gt; &amp;lt;/g&amp;gt; &amp;lt;g fill=&amp;#34;#ffc&amp;#34; stroke=&amp;#34;darkorange&amp;#34; stroke-width=&amp;#34;1.5&amp;#34;&amp;gt; &amp;lt;rect x=&amp;#34;105&amp;#34; y=&amp;#34;15&amp;#34; width=&amp;#34;30&amp;#34; height=&amp;#34;30&amp;#34; /&amp;gt; &amp;lt;circle cx=&amp;#34;165&amp;#34; cy=&amp;#34;30&amp;#34; r=&amp;#34;15&amp;#34; /&amp;gt; &amp;lt;/g&amp;gt; &amp;lt;/svg&amp;gt; この例では、2 つの g 要素の下に、rect と circle を 1 つずつ配置しています。 それらの塗りつぶし色 (fill) や枠線の色 (stroke) は、親の g 要素にセットしたものが使用されます。
多数の描画要素に同じスタイルを割り当てたいときは、g 要素でまとめてスタイル設定すると効率がよいです。
子要素の座標をまとめて移動する (transform) Hello! &amp;lt;svg width=&amp;#34;180&amp;#34; height=&amp;#34;60&amp;#34; style=&amp;#34;border: thin solid gray;&amp;#34;&amp;gt; &amp;lt;g transform=&amp;#34;translate(50 30)&amp;#34;&amp;gt; &amp;lt;circle cx=&amp;#34;0&amp;#34; cy=&amp;#34;0&amp;#34; r=&amp;#34;10&amp;#34; fill=&amp;#34;red&amp;#34; /&amp;gt; &amp;lt;text x=&amp;#34;15&amp;#34; y=&amp;#34;2&amp;#34; dominant-baseline=&amp;#34;middle&amp;#34; font-size=&amp;#34;20&amp;#34; font-weight=&amp;#34;800&amp;#34; fill=&amp;#34;blue&amp;#34;&amp;gt; Hello!</description></item><item><title>SVG チートシート</title><link>https://maku.blog/p/kq6gwfn/</link><pubDate>Sat, 09 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/kq6gwfn/</guid><description>svg 要素内に配置できる描画要素のまとめです。 座標値のデフォルトの単位はピクセル (px) ですが、svg 要素に viewBox が設定されている場合は viewBox 内の座標系で座標値を指定します。
text 要素（テキスト） text 要素の例 &amp;lt;text x=&amp;#34;20&amp;#34; y=&amp;#34;55&amp;#34; font-size=&amp;#34;20&amp;#34; fill=&amp;#34;red&amp;#34;&amp;gt; 表示するテキスト &amp;lt;/text&amp;gt; 表示するテキスト 属性 説明 設定例 x テキストアンカーポイントの X 座標 100, 50% y テキストアンカーポイントの Y 座標 100, 50% text-anchor 水平方向のアンカーポイント * start &amp;hellip; テキスト先頭（ltr 言語なら左端）
* middle &amp;hellip; 中央* end &amp;hellip; テキスト末尾（ltr 言語なら右端） dominant-baseline 垂直方向のベースライン * auto &amp;hellip; 通常は下端* middle &amp;hellip; 中央* hanging &amp;hellip; 通常は上端 font-size フォントサイズ 30 font-weight 文字の太さ 600 fill テキスト内部の色 red, rgb(255, 0, 0),rgba(255, 0, 0, 0.</description></item></channel></rss>