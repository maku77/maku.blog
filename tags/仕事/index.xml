<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>仕事 on まくろぐ</title><link>https://maku.blog/tags/%E4%BB%95%E4%BA%8B/</link><description>Recent content in 仕事 on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Fri, 12 Jan 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/%E4%BB%95%E4%BA%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>マネージメントに関して</title><link>https://maku.blog/p/29ss6t4/</link><pubDate>Fri, 12 Jan 2018 00:00:00 +0000</pubDate><guid>https://maku.blog/p/29ss6t4/</guid><description>マネージャーとマネジメントについて P.F.ドラッカー『マネジメント エッセンシャル版』より
変化の時こそ「基本」を確認。基本と原則に反するものは例外なく破たんする。 働く者が満足しても、仕事が生産的に行われなければ失敗である。仕事が生産的に行われても、人が生き生きと働けなければ失敗である。 マネージャーは権力を持たない。責任を持つだけである。その責任を果たすために権限を必要とする。 マネージャーの役割 投入した資源の総和より大きなものを生み出す生産性を創造すること。 あらゆる決定と行動において、直ちに必要とされているものと遠い将来に必要とされているものを調和させていくこと。 マネージャーの仕事 目標設定 組織化 動機付けとコミュニケーション 評価測定 人材開発 マネージャーにしてはいけない人 強みより弱みに目を向ける人 何が正しいかよりも誰が正しいかを重視する人 真摯さよりも頭のよさを重視する人 部下に脅威を感じさせる人 自らの仕事に高い基準を設定しない人 課題解決のステップ 現状把握: あるべき姿とのギャップを把握 目標設定: 何をいつまでに達成するか 原因分析: あるべき姿とのギャップの原因を明らかにする 仮説構築: 原因に対する仮設を立てる 計画 アクション ハックマントオールダムの職務特性モデル (Job Characteristics Model) ハックマンらは、職務への満足度を高め、動機付けに結びつく職務の特性を次の５つに分類しています。
Skill Variety（スキルの多様性） Task Identity（完結性） まとまりのあるタスクであること（全体のどの部分を担当しているのか分からないと不安になってしまうため） Significance（重要性） Autonomy（自律性） Feedback（フィードバック）</description></item><item><title>2017-07-07 多くの人に動いてもらうにはインセンティブを与える</title><link>https://maku.blog/p/in9us4k/</link><pubDate>Fri, 07 Jul 2017 00:00:00 +0000</pubDate><guid>https://maku.blog/p/in9us4k/</guid><description>大きな組織で働いていると、ときには何百人もの人を対象に指示・お願いをしなければいけないことがあります。
そういったときに、皆に確実に動いてもらうためには、何らかのインセンティブを与えるのが効果的です。例えば、ある作業をお願いする場合、
７月７日までに必ず完了するようにしてください と指示するだけでは多くの人に動いてもらうことはできません（３割くらいは動いてくれるかもしれません）。その後、進捗が思わしくないときには、次のような催促のメールを送りたくなるかもしれません。
期日までに終わらない場合は、定例ミーティングでその理由を報告してください このような指示は、動いてくれなかった人に罰則を与えているだけで、もともと達成したかった「期日までに終わらせる」という本質的な目的からずれてしまっています。 もちろん、罰則やルールで縛ることによって、人はある程度動いてくれるようになります。 しかし、同じ組織の仲間たちに罰則を与え、作業を強制させるというやり方はあまり気持ちのよいものではありません。
こんなときは、作業を進めることによって、何らかのメリットを得られるというインセンティブを与えられないかを考慮するとよいです。 例えば、
先に作業を完了したメンバから優先的に ～ を利用して構いません とか、
７月７日までに到着したデータは、こちらでまとめて登録します など、作業を早く終わらせることによって得られるメリットをいっしょに提示してあげると、皆のモチベーションは確実に上がります。 いっしょに提示するメリットが思いつかないという場合は、私がいつも使っている裏技があります。それは、「罰則を反対向きに提示してインセンティブとする」という方法です。例えば、
登録が７月７日に間に合わなかった場合は、登録後に全メンバに内容を報告してください という罰則がある場合、最初から次のようにお願いするのです。
登録後は全メンバに内容を報告してください。ただし、７月７日までに登録していただいた分に関しては、報告を免除します この２つ、実はお願いしていることはまったく同じです。 でも、ちょっと視点を変えてお願いするだけで、人を動かせるかどうかが変わってきます。</description></item><item><title>2017-06-30 企業の成長には A/B テストの考え方が必要</title><link>https://maku.blog/p/7girbw9/</link><pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate><guid>https://maku.blog/p/7girbw9/</guid><description>ソフトウェア開発の世界では、A/B テストという改善手法が主流になってきています。 複数のデザインのアプリケーションをランダムに配信することで、どちらの方が効果が高いかを実際の顧客行動から導き出すというもの。
オバマさんの選挙キャンペーンでは、寄付金サイトの改善を A/B テストで繰り返すことによって、最終的に寄付金のコンバージョンレートを 49 ％向上させたらしいです（ようするに、失敗しない方法で、どんどん寄付する人してくれる人を増やし、最大限に寄付金を集めることができたということ）。
これって、考え方自体は普通のビジネスで昔からやっていることと同じですよね。どの改善案がお客様にとって受け入れられるのか、より利益を出すことができるのかを考えて実行していく。事業を大きくしていくというのは、このように改善方法を考えて、繰り返し適用していくことなので。
ソフトウェアの世界では、このような改善がよりシステマチックにできるようになってきたというだけのこと。顧客がどういった経路で商品の購入に至ったのか、どのあたりの情報を時間をかけて読んでいるのか、といった生の顧客データをリアルタイムに取得することができるので、本当に効果的な改善かどうかを確認したうえで大規模に展開していける。
一か八かでサービスをリニューアルする、という手法では企業は生き残れなくなってきています。顧客の購買行動などをダイレクトに改善につなげる A/B テストの考え方が必要。こういった効果的な改善を続けて行っている企業は強いです。A/B テストで明確な指標を設定して事業展開している企業は、戦略的撤退も迅速かつ的確です。
野口竜司さんの「A/B テストの教科書」は、A/B テストの考え方や進め方が体系的にまとまっていてわかりやすいですね。
パッと見では、主に Web サイトの改善にフォーカスしているように見えますが、A/B テストの思想的な部分もわかりやすく説明されているので、何らかの「改善活動」を行おうと思っている人には参考になると思います。
軽くポイントをメモしておきます。
A/B テストによる改善は、大体こんな流れで進めていきます。
(1) 課題の発見と管理 まずは、改善すべき個所（課題）を見つけるための調査を行います。アクセス解析データや、ユーザビリティテスト、アンケートなどで調査します。ここで、「大きな課題」を見つけられば、A/B テストによる改善のポテンシャル（リターン）も大きくなります。
「課題・仮説シート」の作成: 調査データとそこから導き出される課題を記入していきます。A/B テストによる改善は、継続的に行っていくものなので、課題はリスト化して管理しておきます。 「KPI マップ」の作成: 実際のアクセス解析データから KPI マップを作ると、テストのゴール設定（改善したい指標）や、改善効果の確認がやりやすくなります。ユーザがどの場所で離脱しているのか、ある経路の購入率はいくつかなどを一目で分かるようにフローチャートなどで図示します。KPI マップは月単位くらいで更新するのが理想です。KPI マップを利用して、重要視する指標（改善したい指標）を絞り込み、テストのターゲット（ゴール）とします。 (2) テスト計画と具体案の作成（改善仮説の設定） テスト計画では、今回改善対象とする箇所を決めていきます。
テストする場所の決定: 課題リストや KPI マップをもとに、どこをテストするのかを決定します。 テスト KPI の設定: KPI マップなどをもとにして、テストによって改善すべき「テスト KPI」を設定します。１つの最重要指標（購入完了率など）といくつかのサブ指標を設定し、効果を定量的に測れるようにします。 テスト仮説（案）の作成: どうすれば改善できるのかを「テスト仮説（案）」として洗い出していきます。テスト仮説がたくさんある場合は、最重要指標をルートとする「仮説ツリー」を作り、グルーピングします。 テスト様式の決定: どんな種類のテストを行うのか決めます。テストにかかる工数や期間に影響します。 テストロードマップの決定: どの時期に、どれくらいテストを行うのか決めます。 大枠のテスト計画が決まったら、具体的なテスト案（異なる表示パターンなど）を作成します。テストを繰り返すことを前提にし、「次のラウンドのテスト案」も作成しておくのが改善をスムーズに進めるコツです。
ワイヤーフレームの作成: テスト案と、どのような構成にするかのワイヤフレームを作成します。 クリエイティブの作成: A/B テスト用の、具体的なデザイン、コピーなどを作成します。ここで作成するものをクリエイティブと呼び、A/B テストではこのクリエイティブを切り替えてテストを行います。どの変更がどのような影響を与えるかを明確にするため、「１つのバリエーションで１つの仮説」だけを対象とするように注意して作成します。用意するクリエイティブのバリエーション数は、テストごとに３～５種類くらいが平均的です（A と B の２種類じゃないよ）。 スクリプトの作成: テストパターンにおいて JavaScript などで動的な制御が必要な場合は、クリエイティブの作成と同様にここで作成します。 (3) A/B テストツールの組み込みと実行 タグの設定: Web サイトであれば、A/B テストツールが発行するタグをページ内に組み込んで、アクセスを追跡できるようにします。独自形式のアプリケーションであれば、アクセスを追跡するための独自の仕組みが必要になるかもしれません。 テストパターン組み込み: テスト用に複数用意したクリエイティブを組み込み、A/B テストツールを利用して、ランダムにアクセスが発生するように設定します。独自形式のアプリケーションであれば、クリエイティブの切り替え処理のための独自の仕組みが必要になるかもしれません。 計測設定: A/B テストツールでは、ゴール設定を行うことで、成果を自動計測できます（例えば、購入完了のページをゴールとする）。 配信設定: 配信対象のユーザや端末を設定します。 動作検証: 本番環境でのテストの前に、正しく動作するかの検証を行います。 テスト開始: 本番環境でテストを開始し、モニタリングを行います。 (4) 結果分析と本番環境への反映 テスト結果の分析: テスト結果のデータを取得し、その原因を分析します。セグメント別の解析や、Google Analytics などによる解析結果を利用し、分析結果のサマリー文書を作成します。 本番環境への反映: テストで改善効果の高かったパターンを、本番サイトに適用します。 次のテスト立案: 分析結果のサマリーをもとに、次ラウンドのテスト計画へ進みます。</description></item><item><title>2017-06-29 情報収集の前に意思決定プロセスを決める</title><link>https://maku.blog/p/xcvvkie/</link><pubDate>Thu, 29 Jun 2017 00:00:00 +0000</pubDate><guid>https://maku.blog/p/xcvvkie/</guid><description>ちきりんさんの「自分のアタマで考えよう」より。
意思決定プロセスが明確になる前に、やみくもに情報収集を始めても、時間ばかりがすぎて何も決まらないという指摘。ふわっとしたプロジェクトではありがちな話でドキッとしました。
意思決定の判断基準が明確になっていれば、そのために必要な情報だけを集中して集めればよいので、無駄に情報収集に時間をかけてしまうのを防ぐことができます。情報の探しやすさも上がるでしょう。
情報収集という作業自体は、何のために情報を集めているのかが何となく分かっていれば始められてしまいます。でもそれだと、どれだけ情報を集めればよいか明確ではなくて、延々と情報収集に嵌ってしまう。そうではなく、意思決定プロセスがこうなっているから、その決定のために必要なこんな情報を集める、とちゃんと意識するようにすれば仕事の効率は上がりそうです。</description></item><item><title>プロダクトバックログとスプリントバックログの概念図</title><link>https://maku.blog/p/pwpgu5h/</link><pubDate>Tue, 22 Oct 2013 00:00:00 +0000</pubDate><guid>https://maku.blog/p/pwpgu5h/</guid><description> 図: プロダクトバックログ</description></item><item><title>業務プロセスの表記法 (BPMN)</title><link>https://maku.blog/p/47ogzwo/</link><pubDate>Mon, 22 Apr 2013 00:00:00 +0000</pubDate><guid>https://maku.blog/p/47ogzwo/</guid><description>BPMN (Business Process Modeling Notation) の概要 BPMN.org - http://www.bpmn.org/ アメリカの非営利団体である BPMI (Business Process Management Initiative) が策定。 BPM (Business Process Management) を進める際の標準記述言語。 BPMN は、業務フローを図にするときの表記法を定義しています。業務フローの図って、誰が描いても大体同じような感じになるものだけど、表記法の標準があるのであれば、それを使うのがよいですね。
大まかには、以下のような記号を使って描いていきます。
丸 -- イベントの発生、終了 四角 -- タスク 菱形 -- 分岐 矢印（実線） -- シーケンスのフロー 矢印（点線） -- データのフロー それぞれのタスクを担当する組織などを表現したい場合は、全体のフローを短冊状に区切って表現すれば OK。これも一応、Swimlane という記法として定義されてます。
参考サイト: 情報システム用語事典：BPMN（びーぴーえむえぬ） - ITmedia エンタープライズ</description></item><item><title>ソフトウェアテストに関するリンク</title><link>https://maku.blog/p/6f8k3ns/</link><pubDate>Mon, 25 Mar 2013 00:00:00 +0000</pubDate><guid>https://maku.blog/p/6f8k3ns/</guid><description> ソフトウェアテスト標準用語集 2012-04-01 時点で Version 2.1</description></item><item><title>特許の読み方（請求項に関して）</title><link>https://maku.blog/p/q7abhn6/</link><pubDate>Tue, 02 May 2006 00:00:00 +0000</pubDate><guid>https://maku.blog/p/q7abhn6/</guid><description>特許として有効な範囲は「請求項」に挙げられているもの。 「請求項」は1個のこともあれば、200個のこともある。
請求項が複数ある場合は、請求項1が一番抽象的（全体を包含したもの）になっており、他の請求項はそれを掘り下げるものになっている。 言い換えると、それぞれの請求項はツリー構造のような関係になっている。 親の請求項を掘り下げているものは、文末に「〜請求3に記載の〜」のように記述されることが多い。
請求項の階層の上位のものが特許として認められれば、その有効範囲は広くなる。 逆に部分的に認められれば、有効範囲は狭くなる。
請求項は重要だが、その後ろにある「説明」の章を読んだ方が全体の内容、要点（課題、手段）は分かりやすい。 まずは説明の最初の方を読んで、この特許が何を解決しようとしているかの目星をつけるとよい。</description></item></channel></rss>