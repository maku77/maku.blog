<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on まくろぐ</title><link>https://maku.blog/tags/python/</link><description>Recent content in Python on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Thu, 19 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Azure Table Strage を使ってみる (3) Python からテーブル操作してみる</title><link>https://maku.blog/p/o8ufwct/</link><pubDate>Wed, 29 Jan 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/o8ufwct/</guid><description>azure-cosmosdb-table パッケージのインストール Python から Azure Table Storage を操作するには、azure-cosmosdb-table というライブラリを使用します。
azure-cosmosdb-table のインストール $ pip install azure-cosmosdb-table ☝️ ワンポイント Cosmos DB をまったく使わない場合でも cosmosdb と名前のついたライブラリを使わせようとするのは、 Microsoft の策略 Cosmos DB に力を入れているという意思表示でしょう。 正直なところ Cosmos DB はお金がかかりすぎて個人の趣味レベルでは使えないのですが。。。
（追記: 2021年）CosmosDB に無料枠ができて少しずつ個人利用もできそうな感じになってきました。
TableService オブジェクトの生成 Azure Storage にアクセスするには、接続情報（ストレージアカウント名とキー）が必要になるので、Azure ポータル で確認しておいてください。
参考: Azure Storage の接続情報（キー）を確認する Table Storage にアクセスしてごにょごにょするには、TableService クラス のメソッドを使用します。 TableService のコンストラクタには、ストレージアカウント名とキーを渡します。
from azure.cosmosdb.table.tableservice import TableService STORAGE_NAME = &amp;#39;maku77storage&amp;#39; STORAGE_KEY = &amp;#39;XlgKN4Hv...(省略)...F55o3N9g==&amp;#39; table_service = TableService(account_name=STORAGE_NAME, account_key=STORAGE_KEY) ☝️ URL の指定は必要ない？ 接続先アドレス (URL) の構築は TableService クラスがよろしくやってくれるので、実装コードがとてもスッキリします。 ストレージアカウント名は Azure 内（世界中）で一意になっているので、ストレージアカウント名さえ指定すれば、Web API の URL も自動的に決まるということですね。 ストレージアカウントのキーを環境変数から取得する ストレージアカウントにアクセスするためのキー情報をスクリプト内にハードコーディングするのは望ましくないので、環境変数などから取得するようにしておくとよいでしょう。</description></item><item><title>QnA Maker (4) Python から QnA Maker の API を利用する</title><link>https://maku.blog/p/fwyi2fh/</link><pubDate>Tue, 04 Jun 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/fwyi2fh/</guid><description>QnA Maker は REST API を提供しているので、HTTP リクエストを発行できるプログラミング言語から簡単に制御することができます。 ここでは、Python に標準で付属している urllib.request モジュールを使って HTTP リクエストを発行し、QnA Maker にアクセスしてみます。
事前準備（アクセスキーの準備） REST API を使用するには、HTTP リクエストのヘッダ情報としてアクセスキーを付加する必要があります。 こちらの記事 を参考に、下記のどちらかのアクセスキーを確認しておいてください。
サブスクリプションキー (Subscription Key) &amp;hellip; 管理用 エンドポイントキー (Endpoint Key) &amp;hellip; クエリ用 アクセスキーは 9d16b3e6345489ad4a57a0755eb4f96a のような 16 進数文字列です。 QnA のクエリ実行だけであればエンドポイントキーの方を使えば大丈夫ですが、ナレッジベースの作成や更新などを行う場合は、サブスクリプションキーの方を使う必要があります。
QnA Maker の REST API を呼び出す Python ライブラリ REST API は HTTP リクエストを送るだけで使用できるので、ここでは自力で QnA Maker の API を使用するライブラリを作ってみます。
下記の QnaRequest クラスは、ナレッジベースの一覧を取得する getAllKnowledgeBases メソッドと、指定したナレッジベースの情報を取得する getKnowledgeBase メソッドを提供しています。 戻り値は JSON 形式のテキストです。
mylib/qna.py import urllib.request class QnaRequest: BASE_URL = &amp;#39;https://westus.</description></item><item><title>VS Code で Python 用の Linter ＆フォーマッターの Ruff を使う</title><link>https://maku.blog/p/6hnm4hy/</link><pubDate>Thu, 19 Sep 2024 00:00:00 +0000</pubDate><guid>https://maku.blog/p/6hnm4hy/</guid><description>Ruff とは Ruff は Python 用の Lint &amp;amp; Format ツールで、Rust で記述されているため非常に高速に動作します。 Ruff だけで Lint やフォーマットをまとめてかけることができる ため、次のようなツールを個別にインストールする必要がなくなります。
Flake8（Linter） Black（フォーマッター） isort（import 文のソート） これまで、Python コードに Lint や Format をかける場合は、複数のツールを組み合わせて使うのが主流で、効率的な処理が行われているとは言いにくい状況でした。 例えば、広く使われている Lint ツールに Flake8 がありますが、これは pyflakes や pycodestyle の組み合わせであり、内部で何度もファイルの読み込みやパースが行われるため処理に時間がかかっていました。 Ruff は様々な処理が一度で済むように実装されています。 同様に広く使われているフォーマットツールとして Black がありますが、よくよく考えると、Black でフォーマット済みのコードを別の Lint ツール (Flake8) でスタイルチェックするのは無駄です。 Ruff で Lint とフォーマットの処理を一括で行うのは理にかなっています。
ちなみに、Ruff の開発元である Astral 社は、Python 用のパッケージマネージャ（プロジェクト管理ツール）である uv も公開しています。 こちらも Rust で実装されており、高速かつ使いやすいのでオススメです。
参考: Python プロジェクト用の爆速パッケージマネージャ uv を導入する - まくまく Python ノート VS Code に Ruff 拡張をインストールする Visual Studio Code で Ruff を使うには、下記の公式拡張をインストールするだけです。 ruff コマンドを別途インストールする必要はありません。</description></item><item><title>Python で Confluence の情報を取得する</title><link>https://maku.blog/p/wgsz2wn/</link><pubDate>Mon, 05 Feb 2024 00:00:00 +0000</pubDate><guid>https://maku.blog/p/wgsz2wn/</guid><description>Atlassian のドキュメンテーション管理ツールである Confluence は、REST API を使って様々な操作を自動化することができます。 各言語用にラッパーライブラリが公開されているので、通常は REST API を直接呼び出す必要はありません。 ここでは、Atlassian Python API (atlassian-python-api) を使って、Python から Confluence の情報を取得してみます。
Atlassian Python API documentation (GitHub) atlassian-api/atlassian-python-api atlassian-python-api のインストール pip コマンドで atlassian-python-api パッケージをインストールします。 システムを汚さないように、venv 環境を作成してインストールする のがおすすめです。
atlassian-python-api パッケージのインストール ## venv 仮想環境を使う場合（Linux/macOS の場合） $ python3 -m venv venv # 仮想環境の作成 $ source venv/bin/activate # 仮想環境に入る ## venv 仮想環境を使う場合（Windows の場合） $ py -m venv venv # 仮想環境の作成 $ venv\Scripts\activate.bat # 仮想環境に入る ## atlassian-python-api パッケージのインストール $ pip install atlassian-python-api ついでに、python-dotenv を入れて、.</description></item><item><title>Python で Jira の情報を取得する</title><link>https://maku.blog/p/thhqqc7/</link><pubDate>Wed, 13 Dec 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/thhqqc7/</guid><description>プロジェクト管理ツールである Jira は、REST API を使って情報を取得できるようになっています。 ここでは、Python を使って Jira の情報を取得してみます。
jira パッケージのインストール Python から JIRA の情報を取得するには、PyPI で公開されている jira パッケージ を使用すると簡単です（jira パッケージ内部で REST API を使っています）。
jira パッケージのインストール $ pip install jira jira パッケージの基本的な使い方 下記は、JIRA プロジェクトの一覧を取得する簡単な例です。 ユーザー ID やパスワードは適切なものに置き換えてください。
jira-projects.py from jira import JIRA, JIRAError JIRA_SERVER = &amp;#34;https://&amp;lt;server&amp;gt;&amp;#34; JIRA_USER = &amp;#34;&amp;lt;user&amp;gt;&amp;#34; JIRA_PW = &amp;#34;&amp;lt;password&amp;gt;&amp;#34; try: jira = JIRA(JIRA_SERVER, basic_auth=(JIRA_USER, JIRA_PW)) for prj in jira.projects(): print(f&amp;#34;key: {prj.key}, name: {prj.name}&amp;#34;) except JIRAError as e: print(f&amp;#34;Error: {e.</description></item><item><title>VS Code で Python 用のフォーマッター (Black) を使う</title><link>https://maku.blog/p/4oybku6/</link><pubDate>Sat, 13 Nov 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/4oybku6/</guid><description>何をするか？ Visual Studio Code に Python 拡張 を入れることで、Python コードの編集（自動補完など）ができるようになりますが、コードの自動フォーマットを行うには、フォーマッターを別途インストールしておく必要があります（いろんなフォーマッターがあるため）。
Python のフォーマッターとしては、autopep8 や yapf などもありますが、ここでは、最近人気がある Black を VS Code の自動フォーマッターとして設定します。 Facebook や Dropbox、Mozilla などでも導入されており、採用実績としては申し分なさそうです。
☝️ 頑固なフォーマッター Black は自分自身を The uncompromising code formatter と説明しています。 ようするに、「私が定義する設定に従いなさい」という意味で、ユーザーにほとんど設定の余地を残していません（行の長さ程度は設定できます）。 このようにすることで、チーム内でのフォーマット論争を防ぐ効果があります。 TypeScript (JavaScript) でよく使われている Prettier フォーマッターも同様の思想で作られており、ほとんど設定ができないようになっています（こちらは opinionated という単語を使っています）。
参考: TypeScript コードを Prettier で自動整形する （2023-06 追記）Python 拡張とは別に、Black Formatter 拡張 が単独で提供されています。 この拡張には black コマンドがバンドルされているため、別途外部コマンドとして black をインストール (pip install black) する必要がありません。 VS Code での開発が前提であれば、Black Formatter 拡張を使うのが手っ取り早いです。 ここでは、下記の 2 種類の方法を説明します。
方法1: Python 拡張 ＋ Black Formatter 拡張を使う方法 方法2: Python 拡張から外部の black コマンドを使う方法 Python 拡張と Black Formatter 拡張は、両方とも Microsoft 公式の拡張なので、将来的には統合されるかもしれません。</description></item><item><title>Python で OpenGL (1) pyGLFW のインストール</title><link>https://maku.blog/p/sfpwow9/</link><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/sfpwow9/</guid><description>Python で簡単に Open GL のプログラムを開発できるように、GLFW (pyGLFW) というライブラリを使用するための環境構築をしてみます。
GLFW とは Khronos グループが作成している OpenGL や OpenGL ES、Vulkan などの API を使用すると、クラスプラットフォームな 3D プログラムを作成することができます。 ただし、OS ごとにウィンドウの作成方法やキーハンドリングの方法は異なっているため、その部分は個別に作成する必要があります。
GLFW は、そのあたりの OS 依存の処理を抽象化するためラッパーライブラリで、Windows、macOS、Linux などのデスクトップ環境に対応しています。 GLFW 本家は C 言語用のライブラリとして作成していますが、Python 用のラッパーライブラリ (pyGLFW) も公開されています。
昔は GLUT というライブラリがよく使われていましたが、今はもうメンテナンスされていないので、GLFW を使います。
pyGLFW (glfw) のインストール ここでは、Python 用の GLFW ラッパーライブラリである、pyGLFW (glfw) パッケージ をインストールします。
Python 用ライブラリ glfw のインストール Python 用の glfw パッケージは pip コマンドで簡単にインストールできます。 システム全体の環境に影響しないようにするには、virtualenv を使って仮想環境を構築 してからインストールするのがよいでしょう。
virtualenv で仮想環境に切り替える場合 $ mkdir sample $ virtualenv ENV $ source ENV/bin/activate glfw のインストール $ pip install glfw ランタイムライブラリのインストール glfw を使用したプログラムを実行するには、各 OS ごとに用意されたランタイムライブラリ (Shared library) もインストールしておく必要があります。</description></item><item><title>Python で OpenGL (2) PyOpenGL のインストール</title><link>https://maku.blog/p/665rua3/</link><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/665rua3/</guid><description>PyOpenGL とは 前回の記事 では、pyGLFW を使ってウィンドウを表示するところまで行きました。 ただし、pyGLFW がやってくれるのは、ウィンドウの作成や、そのサーフェスに描画するための OpenGL コンテキストを生成するところまでです。 実際に OpenGL コンテキストを使ってレンダリングするには、OpenGL の API が必要です。
そのためのライブラリが PyOpenGL パッケージ です。
PyOpenGL のインストール PyOpenGL パッケージも pyGLFW と同様、pip コマンドで簡単にインストールすることができます。
$ pip install PyOpenGL PyOpenGL で Hello World 下記のサンプルコードは、pyGLFW (glfw) パッケージを使ってウィンドウの初期化を行い（main()）、PyOpenGL (OpenGL) パッケージを使って OpenGL の API を呼び出しています（render()）。
main.py import glfw from OpenGL.GL import * def render(): glClearColor(0, 0, 0.5, 1.0) glClear(GL_COLOR_BUFFER_BIT) def main(): if not glfw.init(): raise RuntimeError(&amp;#39;Could not initialize GLFW3&amp;#39;) glfw.window_hint(glfw.CONTEXT_VERSION_MAJOR, 3) glfw.window_hint(glfw.CONTEXT_VERSION_MINOR, 3) glfw.</description></item><item><title>Azure Speech Service を使って音声をテキストに変換する (STT)</title><link>https://maku.blog/p/5zx3ozz/</link><pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/5zx3ozz/</guid><description>Microsoft の Cognitive Services のひとつとして提供されている Speech Service を使用すると、音声をテキストに変換したり、逆にテキストを音声に変換したりすることができます。
ここでは、Python から Speech Service の機能を利用してみます（Windows 10 で動作確認済）。 実行するにはマイクのついた PC が必要です マイクのついていない PC で実行すると SPXERR_MIC_NOT_AVAILABLE エラーが発生します。
準備 Speech Service の準備 Azure Portal から Speech のリソースを作成し、Subscription Key を取得しておいてください。
Speech SDK のインストール Python の azure-cognitiveservices-speech パッケージをインストールします。
$ pip install azure-cognitiveservices-speech Visual Studio C++ Redistributable のインストール 必要があれば、Visual Studio C++ の再頒布可能パッケージをインストールします。
Visual C++ 再頒布可能パッケージ (vc_redist.x64.exe) Python コード 一回だけ変換して終わるバージョン stt.py import azure.cognitiveservices.speech as speechsdk # この設定は適宜変更してください subscription = &amp;#34;e1b5f0964ab743133b7de4f892741c7a&amp;#34; region = &amp;#34;japaneast&amp;#34; language = &amp;#34;ja-JP&amp;#34; # proxy = (&amp;#34;proxy.</description></item><item><title>HMAC-SHA256 コードを生成する</title><link>https://maku.blog/p/uqhbb5p/</link><pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate><guid>https://maku.blog/p/uqhbb5p/</guid><description>Python で HMAC-SHA256 を生成する 下記の siggen.py スクリプトは、コマンドライン引数で渡された「秘密鍵テキスト」と「メッセージ」をもとに HMAC (Hash-based Message Authentication Code) 署名を生成します。
siggen.py import sys import hashlib import hmac def usage(): print(&amp;#39;python &amp;#39; + sys.argv[0] + &amp;#39; &amp;lt;key&amp;gt; &amp;lt;message&amp;gt;&amp;#39;) sys.exit(1) if __name__ == &amp;#39;__main__&amp;#39;: if len(sys.argv) &amp;lt; 3: usage() key = sys.argv[1] msg = sys.argv[2] sig = hmac.new(key.encode(&amp;#39;ascii&amp;#39;), msg.encode(&amp;#39;ascii&amp;#39;), hashlib.sha256) print(sig.hexdigest()) 使用例 $ python siggen.py &amp;#39;SecretKey&amp;#39; &amp;#39;YourMessage&amp;#39; 8aff2951003c218bd26ee43c99e30527a0c30e06042008a60935ef1ab28891ec ここでは、SHA256 ハッシュ関数を使用していますが (HMAC-SHA256)、hashlib.sha256 の部分を変更すれば、他のハッシュ関数を適用することができます。
openssl コマンドで HMAC-SHA256 を生成する Linux や macOS などの、openssl コマンドを使用できる環境では、下記のようにして簡単に HMAC-SHA256 を求めることができます。</description></item><item><title>数学メモ: 任意の桁のレプ・ユニット (repeated units) を求める方法</title><link>https://maku.blog/p/29awadj/</link><pubDate>Sun, 26 May 2013 00:00:00 +0000</pubDate><guid>https://maku.blog/p/29awadj/</guid><description>レプ・ユニット (repeated units) というのは、1 の連続した数字を表します（例: 1, 11, 111, 1111）。
n 桁のレプ・ユニットは、以下のような計算で求められます。
$$ R_{n} = \frac{10^n - 1}{9} $$
下記は Python でこの計算をテストする例です。
repeated_units.py def repeated_units(n): return (10 ** n - 1) // 9 for i in range(1, 10): print(repeated_units(i)) 実行結果 1 11 111 1111 11111 111111 1111111 11111111 111111111 もちろん、Python のプログラムとしては、単純に繰り返し文字列を作成してから、それを数値に変換することもできます。
def repeated_units(n): return int(&amp;#39;1&amp;#39; * n)</description></item><item><title>数学メモ: 書籍『はじめての数論（原著第3版）』の練習問題メモ</title><link>https://maku.blog/p/qyohkjh/</link><pubDate>Wed, 22 May 2013 00:00:00 +0000</pubDate><guid>https://maku.blog/p/qyohkjh/</guid><description>練習問題 1.1 問題 平方数でも三角数でもある最初の 2 つの数は 1 と 36 である。次に小さな例を見つけよう。できれば、その次の例も見つけよう。三角数でありかつ平方数でもある数を見つける有効な方法を見つけることはできるだろうか？こうした性質をもつ数は無数にあると考えられるか？
解答 Python で三角数 (triangle number) ＝ 平方数 (square number) となる数値を見つけてみる。
#!/usr/bin/env python def triangle(k): return k * (k + 1) // 2 def square(k): return k ** 2 a = 1 b = 1 while True: tri = triangle(a) squ = square(b) if tri == squ: print(&amp;#39;triangle({}) = square({}) = {}&amp;#39;.format(a, b, tri)) a += 1 b += 1 elif tri &amp;lt; squ: a += 1 else: b += 1 if a &amp;gt; 10000000: break 実行結果 triangle(1) = square(1) = 1 triangle(8) = square(6) = 36 triangle(49) = square(35) = 1225 triangle(288) = square(204) = 41616 triangle(1681) = square(1189) = 1413721 triangle(9800) = square(6930) = 48024900 triangle(57121) = square(40391) = 1631432881 triangle(332928) = square(235416) = 55420693056 triangle(1940449) = square(1372105) = 1882672131025 数を大きくすれば、無数に見つかりそうな予感はします。</description></item></channel></rss>