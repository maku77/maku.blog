<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GitHub Actions on まくろぐ</title><link>https://maku.blog/tags/github-actions/</link><description>Recent content in GitHub Actions on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 17 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/github-actions/index.xml" rel="self" type="application/rss+xml"/><item><title>Next.js アプリを GitHub Actions でビルドして GitHub Pages で公開する</title><link>https://maku.blog/p/au8ju6g/</link><pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/au8ju6g/</guid><description>何をするか？ ここでは、Next.js アプリを次のような構成でホスティング（Web サイトとして公開）できるようにします。
create-next-app で作成した Next.js アプリのコードを GitHub で管理する main ブランチにプッシュ（マージ）したら GitHub Actions で下記を実行 Next.js アプリをビルド (npm run build, npm run export) GitHub Pages にデプロイ つまり、この設定が終わると、GitHub に Next.js アプリのコードをプッシュするだけで、自動的にビルドされて、Web サイトに反映されるようになります。
GitHub リポジトリの準備 空の GitHub リポジトリを作成し、そこに create-next-app で作成した Next.js アプリをプッシュします。 リポジトリ名は、最終的な Web サイトのアドレスをどうしたいかで、次のように作り分けます。
ユーザーサイト（あるいは Organization サイト） 公開 URL: https://&amp;lt;username&amp;gt;.github.io/ 作成するリポジトリ名: &amp;lt;username&amp;gt;.github.io プロジェクトサイト 公開 URL: https://&amp;lt;username&amp;gt;.github.io/&amp;lt;repository&amp;gt;/ 作成するリポジトリ名: &amp;lt;repository&amp;gt; ここでは、プロジェクトサイトとして myapp というリポジトリを作成した場合の例で説明していきます。</description></item><item><title>Jekyll と Hugo を共存させて GitHub Actions でビルドする</title><link>https://maku.blog/p/qbmv6fp/</link><pubDate>Wed, 17 Aug 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/qbmv6fp/</guid><description>何をするか？ こことは違う Web サイト (GitHub Pages) の話ですが、いい加減 Jekyll での Web サイト管理は限界 になってきたので、重い腰を上げて全面的に Hugo に乗り換えようと思います。 待っていれば Jekyll も高速化されるかなという淡い期待を抱いて 3 年が経ちましたが、一向にその気配はないので、残念ですがここで Jekyll は見限ります（決して Ruby と Golang の速度の差だけだとは思いませんが、やはり Golang 製のツールの方が高速な傾向はあるのかも）。
とはいえ、現状 Jekyll で管理している Web ページは何千ページにも膨れ上がっており、一気に乗り換えるのは困難です。 そこで、Jekyll 運用されている Web サイトに、少しずつ Hugo 管理のページを加えていく、という作戦を取りたいと思います。 ドメイン名はこれまで通り xxx.github.io を使いたいので、ホスティングはこれまで通り GitHub Pages で行い、ビルドやデプロイには GitHub Actions を使うことにします。
基本方針 GitHub Pages のデフォルトの仕組みとして、Markdown ファイルをソース用リポジトリに置いておくだけで、Jekyll で HTML に変換して公開してくれるというのがあるのですが、今回はこの仕組みは使えません。 なぜなら、Jekyll によるビルド結果と、Hugo によるビルド結果をマージしたものをデプロイしなければいけないからです。 イメージとしては、GitHub リポジトリに push したときに、GitHub Actions で次のような処理を実行できればうまくいくはずです。
図: GitHub Actions でやること Jekyll プロジェクトの Markdown ファイルをビルドする Jekyll のビルド対象から Hugo のディレクトリを除外しておきます Hugo プロジェクトの Markdown ファイルをビルドする Hugo プロジェクトのビルド結果を Jekyll プロジェクトのビルド結果にマージする 同名のファイルは上書きしないことにします（先輩である Jekyll の出力を優先） GitHub Pages のホスティング先にデプロイ ここでは gh-pages ブランチを公開ブランチとして使います Hugo のプロジェクトをフラットに配置してしまうと、content ディレクトリや layouts ディレクトリが混在してわかりにくくなるので、Hugo 側のファイル群は、hugo-files ディレクトリを作ってそこに配置することにします。 最終的に、Jekyll から Hugo への以降がすべて完了したら、この中のファイル群をルートに移動させる想定です。</description></item><item><title>GitHub Actions で Hugo サイトをビルドして VPS サーバーに rsync デプロイする</title><link>https://maku.blog/p/un3gu8m/</link><pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/un3gu8m/</guid><description>何をするか？ Web サイトのコンテンツを GitHub で管理し、さくらの VPS や、お名前.com の VPS で Web サーバーを運用している場合、GitHub Actions でビルドとデプロイを自動化すると便利です。 ここでは、Web サイトのビルドに Hugo、VPS サーバーへのデプロイに rsync を使う前提で、次のような手順で自動化を進めていきます。
SSH 鍵を作成する（自動デプロイのためパスワードは設定しない） VPS 側に SSH 公開鍵を登録する GitHub Actions のシークレットとして SSH 秘密鍵を登録する GitHub Actions のワークフローを作成し、ビルド (Hugo) とデプロイ (rsync) を自動化する Web サイトのビルドには何を使ってもよいのですが、現時点でおそらく最速の静的サイトジェネレーターである Hugo を例にして説明しています。 GitHub Actions による自動化が完了すると、GitHub の main ブランチに Web サイトコンテンツを push するだけで、Hugo によるビルドと rsync による VPS へのデプロイが自動で行われるようになります。
SSH キーペアを作成して VPS へ公開鍵を登録する rsync コマンドで使用する SSH 鍵を ssh-keygen コマンドで作成しておきます。 GitHub Actions から rsync コマンドを実行するので、SSH 秘密鍵にはパスワードを設定しないようにします。 次の例では、github-actions / github-actions.</description></item><item><title>GitHub Actions で Web サイトをビルドして GitHub Pages へ公開する</title><link>https://maku.blog/p/5q3eq2c/</link><pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/5q3eq2c/</guid><description>何をするか？ GitHub Actions を使うと、GitHub で管理されている Web サイト用リソースの「ビルドとデプロイ」を簡単に自動化することができます。
ここでは、
npm run build による Web サイトのビルド ビルドされたリソースの GitHub Pages へのデプロイ（gh-pages ブランチ） を行う設定を行います。 最終的に、https://yourname.github.io/project名/ という URL で Web サイトが公開されます。
前提条件として、GitHub リポジトリに npm run build でビルド可能な Web サイト用リソースがコミットされているものとします。
☝️ 他のビルド方法は？ ここでは、npm run build による Web サイトのビルドを前提としましたが、例えば、Hugo によるビルドなどもほぼ同様に行えます。 GitHub Actions の設定 GitHub プロジェクトの Actions タブから、次のように新規ワークフローを作成します。
set up a workflow yourself をクリック main.yml の編集画面になるので、次のように入力して Start commit ボタンを押す .github/workflows/main.yml name:Build and deploy websiteon:push:branches:[master ]jobs:build:runs-on:ubuntu-lateststeps:- uses:actions/checkout@v2- name:Setup Node.</description></item></channel></rss>