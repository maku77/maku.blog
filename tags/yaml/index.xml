<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>YAML on まくろぐ</title><link>https://maku.blog/tags/yaml/</link><description>Recent content in YAML on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 19 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/yaml/index.xml" rel="self" type="application/rss+xml"/><item><title>VS Code で YAML ファイルの構文をチェックする（YAML 拡張）</title><link>https://maku.blog/p/c7sp7ut/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/c7sp7ut/</guid><description>YAML 拡張とは？ VS Code の YAML 拡張 (redhat.vscode-yaml) をインストールすると、スキーマ定義に基づいて、YAML ファイルの記述内容が正しいかをチェックすることができます。 スキーマ定義を JSON スキーマファイル の形で作成し、YAML ファイルの先頭に次のようなコメントを記述することで適用できます。
YAML ファイルの先頭に追加 # yaml-language-server: $schema=./schema.json YAML ファイルの構文チェックなのに JSON スキーマ？と思うかもしれませんが、YAML と JSON のデータ形式には互換性があるので、スキーマは JSON スキーマでよいんですね。
スキーマによる YAML ファイルの構文チェック 公開スキーマファイルを参照する スキーマファイルは、インターネット上に公開されているものを URL で指定できるようになっています。 有名どころの設定ファイルのスキーマは、下記のサイトに一覧があるので、いろいろなプロジェクトからそのまま利用できます。
JSON Schema Store Ansible Playbook など、内容が複雑になりがちな YAML ファイルに設定しておくと役に立ちそうです。
playbook.yml（の先頭に記述する） # yaml-language-server: $schema=https://raw.githubusercontent.com/ansible/ansible-lint/main/src/ansiblelint/schemas/ansible.json GitHub Actions のワークフローファイル (.github/workflows/*.yml) などは、そのファイルパスから、どのスキーマを使用すればいいかを推測できるので、上記のようなコメント行すら記述せずに自動的に GitHub Actions 用のスキーマ を適用してくれます。 つまり、VS Code に YAML 拡張をインストールするだけで、GitHub Actions のワークフローファイルの構文チェックが有効になります。 便利！
独自定義したスキーマファイルを参照する アプリケーション独自の設定ファイルやデータファイルを YAML 形式で作成する場合は、そのスキーマも独自であることが多いので、専用の JSON スキーマファイルを作成することになるでしょう。 例えば、次の JSON スキーマファイルでは、ユーザー情報を表現するためのスキーマを定義しています（コメントを記述できるようにするために、拡張子を .</description></item><item><title>VS Code で YAML ファイルをソートする（YAML Sort 拡張）</title><link>https://maku.blog/p/2apzood/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2apzood/</guid><description>YAML Sort の概要 VS Code に YAML Sort 拡張 をインストールすると、YAML ファイルの内容をキー名でソートすることができます。 主にソート用に使うものですが、YAML フォーマッターとしても利用できます。 次のような簡単なカスタマイズを行うこともできます。
指定したキーを優先的に上から並べる 1 階層目の各キーの間に空白行を入れる リスト要素をソートする YAML Sort の使い方 YAML Sort のページで Install ボタンを押すだけで、VS Code への拡張のインストールは完了です。 ここでは、次のような YAML ファイルをソートしてみます。
sample.yml（ソート前） root2: ccc: 300 aaa: 100 bbb: 200 root1: fruits: - grape - apple - banana animals: [&amp;#39;wolf&amp;#39;, &amp;#39;fox&amp;#39;, &amp;#39;dolphin&amp;#39;, &amp;#39;eagle&amp;#39;] VS Code で YAML ファイルを開いた状態で、コマンドパレットを開いて (Ctrl/Cmd + Shift + P)、YAML Sort: Sort YAML を選択すると、YAML ファイルの内容がソートされます。
sample.yml（ソート後） --- root1: animals: [&amp;#39;wolf&amp;#39;, &amp;#39;fox&amp;#39;, &amp;#39;dolphin&amp;#39;, &amp;#39;eagle&amp;#39;] fruits: - grape - apple - banana root2: aaa: 100 bbb: 200 ccc: 300 先頭行に自動でセパレーター (---) が挿入され、すべてのキーがアルファベット順にソートされていることが分かります。 キー間の空白行はすべて削除されています。 一方で、リスト要素は自動ではソートされないようです（順番が意味を持つことがあるので当然ですが）。</description></item></channel></rss>