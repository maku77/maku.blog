<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ruff on まくろぐ</title><link>https://maku.blog/tags/ruff/</link><description>Recent content in Ruff on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Thu, 19 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/ruff/index.xml" rel="self" type="application/rss+xml"/><item><title>VS Code で Python 用の Linter ＆フォーマッターの Ruff を使う</title><link>https://maku.blog/p/6hnm4hy/</link><pubDate>Thu, 19 Sep 2024 00:00:00 +0000</pubDate><guid>https://maku.blog/p/6hnm4hy/</guid><description>Ruff とは Ruff は Python 用の Lint &amp;amp; Format ツールで、Rust で記述されているため非常に高速に動作します。 Ruff だけで Lint やフォーマットをまとめてかけることができる ため、次のようなツールを個別にインストールする必要がなくなります。
Flake8（Linter） Black（フォーマッター） isort（import 文のソート） これまで、Python コードに Lint や Format をかける場合は、複数のツールを組み合わせて使うのが主流で、効率的な処理が行われているとは言いにくい状況でした。 例えば、広く使われている Lint ツールに Flake8 がありますが、これは pyflakes や pycodestyle の組み合わせであり、内部で何度もファイルの読み込みやパースが行われるため処理に時間がかかっていました。 Ruff は様々な処理が一度で済むように実装されています。 同様に広く使われているフォーマットツールとして Black がありますが、よくよく考えると、Black でフォーマット済みのコードを別の Lint ツール (Flake8) でスタイルチェックするのは無駄です。 Ruff で Lint とフォーマットの処理を一括で行うのは理にかなっています。
ちなみに、Ruff の開発元である Astral 社は、Python 用のパッケージマネージャ（プロジェクト管理ツール）である uv も公開しています。 こちらも Rust で実装されており、高速かつ使いやすいのでオススメです。
参考: Python プロジェクト用の爆速パッケージマネージャ uv を導入する - まくまく Python ノート VS Code に Ruff 拡張をインストールする Visual Studio Code で Ruff を使うには、下記の公式拡張をインストールするだけです。 ruff コマンドを別途インストールする必要はありません。</description></item></channel></rss>