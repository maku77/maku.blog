<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MUI on まくろぐ</title><link>https://maku.blog/tags/mui/</link><description>Recent content in MUI on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 11 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/mui/index.xml" rel="self" type="application/rss+xml"/><item><title>MUI コンポーネント (v5) に独自のスタイルを設定する (sx prop、styled)</title><link>https://maku.blog/p/87p5o2d/</link><pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/87p5o2d/</guid><description>MUI v5 以降のカスタムスタイル設定 MUI v5 以降でコンポーネントにカスタムスタイル (CSS) を割り当てる方法には、大きく下記の 2 つのやり方があります。
sx prop を使う方法 MUI のコンポーネントには sx prop が定義されていて、ここにスタイルオブジェクトを渡すことで、個別にスタイルを調整できます。つまり、使い捨てのスタイル設定を行う方法です。sx prop は HTML 要素本来の style プロパティと比べて簡潔な構文で記述できます。例えば、margin や padding の設定用に 1 文字 (m, p) のプロパティ名が定義されていたりします。 styled API を使う方法 既存のコンポーネントをラップする形で、スタイル拡張したコンポーネントを生成します。sx prop を使った方法に比べて再利用性が高い方法で、複数個所で使用するコンポーネントにスタイル設定したいときに便利です。styled() 関数は内部的には Emotion というライブラリが提供する関数につながっていますが、MUI では @mui/material/styles パッケージをインポートすることで使えるようになっています。 いずれの方法でも、テーマ設定（theme オブジェクト）に基づいたカスタマイズが可能で、この仕組みにより、アプリ全体のデザインに一貫性を持たせやすくなっています。
☝️ Emotion と JSS MUI v4 以前は、スタイルエンジンとして JSS ライブラリベースの withStyles() や createStyles() といった関数を使用していましたが、MUI v5 以降は、動的スタイルにおけるパフォーマンスがよい Emotion の styled() 関数を使うように変更されました。 MUI v5 を使用するアプリケーションでも @mui/styles パッケージをインポートすれば withStyles() や createStyles() 関数を使用できますが、@mui/styles パッケージは deprecated（非推奨）扱いとなっています。 代わりに、@mui/material/styles パッケージの styled() 関数を使いましょう。 以下、2 つのやり方を詳しく見ていきます。</description></item><item><title>Next.js アプリでのリンク方法まとめ（mui/Material-UI との連携なども） (next/link, next/router)</title><link>https://maku.blog/p/vgs4dnw/</link><pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/vgs4dnw/</guid><description>アプリ内ページへのリンク（基本） // import Link from &amp;#39;next/link&amp;#39; &amp;lt;Link href=&amp;#34;/about&amp;#34;&amp;gt;About us&amp;lt;/Link&amp;gt; Next.js でアプリ内部で閉じるページリンクを張るには、next/link モジュールを使用します。 上記のようにすると、pages/about.tsx ページコンポーネントが生成するページへのリンクになります。
☝️ a 要素は必要ない Next.js 12 以前は Link 要素の下に明示的に a 要素を配置する必要がありました。 これは、HTML 的に正しく a 要素を配置するためでしたが、Next.js 13 では自動的に a 要素を挿入するようになったので、a 要素の記述は必要ありません。 遷移前の履歴を置き換える replace オプション &amp;lt;Link href=&amp;#34;/about&amp;#34; replace&amp;gt; 上記のように replace オプションを指定すると、ページ遷移前の URL がブラウザの履歴に残りません（戻るキーで戻らなくなります）。
外部リンク https:// で始まる外部リンクを出力したい場合は、&amp;lt;a&amp;gt; コンポーネントをそのまま使用します。 next/link（や react-router) が提供する Link コンポーネントは、アプリ内のルーティング用なので使えません。 外部リンクを開く場合は、安全性のために一律で rel=&amp;quot;noopener noreferrer&amp;quot; を付けましょう。 リンククリック時に必ず別タブで開きたいときは、target=&amp;quot;_blank&amp;quot; を指定してください。
&amp;lt;a href=&amp;#34;https://example.com/&amp;#34; target=&amp;#34;_blank&amp;#34; rel=&amp;#34;noopener noreferrer&amp;#34;&amp;gt; Website title &amp;lt;/a&amp;gt; mui (Material-UI) を採用したサイトの場合は、a の代わりに mui が提供する Link コンポーネントを使用することで、サイト内のデザインを統一することができます。 next/link が提供する Link コンポーネントと混同しないように、次のように別名 (MuiLink) を付けて使用すると分かりやすくなります。</description></item></channel></rss>