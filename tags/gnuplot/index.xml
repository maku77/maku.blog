<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gnuplot on まくろぐ</title><link>https://maku.blog/tags/gnuplot/</link><description>Recent content in gnuplot on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 01 May 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/gnuplot/index.xml" rel="self" type="application/rss+xml"/><item><title>gnuplot: gnuplot の基本設定</title><link>https://maku.blog/p/je8stcd/</link><pubDate>Wed, 28 Aug 2002 00:00:00 +0000</pubDate><guid>https://maku.blog/p/je8stcd/</guid><description>初期化ファイル (~/.gnuplot or gnuplot.ini) 初期化ファイルは gnuplot を起動した時に、自動的に読み込まれるファイルです。 Unix の場合は ~/.gnuplot、Windows の場合は gnuplot.ini が読み込まれます。 gnuplot.ini は次に説明する「作業フォルダ」内に置きます。 例えば、作業フォルダを D:\home\gnuplot とした場合は、よく使う関数を D:\home\gnuplot\lib\func.gp などに書いておいて、gnuplot.ini で次のように起動時に読み込むようにしておくと便利です。
gnuplot.ini load &amp;#39;lib/func.gp&amp;#39; gnuplot のホームディレクトリの設定 gnuplot を起動した時にカレントとなるディレクトリを指定しておくと便利です。 デフォルトでは、gnuplot の実行ファイルのあるディレクトリがカレントディレクトリになっているので、出力したファイルがそのディレクトリにできてしまいます。 起動時のカレントディレクトリを変更するには次のようにします。
gnuplot.ini (~/.gnuplot) cd &amp;#39;D:\home\gnuplot&amp;#39; 初期化ファイルの中で、ディレクトリを移動しているだけです。
あるいは、Windows では wgnuplot.exe のショートカットを作成して、そのプロパティの作業フォルダで指定する方法もあります。
wgnuplot.exe のショートカット右クリック → プロパティ ショートカット タブの 作業フォルダ に D:\home\gnuplot などを設定 上のように設定してショートカットをダブルクリックすると、好きなディレクトリで作業を始められます。 この方法を使うと、ショートカットごとに作業ディレクトリを変更することができます。</description></item><item><title>gnuplot: 2次元プロットの基本</title><link>https://maku.blog/p/ffyw55u/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ffyw55u/</guid><description>関数をプロットする Syntax plot &amp;lt;expression&amp;gt; [with &amp;lt;line_style&amp;gt;] line_style 一覧 lines -- 線だけ (関数をプロットする時のデフォルト) points -- 記号だけ (ファイルのデータをプロット時のデフォルト) linespoints -- 線と点 例: y = 0.5x &amp;#43; 1 plot 0.5*x + 1 複数の関数をプロットする Syntax plot &amp;lt;expression&amp;gt; [, &amp;lt;expression&amp;gt;...] 複数のグラフを重ねたい場合は、 plot の後ろにカンマ (,) で区切って関数を並べます。 一行が長くなってしまう場合は \ の次に改行すれば複数行に渡ってコマンドを書くことができます。
最後に実行した plot を再び実行する Syntax replot [&amp;lt;expression&amp;gt;] replot と入力すると、最後にプロットしたグラフを再表示します。 replot の引数に別の関数を指定すれと、 最後に実行した plot の出力に重ねてグラフを表示することができます。 連続して replot を実行すればどんどんグラフが重なっていきます。 replot は主に環境設定を変更した際に使用します。
例: sin(x) と cos(x) と tan(x) を重ねたグラフを描画 plot sin(x) replot cos(x) replot tan(x) 次のようにしても同じ</description></item><item><title>gnuplot: 棒グラフのプロット (with boxes)</title><link>https://maku.blog/p/67swums/</link><pubDate>Sun, 18 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/67swums/</guid><description>棒グラフをプロット 棒グラフをプロットしたい時は、ラインスタイルに boxes を指定します。 範囲とボックスの幅を指定しない場合は、隣のボックスとくっつくように表示されます。
例: 棒グラフのプロット plot &amp;#39;test.dat&amp;#39; with boxes test.dat 1 10 2 30 3 25 4 40 5 20 範囲を指定しないと、上のように見にくいグラフになってしまうので、棒グラフを表示する場合は範囲指定を行うか、マージンなどを設定するとよいです。
例: 範囲を指定してプロット plot [0:6] [0:50] &amp;#39;test.dat&amp;#39; with boxes 例: マージンを設定してプロット set yrange [0:] set offset 1, 1, 1, 0 # left, right, top, bottom の順 (後ろの方は省略できる) plot &amp;#39;test.dat&amp;#39; with boxes ボックスの幅を指定する Syntax set boxwidth &amp;lt;width&amp;gt; # ボックスの幅を指定 set boxwidth # ボックスの幅を自動調整に戻す 例: ボックスの幅を 0.7 にする set boxwidth 0.</description></item><item><title>gnuplot: 三次元プロットの基本</title><link>https://maku.blog/p/awbbari/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/awbbari/</guid><description>三次元グラフの表示 Syntax splot &amp;lt;expression&amp;gt; 例: z = x2 &amp;#43; 10y splot x**2 + 10*y メッシュの細かさを指定する Syntax set isosample &amp;lt;x_rate&amp;gt;, &amp;lt;y_rate&amp;gt; デフォルトの細かさは 10, 10 です。
例: メッシュの細かさを 20, 20 にする set isosample 20, 20 等高線を表示する Syntax set contour 例: z = -x2-y2 の等高線を表示 set contour splot -x**2 - y**2</description></item><item><title>gnuplot: 実行したコマンドのファイルへの保存・読み込み</title><link>https://maku.blog/p/ncyuy3e/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ncyuy3e/</guid><description>実行したコマンドをファイルへ保存 Syntax save &amp;#39;&amp;lt;filename&amp;gt;&amp;#39; 今まで実行したコマンドをファイルに保存したい場合は、save を使います。 ファイルの拡張子には .plt をつけることが多いみたいです。 上書きのチェックはしてくれないので注意してください。
例: sample.plt にコマンドを保存 save &amp;#39;sample.plt&amp;#39; ファイルからコマンドを読み込み Syntax load &amp;#39;&amp;lt;filename&amp;gt;&amp;#39; 逆に保存したファイルを読み込んで実行するには、load を使います。
例: sample.plt を実行 load &amp;#39;sample.plt&amp;#39;</description></item><item><title>gnuplot: 画像ファイルへの保存</title><link>https://maku.blog/p/ojm4was/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ojm4was/</guid><description>GIF で出力 Syntax set terminal gif [transparent] [interlace] [font_size] [size x, y] [bg_color] [border_color] [axes_color] [line1_color line2_color ...] set terminal gif のオプション optionvalueDefaultdescription transparenttransparent | なしなし背景を透過するか interlaceinterlace | なしなしインターレースにするか font_sizesmallsmall6x12 medium7x13 (Bold) large8x16 sizesize &amp;lt;x&amp;gt;, &amp;lt;y&amp;gt;640, 480画像の幅と高さ bg_color&amp;lt;xRRGGBB&amp;gt;xFFFFFF (白)背景色 border_color&amp;lt;xRRGGBB&amp;gt;x000000 (黒)枠の色 axes_color&amp;lt;xRRGGBB&amp;gt;xCCCCCC (灰)軸の色 lineX_color&amp;lt;xRRGGBB&amp;gt;xFF0000 (赤)x00FF00 (緑)x0000FF (青)線の色を順に指定 例: test.gif に出力する設定 set terminal gif size 400, 300 set output &amp;#39;test.gif&amp;#39; 例: test.gif に出力する設定（白色を透過） set terminal gif size 400, 300 transparent xffffff set output &amp;#39;test.</description></item><item><title>gnuplot: グラフ内に矢印や直線を表示する</title><link>https://maku.blog/p/xfp42np/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/xfp42np/</guid><description>矢印・直線を表示する Syntax set arrow &amp;lt;tag&amp;gt; from &amp;lt;sx&amp;gt; &amp;lt;sy&amp;gt; to &amp;lt;ex&amp;gt; &amp;lt;ey&amp;gt; [[no]head] # 2次元の場合 set arrow &amp;lt;tag&amp;gt; from &amp;lt;sx&amp;gt; &amp;lt;sy&amp;gt; &amp;lt;sz&amp;gt; to &amp;lt;ex&amp;gt; &amp;lt;ey&amp;gt; &amp;lt;ez&amp;gt; [[no]head] # 3次元の場合 nohead オプションを付けると、矢印でなく直線になります。 &amp;lt;tag&amp;gt; は他のコマンドで対象となる矢印を指定するために 1 以上の値を指定します。
※プロットの範囲の中に矢印が収まっていないと変な表示になることがあります。
例: 原点付近に十字を表示 set arrow 1 from 0, -3 to 0, 3 nohead set arrow 2 from -3, 0 to 3, 0 nohead 矢印を非表示にする Syntax set noarrow &amp;lt;tag&amp;gt; &amp;lt;tag&amp;gt; には、set arrow で設定した数値を指定します。</description></item><item><title>gnuplot: グラフ内にコメントを表示する</title><link>https://maku.blog/p/adxysxf/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/adxysxf/</guid><description>コメントを表示する Syntax set label tag &amp;#39;text&amp;#39; at [coordinate] x, [coordinate] y [justification] tag にはコメントを識別するための 1 以上の整数を指定します。
オプショナルパラメータの coordinate には、どのような座標系でコメント位置を指定するかを設定できます。
first (default) -- x、y 軸の座標系 second -- x2、y2 軸の座標系 graph -- グラフの左下を (0, 0)、右上を (1, 1) とする座標系 screen -- 表示全体の左下 (0, 0)、右上を (1, 1) とする座標系 justification パラメータでは、指定した座標のどちら側にコメントを表示するかを設定できます。
left (default) -- 指定した座標の左側 right -- 指定した座標の右側 center -- 指定した座標の中央 例 set label 1 &amp;#34;Label 1&amp;#34; at 5, 4 set label 2 &amp;#34;Label 2&amp;#34; at 10, 7</description></item><item><title>gnuplot: アスキーアートでグラフを出力する (dumb 端末)</title><link>https://maku.blog/p/538wdr7/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/538wdr7/</guid><description>Syntax set term(inal) dumb [feed &amp;lt;x幅&amp;gt; &amp;lt;y幅&amp;gt;] set terminal で dumb 端末を指定すると、グラフをアスキーアートで出力できます。 テキストベースのメールやチャットでグラフを送る場合に便利です。
例: -10 log(x) gnuplot&amp;gt; set term dumb gnuplot&amp;gt; plot [0:] -10*log(x) 15 ++-----------+------------+-----------+------------+-----------++ + + + + -10*log(x) ****** + 10 ++* ++ | * | 5 ++ * ++ | *** | 0 ++ ** ++ | ** | -5 ++ ** ++ | ** | -10 ++ ***** ++ | ****** | -15 ++ ******* ++ | ********* | -20 ++ ************* ++ + + + + + ********** -25 ++-----------+------------+-----------+------------+-----------++ 0 2 4 6 8 10 グラフの形だけを示したい場合は、目盛りを消したほうが見た目がきれいになります。</description></item><item><title>gnuplot: サンプル数を上げて強引に塗りつぶす（積分領域の表示）</title><link>https://maku.blog/p/fyjpvb2/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/fyjpvb2/</guid><description> 強引な塗りつぶし表示 set samples 1000 plot [-pi:pi] sin(x) with impulse （追記: 2013-05-02）最近の gnuplot だと、こんな強引なことしなくても、plot するときに with filledcurve の指定をするだけで、塗りつぶし表示ができるみたいです。 しかも、凡例の表示もそれっぽく代わってくれます。
参考 http://gnuplot.sourceforge.net/demo_cvs/fillcrvs.html http://gnuplot.sourceforge.net/demo_cvs/transparent.html</description></item><item><title>gnuplot: 場合分けをして不連続関数を描画する</title><link>https://maku.blog/p/tbxfo2c/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/tbxfo2c/</guid><description>次のようにすると、x の範囲によって値を不連続に変化させることができます。
f(x) = (x &amp;gt; 0) ? 1 : -1 set samples 10000 plot f(x) 上のように連続した関数じゃない場合は、サンプル数が少ないと x=0 の場所の縦線が斜めになってしまうようです。
（追記: 2013-05-03）plot するときに、plot f(x) with steps とすれば、少なくとも線が斜めになってしまうのは防げるようです。 ただ、samples の数は増やしておかないと、x=0 の位置より少しずれた場所で y の値が変化してしまうので、やっぱり set samples は必要です。</description></item><item><title>gnuplot: グラフにタイトルを表示する</title><link>https://maku.blog/p/taoir3i/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/taoir3i/</guid><description>グラフにタイトルを入れる Syntax set title &amp;#34;&amp;lt;title&amp;gt;&amp;#34; [&amp;lt;x_offset&amp;gt;] [, &amp;lt;y_offset&amp;gt;] タイトルはシングルクォーテーション (') で囲んでも構いませんが、改行 (\n) を入れる場合はダブルクォーテーション (&amp;quot;) で囲む必要があります。 タイトルはデフォルトでは表の上部中央に表示されますが、x_offset に移動させる文字数を指定することができます。 タイトルを消したいときは、set title を実行します。
例: タイトルを「Normal Distribution (正規分布)」にする normal_distribution(x, a, b) = exp(-((x-b)**2)/(2*(a**2))) / sqrt(2*pi)*a set title &amp;#34;Normal Distribution&amp;#34; plot normal_distribution(x, 3, 0) タイトルを消す set title タイトルを消したい場合は、タイトル文字列を指定せずに set title を実行します。
複数行のタイトルを入れる set title &amp;#34;これは\n複数行にわたる\nタイトルだよ&amp;#34; タイトルに改行をいれるには \n を使います。 複数行のタイトルを指定する場合は、' (シングルクォーテーション) ではなくて &amp;quot; (ダブルクォーテーション) で囲む必要があります。</description></item><item><title>gnuplot: 座標軸にラベルを表示する</title><link>https://maku.blog/p/b3wwe4b/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/b3wwe4b/</guid><description>座標軸にラベルを表示する Syntax set xlabel &amp;#34;&amp;lt;label&amp;gt;&amp;#34; [x [, y]] set ylabel &amp;#34;&amp;lt;label&amp;gt;&amp;#34; [x [, y]] set zlabel &amp;#34;&amp;lt;label&amp;gt;&amp;#34; [x [, y]] set x2label &amp;#34;&amp;lt;label&amp;gt;&amp;#34; [x [, y]] set y2label &amp;#34;&amp;lt;label&amp;gt;&amp;#34; [x [, y]] 例: x軸の名前を「経過時間(ms)」にする set xlabel &amp;#34;経過時間(ms)&amp;#34; 好きな位置にラベルを表示する set label &amp;#34;&amp;lt;label&amp;gt;&amp;#34; x, y y 軸のラベルを回転させて表示する set ylabel=&amp;#34;\rotate=270 ylabel&amp;#34; ※拡張版 gnuplot のみ対応。</description></item><item><title>gnuplot: 凡例（ラインの名前）を表示する</title><link>https://maku.blog/p/zsdpkyg/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/zsdpkyg/</guid><description>凡例の名前を変える Syntax plot &amp;lt;expression&amp;gt; title &amp;#39;&amp;lt;線の名前&amp;gt;&amp;#39; 例 plot 0.5*x title &amp;#34;my line&amp;#34; title オプションは、with オプションよりも前に指定する必要があります。
凡例を消す set nokey 全ての凡例を消すには set nokey を実行します。 線ごとに凡例を消すには plot のオプションで notitle を指定します。
例: 特定のラインだけ凡例を消す plot 0.5*x notitle, -0.5*x 凡例と線種の表示順を逆にする set key reverse 凡例を四角で囲む set key box 四角を消したくなった場合は nobox をセットします。
set key nobox 凡例の行間を変える set key spacing &amp;lt;倍率&amp;gt; 凡例に表示する線の長さを変える set key samplen &amp;lt;長さ&amp;gt; 線の長さは文字数で指定します。 例えば 10 と指定した場合は 10 文字分の長さになります。
凡例の表示位置を指定する Syntax set key &amp;lt;y 座標&amp;gt;, &amp;lt;y 座標&amp;gt; set key left | right | top | bottom 例: 凡例を (100, 100) に表示 set key 100,100 例: 凡例を右下に表示 set key right bottom</description></item><item><title>gnuplot: 軸の目盛り表示を調整する</title><link>https://maku.blog/p/ezq5wy8/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ezq5wy8/</guid><description>軸の目盛りの間隔、開始座標、終了座標を設定する Syntax set xtics &amp;lt;start&amp;gt;, &amp;lt;incr&amp;gt;, &amp;lt;end&amp;gt; set x2tics &amp;lt;start&amp;gt;, &amp;lt;incr&amp;gt;, &amp;lt;end&amp;gt; set ytics &amp;lt;start&amp;gt;, &amp;lt;incr&amp;gt;, &amp;lt;end&amp;gt; set y2tics &amp;lt;start&amp;gt;, &amp;lt;incr&amp;gt;, &amp;lt;end&amp;gt; set ztics &amp;lt;start&amp;gt;, &amp;lt;incr&amp;gt;, &amp;lt;end&amp;gt; start と end を省略して、incr（ステップ数）だけを指定することもできます。
例: x 軸の目盛りを 1 刻みで 0～5 の間に表示（ついでにグリッドも ON） set xtics 0, 1, 5 set grid plot [-10:10] x あ、こうすると x=0 には目盛りが表示されないみたい。。。 x=0 にも表示したかったら -1, 1, 5 にしないとダメですね。
軸の目盛りを消す Syntax set noxtics set nox2tics set noytics set noy2tics set noztics 図形の形だけを示したい場合などは、軸の目盛りと、凡例を両方とも消してプロットします。</description></item><item><title>gnuplot: グラフに補助線を表示する</title><link>https://maku.blog/p/556wrds/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/556wrds/</guid><description>X=0, Y=0 の中心線 (axis) を表示する Syntax set [no]zeroaxis # x=0, x2=0, y=0, y2=0 軸の補助線を表示・非表示 set [no]xzeroaxis # x=0 軸の補助線を表示・非表示 set [no]x2zeroaxis # x2=0 軸の補助線を表示・非表示 set [no]yzeroaxis # y=0 軸の補助線を表示・非表示 set [no]y2zeroaxis # y2=0 軸の補助線を表示・非表示 show zeroaxis # 補助線の表示状態を確認する X=0, Y=0 の中心線はデフォルトでは非表示です。
例: x, y の中心線を表示 set zeroaxis plot 1/(1+exp(-x)) - 0.5 目盛りごとに補助線（グリッド）を表示する Syntax set [no]grid # グリッドの表示・非表示 show grid # グリッドの表示状態を確認 例: グリッドを表示 set grid plot log(x)</description></item><item><title>gnuplot: グラフの枠を表示・非表示する</title><link>https://maku.blog/p/3mgr3db/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/3mgr3db/</guid><description>枠 (border) の表示・非表示 Syntax set [no]border グラフの枠はデフォルトでは表示されるので、特に枠を消したい場合のみ下記のように実行します。
例: グラフの枠を消す set noborder plot sin(x) 指定した軸だけ表示する Syntax set border &amp;lt;枠番号の論理和&amp;gt; &amp;nbsp;plot bordersplotsplot Sidesplot baseverticalstop bottom (south)116256 left (west)232512 top (north)4641024 right (east)81282048</description></item><item><title>gnuplot: グラフの描画範囲を指定する</title><link>https://maku.blog/p/afkbjc6/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/afkbjc6/</guid><description>描画する線の範囲を指定する Syntax plot [x_min : x_max] [y_min : y_max] &amp;lt;expression&amp;gt; # 二次元の場合 splot [x_min : x_max] [y_min : y_max] [z_min : z_max] &amp;lt;expression&amp;gt; # 三次元の場合 set xrange [min:max] set yrange [min:max] set zrange [min:max] 例: [-2π, 2π] の sin(x) のグラフを表示 plot [-2*pi:2*pi] sin(x) 開始座標だけを指定したり、終了座標だけを指定したりすることもできます。
例: x軸の範囲を 0 からにする plot [0:] sin(x) # set xrange [0:] ; plot sin(x) と同じ 例: x軸の範囲を π までにする plot [:pi] cos(x) # set xrange [:pi] ; plot cos(x) と同じ 例: y軸の範囲を [-π,π] にする plot [] [-pi:pi] sin(x**2) # set yrange [-pi:pi] ; plot sin(x**2) と同じ プロットのオフセットを設定 Syntax set offset &amp;lt;left&amp;gt;, &amp;lt;right&amp;gt;, &amp;lt;top&amp;gt;, &amp;lt;bottom&amp;gt; # マージン設定 show offset # マージン表示 例: オフセットを設定 set offset 2, 2, 1, 1 set grid plot [-2*pi:2*pi] cos(x) グラフのマージンを設定する Syntax set lmargin left # 左の余白を指定（文字数で指定） set rmargin right # 右の余白を指定（文字数で指定） set tmargin top # 上の余白を指定（文字数で指定） set bmargin bottom # 下の余白を指定（文字数で指定） グラフの外形だけを表示したい場合などは、タイトルやラベルなどを表示するためのマージンは必要ないので、次のようにすると余計な空白をなくすことができます。</description></item><item><title>gnuplot: 線のスタイル、ポイントのスタイルを変更する</title><link>https://maku.blog/p/e4vuhjy/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/e4vuhjy/</guid><description>線のスタイルを変更する Syntax plot &amp;lt;expression&amp;gt; with &amp;lt;line_style&amp;gt; 線のスタイルを変更するには plot のオプションで with を使います。 with の後ろには次のようなものを指定できます。 括弧は省略形を示しています。
boxes (b) -- 箱（サブスタイル: linesize (ls), linetype (lt)） boxerrorbars -- 箱とエラーバー dots (d) -- 点 errorbars (e) -- エラーバー impulses (i) -- 縦棒 lines (l) -- 線 linespoints -- 線と記号 points (p) -- 記号（サブスタイル: pointtype (pt), pointsize(ps)） steps (s) -- 階段状 線種ごとにさらにサブスタイルを指定することができます。 例えば、記号でプロットする場合（with points (p) を指定した場合）は、オプションとして pointtype (pt) と pointsize (ps) を指定することができます。
例えば、記号のサイズを 3 にする場合は、plot コマンドのオプションとして with p ps 3（省略形での指定）を指定します。 線種や記号の種類にどんなものが指定できるかは、help with コマンドで調べることができます。</description></item><item><title>gnuplot サンプル: ホームページ用の GIF を出力する環境設定ファイル (output_gif.env)</title><link>https://maku.blog/p/idkxws2/</link><pubDate>Wed, 04 Dec 2002 00:00:00 +0000</pubDate><guid>https://maku.blog/p/idkxws2/</guid><description> lib/output_gif.env # # 使用例: output.gif というファイル名で出力する設定を行う場合 # # gnuplot&amp;gt; call &amp;#39;lib/hpgif.gp&amp;#39; &amp;#39;output.gif&amp;#39; # set terminal gif size 320, 240 transparent xffffff #set terminal gif size 320, 240 #set samples 200 set output &amp;#39;$0&amp;#39; set zeroaxis</description></item><item><title>gnuplot サンプル: グラフの形だけ表示する環境設定 (only_form.env)</title><link>https://maku.blog/p/h2swmzv/</link><pubDate>Thu, 05 Dec 2002 00:00:00 +0000</pubDate><guid>https://maku.blog/p/h2swmzv/</guid><description> lib/only_form.env #---------------------------- # グラフの形だけ表示する環境 #---------------------------- # マージンを枠が消えない程度になくす set lmargin 0 set rmargin 1 set tmargin 1 set bmargin 0 # 目盛りを消す set noxtics set noytics # 軸の名前を消す set nokey</description></item><item><title>gnuplot サンプル: 関数のある点から x軸、y軸に向かって線を引く (cross_line.gp)</title><link>https://maku.blog/p/arfdp4b/</link><pubDate>Wed, 04 Dec 2002 00:00:00 +0000</pubDate><guid>https://maku.blog/p/arfdp4b/</guid><description> lib/cross_line.gp # # 関数のある点から x軸、y軸に向かって線を引きます。 # f(x) に対象の関数を指定し、x 座標を指定します。 # # 使用例: # f(x) = sin(x) # call &amp;#39;lib/cross_x.gp&amp;#39; &amp;#39;pi/4&amp;#39; # plot [-pi:pi] f(x) # set arrow from $0, 0 to $0, f($0) nohead lt 3 lw 3 set arrow from 0, f($0) to $0, f($0) nohead lt 3 lw 3 set zeroaxis</description></item><item><title>gnuplot サンプル: いろんなグラフ用の関数 (functions.gp)</title><link>https://maku.blog/p/e2h3dg4/</link><pubDate>Fri, 06 Dec 2002 00:00:00 +0000</pubDate><guid>https://maku.blog/p/e2h3dg4/</guid><description> lib/functions.gp # # Gabor のマザー・ウェーブレット # # 使用例: # plot [-20:20] gabor_mother(x, 8) # gabor_mother(x,sigma) = (1/(2*sqrt(pi)*sigma)) * exp(-x**2/sigma**2) * cos(x) # # メキシカン・ハット # mexican_hat(x) = (1-2*x**2)*exp(-x**2) # # 正規分布 # # 1 # f(x) = ----------- e ^(- (x-μ)^2 / 2σ^2) # √(2π)σ # # σ … 散らばり具合 -- a # μ … 平均値 -- b # # # 使用例： # plot normal_distribution(x, 3, 0) # normal_distribution(x, a, b) = exp(-((x-b)**2)/(2*(a**2))) / sqrt(2*pi)*a # シグモイド関数 sigm(x) = 1 / (1 + exp(-x))</description></item><item><title>gnuplot: スクリプト内での有限ループの書き方</title><link>https://maku.blog/p/92s2tau/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/92s2tau/</guid><description>ループ処理の回数を有限にするには、1 つのファイルでループ終了判定用変数を設定し、その中からループ処理を行うファイルを呼び出します。
loop_test.gp i = 0 call &amp;#39;sub.gp&amp;#39; sub.gp i = i + 1 print i if (i &amp;lt; 10) reread 上の 2 つのファイルを用意し、 次のようにすると、1～10 までを表示します。
call &amp;#39;loop_test.gp&amp;#39;</description></item><item><title>gnuplot: gnuplot を計算機として使う (print)</title><link>https://maku.blog/p/23a8fgp/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/23a8fgp/</guid><description>gnuplot の print コマンドを使えば、簡易電卓として使用できます。
例: e^x の値を表示 print exp(x)</description></item><item><title>gnuplot: gnuplot のテスト表示を行う (test)</title><link>https://maku.blog/p/sc7r4wm/</link><pubDate>Sat, 03 Jan 2004 00:00:00 +0000</pubDate><guid>https://maku.blog/p/sc7r4wm/</guid><description>gnuplot による描画をテストするためのコマンドとして test コマンドが用意されています。
表示サンプル gnuplot&amp;gt; test 図: test コマンドの出力</description></item><item><title>gnuplot</title><link>https://maku.blog/p/qxskyjh/</link><pubDate>Wed, 01 May 2013 00:00:00 +0000</pubDate><guid>https://maku.blog/p/qxskyjh/</guid><description>http://gnuplot.sourceforge.net/ ここの Demos を見たら、昔と比べて随分いろいろな表示ができるようになっててびっくりしました。 もはやどんなグラフでも描けそうな勢い。</description></item></channel></rss>