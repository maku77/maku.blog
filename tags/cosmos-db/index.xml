<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cosmos DB on まくろぐ</title><link>https://maku.blog/tags/cosmos-db/</link><description>Recent content in Cosmos DB on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sat, 12 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/cosmos-db/index.xml" rel="self" type="application/rss+xml"/><item><title>Azure Cosmos DB にアカウントを作って MongoDB API でアクセスする</title><link>https://maku.blog/p/cd9bg3x/</link><pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/cd9bg3x/</guid><description>Azure Cosmos DB と MongoDB API Azure Cosmos DB は、Microsoft の Azure 上に配置できるスケーラブルなデータベースで、SQL や MongoDB API など様々なインタフェースでアクセスできるようになっています。
MongoDB を使った既存のアプリケーションがある場合、接続先を Azure Cosmos DB アカウントのアドレスに変更するだけで、簡単にクラウド上のデータを扱えるようになります。 ローカルの MongoDB サーバ (mongod) に接続する代わりに、Azure Cosmos DB に接続するということです。
ここでは、MongoDB API（MongoDB シェル）による Azure Cosmos DB へのアクセスを試してみます。 まずは、Azure 上に Cosmos DB のリソースを作成します。
Azure Cosmos DB アカウントを作成する Azure ポータルへログインし、Azure Cosmos DB のページを開き、Azure Cosmos DB アカウントの作成 をクリックします。
次の画面では、アカウント名 や API の種類を設定します。
アカウント名 に入力した値は、下記のように接続 URI の一部として使われます。 よって、このアカウント名は世界中で一意である必要があります。
mongodb://＜アカウント名＞:＜キー＞@＜アカウント名＞.documents.azure.com:10255/?ssl=true&amp;amp;replicaSet=globaldb API の種類には、MongoDB API を指定してください。 各項目の入力が終わったら、確認と作成 を押して数分待つと、Azure Cosmos DB アカウントの作成が完了します。</description></item><item><title>Azure: Cosmos DB の SQL API をプロキシ経由で使用する</title><link>https://maku.blog/p/t8rfkjn/</link><pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/t8rfkjn/</guid><description>参照するサンプルコード Azure の Cosmos DB を SQL API で操作するための最初の手順は下記のドキュメントに記載されています。
クイック スタート:Azure Cosmos DB SQL API アカウントを使用して Node.js アプリを構築する ここに Node.js 用のサンプルコードがあり、@azure/cosmos パッケージが提供する CosmosClient クラスを使用したコードになっています（昔のサンプルコードでは documentdb というライブラリを使用していたりしますが、今は Microsoft が提供する @azure/cosmos を使用すると完結なコードを記述できます）。
const CosmosClient = require(&amp;#39;@azure/cosmos&amp;#39;).CosmosClient; 基本的には、config.js ファイルに記述されたエンドポイントとキーを下記のような感じで設定すれば実行できるようになるのですが、
config.js var config = {}; config.endpoint = &amp;#39;https://your-cosmosdb.documents.azure.com:443/&amp;#39;; config.key = &amp;#39;9Hp4WSwgvggexAuGy4dKdl...snipped...lV9Nm44Pg8WVkH==&amp;#39;; 会社などのプロキシ環境内からだとうまく接続できず、次のような感じのエラーが発生すると思います。
$ node app.js Completed with error {&amp;#34;message&amp;#34;:&amp;#34;request to https://your-cosmosdb.documents.azure.com:443/dbs/FamilyDatabase failed, reason: connect ETIMEDOUT 123.34.56.78:443&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;system&amp;#34;,&amp;#34;errno&amp;#34;:&amp;#34;ETIMEDOUT&amp;#34;, &amp;#34;code&amp;#34;:&amp;#34;ETIMEDOUT&amp;#34;,&amp;#34;headers&amp;#34;:{&amp;#34;x-ms-throttle-retry-count&amp;#34;:0,&amp;#34;x-ms-throttle-retry-wait-time-ms&amp;#34;:0}} HTTPS_PROXY 環境変数を設定しても同様で効果がありません。</description></item><item><title>MongoDB for VS Code で Azure Cosmos DB を操作する</title><link>https://maku.blog/p/dt3ahpw/</link><pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/dt3ahpw/</guid><description>Cosmos DB インスタンスを MongoDB API アクセス用に作成 しておくと、さまざまな MongoDB 用のツールでデータベースにアクセスできるようになります。 ここでは、VS Code 用の拡張「MongoDB for VS Code」を使って、Cosmos DB を操作できるようにしてみます。 TypeScript を使って Web アプリを作成しているときは、エディタとして VS Code を使っていることが多いでしょうから、同じ環境上で Cosmos DB を操作できると開発が捗ります。
MongoDB for VS Code のインストール 図: MongoDB for VS Code のインストール MongoDB for VS Code は、VS Code の Extesions バー (Cmd/Ctrl + Shift + X) で MongoDB で検索すれば簡単にインストールできます。
VS Code から Cosmos DB (MongoDB) に接続する 接続文字列で簡単接続 MongoDB for VS Code をインストールすると、サイドバーに 葉っぱのアイコン が出てくるので、ここから MongoDB サーバーに接続することができます。 ちなみに、MongoDB が葉っぱアイコンを使うのは、それを使うことが「シンプルで自然であるから」らしいです（じゃあ水でもいいじゃん、とは言いますまい）。</description></item></channel></rss>