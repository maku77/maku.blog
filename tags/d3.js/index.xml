<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>D3.js on まくろぐ</title><link>https://maku.blog/tags/d3.js/</link><description>Recent content in D3.js on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 18 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/d3.js/index.xml" rel="self" type="application/rss+xml"/><item><title>D3.js による SVG 描画の基本</title><link>https://maku.blog/p/v38nmhw/</link><pubDate>Tue, 08 Aug 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/v38nmhw/</guid><description>D3.js は、クライアントサイド JavaScript で SVG 描画を行うためのライブラリです。 素の JavaScript（バニラ JavaScript) だけでも svg 要素を動的に構築していくことはできますが、D3.js を使うことでよりシンプルな API を使って描画処理を記述することができます。 ここでは、D3.js で基礎的な SVG 描画を行う方法を紹介します。
矩形を 1 つ描く D3.js で矩形を描画するには、d3.select() で svg 要素を選択し（D3 セレクションオブジェクトを取得）、そこに append() メソッドで rect 要素を追加します。 そして、メソッドチェーンさせる形で attr() を呼び出し、rect の属性（サイズや色）を設定していきます。
次の例では、svg 要素に緑色の矩形を 1 つ追加しています。 rect 要素の塗り潰し色は fill 属性で指定することに注意してください（CSS の &amp;ldquo;background&amp;rdquo; プロパティとは名前が異なります）。
図: 矩形の表示 &amp;lt;svg id=&amp;#34;mysvg&amp;#34; width=&amp;#34;200&amp;#34; height=&amp;#34;100&amp;#34; /&amp;gt; &amp;lt;script&amp;gt; d3.select(&amp;#34;#mysvg&amp;#34;) // svg 要素を選択 .append(&amp;#34;rect&amp;#34;) // svg 内に rect 要素を追加 .attr(&amp;#34;x&amp;#34;, 10) // rect 要素の属性値を設定 .</description></item><item><title>D3.js による Force Simulation (3) 各ノードをドラッグして動かせるようにする</title><link>https://maku.blog/p/8dmb73t/</link><pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/8dmb73t/</guid><description>d3-drag モジュールとは D3.js は、マウスによるドラッグ操作や、タブレットなどでのタッチドラッグ操作を扱うための d3-drag モジュールを提供しています（d3 モジュールに内包されています）。 d3-drag は Force Simulation (d3-force) 用のモジュールではありませんが、よく d3-force と組み合わせて使用されます。 Force Simulation では、各ノードの座標値が tick イベントと連動して刻々と変化するため、ドラッグ中はノードの座標値をマウスカーソル位置に固定するなどの処理が必要です。
参考: Force Simulation (d3-force) の基本 d3-drag の基本的な使い方 次のサンプルでは、svg 内の circle 要素をドラッグして動かせるようにしています。
図: d3-drag によるノードのドラッグ ソースコード &amp;lt;svg id=&amp;#34;svg-p4vddjh&amp;#34; width=&amp;#34;300&amp;#34; height=&amp;#34;200&amp;#34;&amp;gt;&amp;lt;/svg&amp;gt; &amp;lt;script&amp;gt; const svg = d3.select(&amp;#34;#svg-p4vddjh&amp;#34;) const width = +svg.attr(&amp;#34;width&amp;#34;) const height = +svg.attr(&amp;#34;height&amp;#34;) // ノード配列 const nodesData = [{}, {}, {}, {}] // ノードを描画するための circle 要素を svg に追加しておく const circles = svg.</description></item><item><title>D3.js による Force Simulation (2) link force でノードを結合する</title><link>https://maku.blog/p/9ujohp6/</link><pubDate>Thu, 14 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/9ujohp6/</guid><description>link force とは D3.js の Force simulation (d3-force) には様々なフォースを設定することができ、それにより各ノードの動き（レイアウト）を制御できるようになっています。 link force はそのようなフォースのひとつで、ノード間にリンク情報を設定することにより、バネのような力を発生させます。 接続された 2 つのノードのうち、一方の位置を動かすと、もう一方のノードが引っ張られて動くようになります。
図: link force のイメージ 参考: Force Simulation (d3-force) の基本 link force の基本的な使い方 次の例では、4 つのノードに環状に繋がるような link force を設定しています（ここではリンクの可視化はしていません）。
図: link force を設定したフォースシミュレーション ソースコード &amp;lt;svg id=&amp;#34;svg-a2f28wm&amp;#34; width=&amp;#34;300&amp;#34; height=&amp;#34;200&amp;#34;&amp;gt;&amp;lt;/svg&amp;gt; &amp;lt;script&amp;gt; const svg = d3.select(&amp;#34;#svg-a2f28wm&amp;#34;) const width = +svg.attr(&amp;#34;width&amp;#34;) const height = +svg.attr(&amp;#34;height&amp;#34;) // ノード配列 const nodesData = [{}, {}, {}, {}] // リンク配列 const linksData = [ { source: 0, target: 1 }, { source: 1, target: 2 }, { source: 2, target: 3 }, { source: 3, target: 0 }, ] // ノードを描画するための circle 要素を svg に追加しておく const circles = svg.</description></item><item><title>D3.js による Force Simulation (1) d3-force の基本</title><link>https://maku.blog/p/6kavdch/</link><pubDate>Wed, 13 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/6kavdch/</guid><description>d3-force とは D3.js の Force Simulation (d3-force) モジュールは、粒子（ノード）間の引力を考慮した座標計算を行うためのライブラリです（d3 モジュールに含まれています）。 主に、ノードとエッジで表現されるネットワークモデルをビジュアライズするために利用されます。 d3-force によって逐次計算される座標をもとにノードやエッジを描画することで、レイアウトが収束していく過程をアニメーションさせて見せることができます。
次の例では、d3-force を使って 5 つのノードの座標値を計算して、SVG の circle 要素として描画しています。
図: d3-force によるレイアウト 実装コード &amp;lt;svg id=&amp;#34;#svg-gi3ajww&amp;#34; width=&amp;#34;300&amp;#34; height=&amp;#34;200&amp;#34;&amp;gt;&amp;lt;/svg&amp;gt; &amp;lt;script&amp;gt; const svg = d3.select(&amp;#34;#svg-gi3ajww&amp;#34;) const width = +svg.attr(&amp;#34;width&amp;#34;) const height = +svg.attr(&amp;#34;height&amp;#34;) // ノード配列（どんなオブジェクトでもよい） const nodesData = [{}, {}, {}, {}, {}] // ノードを描画するための circle 要素を svg に追加しておく const circles = svg.selectAll(&amp;#34;circle&amp;#34;) .data(nodesData) .join(&amp;#34;circle&amp;#34;) .attr(&amp;#34;r&amp;#34;, 10) .attr(&amp;#34;fill&amp;#34;, &amp;#34;blue&amp;#34;) // Simulation オブジェクトの作成とフォース設定 const simulation = d3.</description></item><item><title>D3.js でキーボードイベントを扱う (keydown)</title><link>https://maku.blog/p/6emds9m/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/6emds9m/</guid><description>D3.js でキーボードからの入力イベントを扱うコードのサンプルです。
図: クリックしてから上下左右キーで動かす 次の例では、svg 要素でキーボードイベントをハンドルしています。 svg 要素がフォーカスされた状態でカーソルキー（上下左右）を入力すると、丸印 (circle) が上下左右に動きます。
&amp;lt;svg id=&amp;#34;svg-z5a3fzu&amp;#34; width=&amp;#34;200&amp;#34; height=&amp;#34;100&amp;#34;&amp;gt;&amp;lt;/svg&amp;gt; &amp;lt;script&amp;gt; const svg = d3.select(&amp;#34;#svg-z5a3fzu&amp;#34;); // D3 Selection オブジェクトを取得 svg .on(&amp;#34;keydown&amp;#34;, handleKeyDown) // keydown イベントのハンドラーを設定 .attr(&amp;#34;tabindex&amp;#34;, 0) // フォーカスを当てられるようにする // .node().focus() // 自動でフォーカスする場合 // カーソルキーで動かせる丸を表示 const circle = svg.append(&amp;#34;circle&amp;#34;) .attr(&amp;#34;cx&amp;#34;, 100) .attr(&amp;#34;cy&amp;#34;, 50) .attr(&amp;#34;r&amp;#34;, 10) .attr(&amp;#34;fill&amp;#34;, &amp;#34;dodgerblue&amp;#34;) function handleKeyDown(event) { switch (event.code) { case &amp;#34;ArrowLeft&amp;#34;: circle.attr(&amp;#34;cx&amp;#34;, +circle.attr(&amp;#34;cx&amp;#34;) - 5) event.preventDefault(); break; case &amp;#34;ArrowRight&amp;#34;: circle.attr(&amp;#34;cx&amp;#34;, +circle.attr(&amp;#34;cx&amp;#34;) + 5) event.</description></item><item><title>D3.js でボタンなどの入力要素を扱う</title><link>https://maku.blog/p/s5zrgp3/</link><pubDate>Sun, 10 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/s5zrgp3/</guid><description>D3.js は主に SVG の描画に使われるライブラリですが、一般的な DOM 要素のイベントをハンドルするためにも使用できます。 ここでは、ボタンやテキスト入力要素を D3.js で扱う例を示します。
次の例では、ボタン (button) をクリックしたときに、その独自属性 (data-color) にセットされた値を取り出しています。 この仕組みを利用すれば、ボタンを押したときに SVG の表示内容を切り替えるといったことが可能です。
Green Yellow Red ボタンを押してみて
&amp;lt;div id=&amp;#34;buttonContainer&amp;#34;&amp;gt; &amp;lt;button data-color=&amp;#34;g&amp;#34;&amp;gt;Green&amp;lt;/button&amp;gt; &amp;lt;button data-color=&amp;#34;y&amp;#34;&amp;gt;Yellow&amp;lt;/button&amp;gt; &amp;lt;button data-color=&amp;#34;r&amp;#34;&amp;gt;Red&amp;lt;/button&amp;gt; &amp;lt;p id=&amp;#34;message&amp;#34;&amp;gt;ボタンを押してみて&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script type=&amp;#34;module&amp;#34;&amp;gt; import * as d3 from &amp;#34;https://cdn.jsdelivr.net/npm/d3@7/+esm&amp;#34;; d3.selectAll(&amp;#34;#buttonContainer button&amp;#34;) .on(&amp;#34;click&amp;#34;, function() { const color = d3.select(this).attr(&amp;#34;data-color&amp;#34;) d3.select(&amp;#34;#message&amp;#34;).text(`選択したカラーコード = ${color}`) }) &amp;lt;/script&amp;gt; 上記の例では、click ハンドラーの中で、d3.select() を使って D3 セレクションオブジェクトを生成していますが、次のように従来の DOM API だけを使って記述することも可能です。
.on(&amp;#34;click&amp;#34;, (event) =&amp;gt; { const color = event.target.dataset[&amp;#34;color&amp;#34;] // button の data-color の値を取得 document.</description></item><item><title>D3.js で各要素から任意のデータを取り出す (datum)</title><link>https://maku.blog/p/8m4drzr/</link><pubDate>Sun, 10 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/8m4drzr/</guid><description>図: D3 セレクションのデータを参照する D3 セレクションオブジェクトの datum() メソッドを使うと、任意のデータ（オブジェクト）を紐づけて、後から自由に参照できるようになります。 例えば、任意の要素上でマウスイベントが発生した場合に、その要素のデータを参照するというのが典型的な使用方法です。 D3 セレクションオブジェクトに紐づけられたデータを参照するときは、datum() メソッドを引数なしで呼び出します。 D3.js で複数要素をまとめて追加する際には data() メソッドを使用しますが、それでセットしたデータも datum() メソッドで参照することができます。
下記の例では、3 つの circle 要素のデータとして、name プロパティと color プロパティを持つ独自のオブジェクトを紐づけています。
&amp;lt;svg id=&amp;#34;svg-vmhww5v&amp;#34; w=&amp;#34;200&amp;#34; h=&amp;#34;100&amp;#34; /&amp;gt; &amp;lt;script&amp;gt; const svg = d3.select(&amp;#34;#svg-vmhww5v&amp;#34;); // 3 つの circle 要素に紐づけるデータ const data = [ { name: &amp;#34;circle-1&amp;#34;, color: &amp;#34;cyan&amp;#34; }, { name: &amp;#34;circle-2&amp;#34;, color: &amp;#34;yellow&amp;#34; }, { name: &amp;#34;circle-3&amp;#34;, color: &amp;#34;magenta&amp;#34; }, ]; // 情報表示用の text 要素 const text = svg.</description></item><item><title>D3.js でマウスイベントを扱う (click, mousemove, mouseover, mouseout)</title><link>https://maku.blog/p/ffz4v3w/</link><pubDate>Sat, 09 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ffz4v3w/</guid><description>D3.js でマウスイベントを扱うコードのサンプルです。
click イベント 図: click イベントをハンドルする D3.js でマウスのクリックイベントをハンドルするには、D3 Selection オブジェクトに click イベントハンドラを追加します。 上記の svg 要素内でクリックすると、その座標にピンク色の円が表示されます。
&amp;lt;svg id=&amp;#34;svg-vwuifrt&amp;#34; width=&amp;#34;200&amp;#34; height=&amp;#34;100&amp;#34; /&amp;gt; &amp;lt;script&amp;gt; const svg = d3.select(&amp;#34;#svg-vwuifrt&amp;#34;); // D3 Selection オブジェクトを取得 svg.on(&amp;#34;click&amp;#34;, (event) =&amp;gt; { const [x, y] = d3.pointer(event) svg.append(&amp;#34;circle&amp;#34;) .attr(&amp;#34;cx&amp;#34;, x) .attr(&amp;#34;cy&amp;#34;, y) .attr(&amp;#34;r&amp;#34;, 10) .attr(&amp;#34;fill&amp;#34;, &amp;#34;deeppink&amp;#34;) .style(&amp;#34;fill-opacity&amp;#34;, 0.5) }) &amp;lt;/script&amp;gt; event.clientX や event.clientY でマウスカーソルの座標値を取得してしまうと、ブラウザのクライアント領域全体の座標値になってしまうので、d3.point() で svg 要素内の座標値に変換するところがポイントです。
mousemove イベント 図: mousemove イベントをハンドルする D3.js でマウスカーソルを動かしたときのイベントをハンドルするには、D3 Selection オブジェクトに mousemove イベントハンドラを追加します。 上記の svg 要素内でマウスカーソルを動かすと、現在の座標値を表示します。</description></item><item><title>Svelte 応用: Svelte アプリから D3.js を使う</title><link>https://maku.blog/p/7acxmwo/</link><pubDate>Mon, 04 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/7acxmwo/</guid><description>何をするか？ Svelte を使用した Web アプリケーションの中から、SVG 描画ライブラリである D3.js を使用する方法を説明します。 Svelte のプロジェクトは、npm create svelte@latest コマンドなどで既に作成されていることを前提とします。
参考: Svelte を始める (SvelteKit で Hello World） D3.js のインストール Svelte はビルド時に実装コードをバニラ JS の形にコンパイルするので、D3.js (d3) などの外部ライブラリは devDependencies としてインストールすれば OK です。 TypeScript を使う場合は、型情報の @types/d3 も一緒にインストールしておきます。
d3 モジュールと型情報をインストール $ npm install --save-dev d3 @types/d3 D3.js による描画 ここでは、次のような簡単な棒グラフを Svelte アプリ内の D3.js で描画してみます。
D3.js による棒グラフの例 D3.js の d3.select() 関数は DOM 要素を参照するため、クライアントサイド JavaScript として実行しなければいけないことに注意してください。 具体的には、Svelte の onMount() コールバック内で呼び出すようにします。 直接 d3.select() 関数を呼び出してしまうと、ReferenceError: document is not defined のようなエラーが発生します。</description></item><item><title>Astro アプリから D3.js を使う</title><link>https://maku.blog/p/a8rq9gs/</link><pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/a8rq9gs/</guid><description>D3.js はクライアントサイド JavaScript から SVG 画像を生成するためのライブラリです。 ここでは、Web サイト生成用のフレームワークである Astro 上で、D3.js を使う方法を紹介します。 前提条件として、Astro のプロジェクトはすでに作成済みであるとします。 まだ作成していない場合は、次のように作成できます。
Astro プロジェクトの生成 $ npm create astro@latest D3.js はコンポーネントスクリプトからは使えない D3.js はクライアントサイド JS として動作し、DOM ツリー上の SVG 要素を動的に操作することを想定して設計されています。 一方で、Astro コンポーネントのフロントマター部分に記述するスクリプトは、サーバーサイドで（ビルド時に）実行されることを想定しています。 つまり、D3.js を使ったコードは、Astro のフロントマタースクリプトとして記述することはできません。 残念！
Chart.astro（間違った方法） --- import * as d3 from &amp;#34;d3&amp;#34;; const svg = d3.select(&amp;#34;#mysvg&amp;#34;); // ここでは DOM 要素にアクセスできない！ // ... --- &amp;lt;svg id=&amp;#34;mysvg&amp;#34; width=&amp;#34;400&amp;#34; height=&amp;#34;200&amp;#34;&amp;gt;&amp;lt;/svg&amp;gt; D3.js を使ったコードは、次のように &amp;lt;script&amp;gt; 要素の中に記述する必要があります。 ここに記述した JavaScript コードは、クライアントサイド（Web ブラウザ上）で実行されます。
Chart.astro（正しい方法） --- --- &amp;lt;svg id=&amp;#34;mysvg&amp;#34; width=&amp;#34;400&amp;#34; height=&amp;#34;200&amp;#34;&amp;gt;&amp;lt;/svg&amp;gt; &amp;lt;script&amp;gt; import * as d3 from &amp;#34;d3&amp;#34;; const svg = d3.</description></item><item><title>React アプリの中で D3.js を使ってチャートを描画する</title><link>https://maku.blog/p/j52iy4k/</link><pubDate>Thu, 13 Apr 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/j52iy4k/</guid><description>何をするか？ D3.js は、Web ブラウザ上で様々なデータをビジュアライズするためのデファクトスタンダードな描画ライブラリです。 ここでは、React (Next.js) アプリ内で、D3.js を使って簡単なチャートを描画してみます。
☝️ ほかの描画ライブラリ JavaScript による描画ライブラリには、他にも Chart.js や Mermaid.js などいろいろなものがあります。 Chart.js を使うと、は折れ線グラフや散布図などを簡単に描画することができます。 Mermaid.js を使うと、独自フォーマットのテキストをもとにフローチャートなどを描画することができます。 これらの描画ライブラリは、D3.js と比べて簡単に使うことができますが、描画可能な図の種類は限られています。 一方、D3.js は高度なカスタマイズや自由度の高いデータの可視化が可能ですが、初学者にとってはやや学習コストが高くなっています。 D3.js のインストール NPM あるいは Yarn で、プロジェクトに D3.js の依存を追加します。 TypeScript を使用している場合は、D3.js 本体 (d3) に加え、型情報 (@types/d3) もインストールします。
D3.js のインストール（NPM の場合） $ npm install d3 $ npm install --save-dev @types/d3 D3.js のインストール（Yarn の場合） $ yarn add d3 $ yarn add --dev @types/d3 React コンポーネント内で D3.js を使う React アプリは作成済みであるとし、D3.js を使って描画を行うコンポーネントを新しく作成します。 次の HelloChart コンポーネントは、D3.</description></item></channel></rss>