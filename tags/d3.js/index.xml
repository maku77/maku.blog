<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>D3.js on まくろぐ</title><link>https://maku.blog/tags/d3.js/</link><description>Recent content in D3.js on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 04 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/d3.js/index.xml" rel="self" type="application/rss+xml"/><item><title>Svelte 応用: Svelte アプリから D3.js を使う</title><link>https://maku.blog/p/7acxmwo/</link><pubDate>Mon, 04 Sep 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/7acxmwo/</guid><description>何をするか？ Svelte を使用した Web アプリケーションの中から、SVG 描画ライブラリである D3.js を使用する方法を説明します。 Svelte のプロジェクトは、npm create svelte@latest コマンドなどで既に作成されていることを前提とします。
参考: Svelte を始める (SvelteKit で Hello World） D3.js のインストール Svelte はビルド時に実装コードをバニラ JS の形にコンパイルするので、D3.js (d3) などの外部ライブラリは devDependencies としてインストールすれば OK です。 TypeScript を使う場合は、型情報の @types/d3 も一緒にインストールしておきます。
d3 モジュールと型情報をインストール $ npm install --save-dev d3 @types/d3 D3.js による描画 ここでは、次のような簡単な棒グラフを Svelte アプリ内の D3.js で描画してみます。
D3.js による棒グラフの例 D3.js の d3.select() 関数は DOM 要素を参照するため、クライアントサイド JavaScript として実行しなければいけないことに注意してください。 具体的には、Svelte の onMount() コールバック内で呼び出すようにします。 直接 d3.select() 関数を呼び出してしまうと、ReferenceError: document is not defined のようなエラーが発生します。</description></item><item><title>Astro アプリから D3.js を使う</title><link>https://maku.blog/p/a8rq9gs/</link><pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/a8rq9gs/</guid><description>D3.js はクライアントサイド JavaScript から SVG 画像を生成するためのライブラリです。 ここでは、Web サイト生成用のフレームワークである Astro 上で、D3.js を使う方法を紹介します。 前提条件として、Astro のプロジェクトはすでに作成済みであるとします。 まだ作成していない場合は、次のように作成できます。
Astro プロジェクトの生成 $ npm create astro@latest D3.js はコンポーネントスクリプトからは使えない D3.js はクライアントサイド JS として動作し、DOM ツリー上の SVG 要素を動的に操作することを想定して設計されています。 一方で、Astro コンポーネントのフロントマター部分に記述するスクリプトは、サーバーサイドで（ビルド時に）実行されることを想定しています。 つまり、D3.js を使ったコードは、Astro のフロントマタースクリプトとして記述することはできません。 残念！
Chart.astro（間違った方法） --- import * as d3 from &amp;#34;d3&amp;#34;; const svg = d3.select(&amp;#34;#mysvg&amp;#34;); // ここでは DOM 要素にアクセスできない！ // ... --- &amp;lt;svg id=&amp;#34;mysvg&amp;#34; width=&amp;#34;400&amp;#34; height=&amp;#34;200&amp;#34;&amp;gt;&amp;lt;/svg&amp;gt; D3.js を使ったコードは、次のように &amp;lt;script&amp;gt; 要素の中に記述する必要があります。 ここに記述した JavaScript コードは、クライアントサイド（Web ブラウザ上）で実行されます。
Chart.astro（正しい方法） --- --- &amp;lt;svg id=&amp;#34;mysvg&amp;#34; width=&amp;#34;400&amp;#34; height=&amp;#34;200&amp;#34;&amp;gt;&amp;lt;/svg&amp;gt; &amp;lt;script&amp;gt; import * as d3 from &amp;#34;d3&amp;#34;; const svg = d3.</description></item><item><title>React アプリの中で D3.js を使ってチャートを描画する</title><link>https://maku.blog/p/j52iy4k/</link><pubDate>Thu, 13 Apr 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/j52iy4k/</guid><description>何をするか？ D3.js は、Web ブラウザ上で様々なデータをビジュアライズするためのデファクトスタンダードな描画ライブラリです。 ここでは、React (Next.js) アプリ内で、D3.js を使って簡単なチャートを描画してみます。
☝️ ほかの描画ライブラリ JavaScript による描画ライブラリには、他にも Chart.js や Mermaid.js などいろいろなものがあります。 Chart.js を使うと、は折れ線グラフや散布図などを簡単に描画することができます。 Mermaid.js を使うと、独自フォーマットのテキストをもとにフローチャートなどを描画することができます。 これらの描画ライブラリは、D3.js と比べて簡単に使うことができますが、描画可能な図の種類は限られています。 一方、D3.js は高度なカスタマイズや自由度の高いデータの可視化が可能ですが、初学者にとってはやや学習コストが高くなっています。 D3.js のインストール NPM あるいは Yarn で、プロジェクトに D3.js の依存を追加します。 TypeScript を使用している場合は、D3.js 本体 (d3) に加え、型情報 (@types/d3) もインストールします。
D3.js のインストール（NPM の場合） $ npm install d3 $ npm install --save-dev @types/d3 D3.js のインストール（Yarn の場合） $ yarn add d3 $ yarn add --dev @types/d3 React コンポーネント内で D3.js を使う React アプリは作成済みであるとし、D3.js を使って描画を行うコンポーネントを新しく作成します。 次の HelloChart コンポーネントは、D3.</description></item></channel></rss>