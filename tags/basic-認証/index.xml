<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Basic 認証 on まくろぐ</title><link>https://maku.blog/tags/basic-%E8%AA%8D%E8%A8%BC/</link><description>Recent content in Basic 認証 on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 11 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/basic-%E8%AA%8D%E8%A8%BC/index.xml" rel="self" type="application/rss+xml"/><item><title>Svelte 入門: サーバー Hooks で Basic 認証を実装する</title><link>https://maku.blog/p/mem8u54/</link><pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate><guid>https://maku.blog/p/mem8u54/</guid><description>Hooks とは SvelteKit には Hooks の仕組みが提供されており、特にサーバー Hooks を定義することで、任意のリクエストに割り込んで処理を行うことができます。 例えば、各ルートのハンドラーが呼び出される前に、次のような処理を行うことができます。
リクエストのログを取る リクエストの内容を変更する（リダイレクトなど） リクエストを拒否する（アクセス制御） 後続の処理のためにデータを付加する（Cookie に基づくユーザー情報など） この記事では、サーバー Hooks の利用例として、簡単な Basic 認証 を実装する方法を解説します。
図: Chrome の Basic 認証ダイアログ 管理者にしかアクセスできないページを手っ取り早く作りたい場合などに便利ですが、Basic 認証はセキュアな認証方式ではないので、あくまで Hooks の使い方の例と考えてください。 本番環境に認証・認可の仕組みを導入する場合は、OAuth などのよりセキュアな方式を検討してください。
サーバー Hooks の基本 サーバー Hooks を定義するのはとても簡単で、SvelteKit のプロジェクト内に src/hooks.server.ts（あるいは .js）を作成し、handle 関数をエクスポートするだけです。 ファイル名を間違えると、Hooks が正しく動作しないので注意してください（特に hook でなく hooks であることに注意）。
次の サーバー Hooks 実装では、リクエストイベントの内容をコンソールに出力しています。
src/hooks.server.ts import type { Handle } from &amp;#39;@sveltejs/kit&amp;#39;; export const handle: Handle = async ({ event, resolve }) =&amp;gt; { console.</description></item></channel></rss>