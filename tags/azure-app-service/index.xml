<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure App Service on まくろぐ</title><link>https://maku.blog/tags/azure-app-service/</link><description>Recent content in Azure App Service on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 09 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/azure-app-service/index.xml" rel="self" type="application/rss+xml"/><item><title>Azure: Node.js アプリを App Service へデプロイする（Kudu ビルド編）</title><link>https://maku.blog/p/wx3fvib/</link><pubDate>Wed, 09 Oct 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/wx3fvib/</guid><description>Azure App Service には、デプロイセンター という仕組みがあり、そこからソースコードのビルドからデプロイまでの自動化の設定を行うことができます。 簡単に言うと、Azure Repos や GitHub のリポジトリに最新の JavaScript コードをコミットするだけで、最新の Node.js アプリが自動で立ち上がるようになります。
ビルドの仕組みとしては、クラウド上の Azure Pipelines を使ったり、ローカルでビルドしてしまってからデプロイする方法があります。 App Service には Kudu エンジン が組み込まれており、デプロイ時に自動で実行されるスクリプトを使って簡易的なビルド処理を行うこともできます。
はじめに（用語定義） Azure ではデプロイ処理を構成するコンポーネントを下記のような名前で呼んでいます。
デプロイソース GitHub や Azure Repos など。 ソースコードが置いてある場所（リポジトリ）のこと。 Azure App Service は手軽なデプロイソースとして OneDrive や Dropbox などのフォルダ共有サービスを設定することもできますが、本格的な運用で使用することは推奨されていません。 ビルドパイプライン（ビルドプロバイダー） Azure Pipelines など。デプロイソースからソースコードを取得し、一連のビルド処理を行う仕組み。 App Service には組み込みで Kudu エンジンが搭載されており、デフォルトではデプロイ時にこの Kudu エンジンによって npm install などが実行されるようになっています。 また、デプロイ時に実行する カスタムスクリプトを .deployment ファイルで定義する こともできます。 これらの仕組みだけで十分であれば、Azure Pipelines を使う必要はありません。 デプロイメカニズム ビルドしたアプリを Azure App Service などに配置するためのアクション。Kudu エンジンや FTP (SFTP)、WebDeploy などのデプロイメカニズムが提供されています。 リポジトリの準備 (Azure Repos) ここでは、Azure Repos に Git リポジトリを作成し、そこに Node.</description></item><item><title>Azure: App Service の Node.js アプリのエントリポイントはどこで定義されているか？</title><link>https://maku.blog/p/3u4hj7h/</link><pubDate>Tue, 08 Oct 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/3u4hj7h/</guid><description>Node.js アプリのエントリポイントの指定 Azure App Service で Node.js アプリをテンプレートから作成すると、うまいことルートに配置された index.js が起動してくれます。 この仕組みがブラックボックスな感じで気持ち悪いので調べてみたところ、このエントリポイントの指定は web.config ファイルにあるようです。
web.config（抜粋） &amp;lt;add name=&amp;#34;iisnode&amp;#34; path=&amp;#34;index.js&amp;#34; verb=&amp;#34;*&amp;#34; modules=&amp;#34;iisnode&amp;#34;/&amp;gt; Windows ベースの App Service で Node.js アプリを動作させる場合、Windows の Web サーバーである IIS 上で動作する iisnode という Node.js 実装が使用されます。 IIS が起動するときに設定ファイルである web.config が読み込まれ、上記の設定により iisnode がエントリポイント index.js を使って起動するという流れになります。 なので、作成している Node.js アプリのエントリポイント（メインの JS ファイル）が変わった場合は、この web.config ファイルを修正する必要があります。
あと、このような仕組みのため、web.config ファイルは必ずアプリを構成する JS ファイルと一緒にデプロイしないといけないということも分かります。 上記の設定のままであれば、デプロイ先のルートディレクトリに、少なくとも下記の 2 ファイルが配置されていなければいけません。
web.config （IIS の設定ファイル） index.js （上記ファイルで指定されたエントリポイント） なぜ紛らわしいのか？ Node.js アプリを開発するとき、通常は package.json の start スクリプトとしてエントリポイントを指定します。
package.json（抜粋） { &amp;#34;scripts&amp;#34;: { &amp;#34;start&amp;#34;: &amp;#34;node index.</description></item></channel></rss>