<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Atomic Design on まくろぐ</title><link>https://maku.blog/tags/atomic-design/</link><description>Recent content in Atomic Design on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 13 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/atomic-design/index.xml" rel="self" type="application/rss+xml"/><item><title>Next.js アプリのディレクトリ構成を考える（Atomic Design と Presentational and Container Components）</title><link>https://maku.blog/p/4is2ahp/</link><pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/4is2ahp/</guid><description>Web サイトを構築するにあたって、よく参照されるコンポーネントの分類手法として、Atomic Design と Presetational and Container Components があります。
Atomic Design &amp;hellip; UI の粒度と具体性によって 5 レベルに分類する Presentational and Container Components &amp;hellip; 「表示」と「振る舞い」の役割で分類する ここでは、それぞれに関して概要をざっと眺めた上で、Next.js プロジェクトにどんな形で適用していけばいいかを考えてみます。
Atomic Design とは Web デザインにおける UI コンポーネントの分割粒度の考え方として、Brad Frost 氏の Atomic Design があります。
Atomic Design - Brad Frost 氏のブログ記事 Atomic Design - 書籍版（Webで読めます） Atomic Design では、UI コンポーネントを粒度の小さい順に次のように分類します。
図: Atomic Design の 5 つのレベル（Brad Frost 氏のブログより） Atoms（原子） &amp;hellip; これ以上分割できない単位（例: ラベル、入力、ボタン） Molecules（分子） &amp;hellip; 意味のある UI パーツ単位 （例: 検索フォーム (ラベル + 入力 + ボタン)） Organisms（有機体、生物） &amp;hellip; ページの一部分を構成する。Molecules をどう組み合わせるべきかという、アプリドメインの知識が入ってくる。 Templates（テンプレート） &amp;hellip; ページ全体のレイアウト。最初はプレースホルダーだらけかもしれないが、徐々に具体的な Organisms が配置されて最終形態に近づいていく。 Pages（ページ） &amp;hellip; Templates に具体的なデータを入れたもの（特定のページ）。 よく Organisms の扱いで迷うようですが、汎用性の側面から次のような感じで分類すると、プロジェクト内でコンポーネントを整理しやすくなります。 Pages に関しては、Templates に対してデータを流し込んだものなので、ここでは省略しています。</description></item></channel></rss>