<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Firebase on まくろぐ</title><link>https://maku.blog/tags/firebase/</link><description>Recent content in Firebase on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 05 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/firebase/index.xml" rel="self" type="application/rss+xml"/><item><title>Firebase Auth で admin ユーザーのみ Firestore に書き込みできるようにする</title><link>https://maku.blog/p/dw9jt4e/</link><pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/dw9jt4e/</guid><description>何をするか？ ユーザーデータの管理に Firestore を使うと、Web アプリやモバイルアプリから手軽にデータを読み書きできるので非常に便利です。 一方で、データの書き込み (write) を誰にでもできるようにしていると、大切なデータを勝手に書き換えられてしまいます。
Firestore の危険なセキュリティルールの例 rules_version = &amp;#39;2&amp;#39;; service cloud.firestore { match /databases/{db}/documents { match /{doc=**} { allow read, write: if true; // 危険！ } } } ここでは、Firestore へのデータ書き込みを admin ユーザー（自分）だけに制限してみます。
なお、FirebaseApp インスタンスの初期化 (initializeApp) や、Firebase Auth の導入 自体は完了しているものとします。 ユーザーごとにアクセス制御をしたいので、Firebase Auth による認証処理はほぼ必須になります。 とはいえ、Firebase アプリの認証まわりの実装はとても簡単で、最初に FirebaseApp インスタンスを初期化して、UI ライブラリ（react-firebaseui など）を使ってサインイン画面を出してユーザーにサインインさせるさせるだけです。 サインイン状態は Firebase が内部で管理してくれるので、Firestore API の呼び出し時には特に意識する必要はありません。 Firestore サービス側のセキュリティルールで、認証状態を意識した制限をかければよいだけです。
何をもって admin ユーザーとするか？ Firestore のデータ書き込み (write) を admin ユーザーだけに制限するといっても、そもそも何をもって admin ユーザーとみなすのかという問題があります。 このあたりは、ひとことで言うと「自由」です。 例えば、次のようなやり方が考えられます。</description></item><item><title>Firebase CLI でコマンドラインから Firebase を操作する</title><link>https://maku.blog/p/pamw7hr/</link><pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/pamw7hr/</guid><description>Firebase CLI のインストール Firebase CLI をインストールすると、firebase というコマンドで Firebase の各種サービスを操作できるようになります。 インストール用に各 OS 用のバイナリが用意されていますが、どの OS でも共通で使える Node.js の npm でインストールすることをお勧めします。
$ npm install -g firebase-tools Firebase CLI をバージョンアップしたいときも同じコマンドでいけます。 インストールが終わったら、firebase コマンドを実行できるか確認しておきます。
$ firebase --version 10.0.1 firebase コマンドの使い方 firebase コマンドは、firebase &amp;lt;サブコマンド&amp;gt; という形で使用します。 firebase コマンドを引数なしで実行するとヘルプを表示できますが、公式サイトのコマンドリファレンス の方がわかりやすいです。 以下に、いくつかのサブコマンドを紹介しておきます。
サインイン (firebase login) Firebase プロジェクトの情報を取得するには、まずは Firebase アカウントにサインインしておく必要があります。 次のように実行すると、Web ブラウザが開き、Firebase にサインインできます。
$ firebase login サインインとアクセス権限が終わったら、Web ブラウザは閉じて大丈夫です。
Firebase プロジェクトの一覧を取得する (projects:list) $ firebase projects:list ✔ Preparing the list of your Firebase projects ┌──────────────────────┬──────────────┬────────────────┬──────────────────────┐ │ Project Display Name │ Project ID │ Project Number │ Resource Location ID │ ├──────────────────────┼──────────────┼────────────────┼──────────────────────┤ │ MyApp1 │ myapp1-12345 │ 123456789001 │ asia-northeast1 │ ├──────────────────────┼──────────────┼────────────────┼──────────────────────┤ │ MyApp2 │ myapp2-12345 │ 123456789002 │ asia-northeast1 │ └──────────────────────┴──────────────┴────────────────┴──────────────────────┘ 2 project(s) total.</description></item><item><title>Firebase Admin SDK で Firebase の各種サービスを操作する</title><link>https://maku.blog/p/yfov4bi/</link><pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/yfov4bi/</guid><description>Firebase Admin SDK とは Firebase Admin SDK を使うと、Firebase の管理者（おそらくあなた）用に提供された API キーを使って、Firebase 上のデータを管理することができます。 例えば、ローカル PC にある JSON データを解析して Firestore データベースのドキュメントとして登録するといったことができます。
Firebase Admin SDK がサポートしている言語としては、Node.js、Java、Python、Go、C# などがありますが、Node.js から順番に機能提供されていくようです。 ここでは Node.js (TypeScript) で Firestore の API を呼び出してみます。
☝️ サーバーライブラリとクライアントライブラリ Firebase Admin SDK はしばしば サーバーライブラリ とも呼ばれます。 一方で、Web アプリやモバイルアプリなどで使う SDK は クライアントライブラリ と呼ばれ、Firebase が提供するセキュリティルールという仕組みでアクセス制御を行います。 具体的には、Firebase Auth などでユーザー認証を行うことで、各クライアントに対してアクセス権限を付与します。 これに対して、Firebase Admin SDK はあらかじめローカルに保持しているアクセスキーを使って API を呼び出すので、セキュリティルールを無視した特権アクセスが可能です。 秘密鍵のダウンロード Firebase Admin SDK を使って API 呼び出しを行うには、秘密鍵（API キー）を取得する必要があります。
Firebase コンソール にサインインして、対象のプロジェクトを選択する。 プロジェクトの設定 を開き、サービスアカウント タブを選択する。 新しい秘密鍵の生成 をクリックして、秘密鍵ファイル (.</description></item><item><title>Next.js で Firebase: プロジェクトの作成と接続準備</title><link>https://maku.blog/p/73eq2cm/</link><pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/73eq2cm/</guid><description>何をするか？ ここでは、Firebase を Next.js (React) ウェブアプリから使用するための準備 として、「Firebase プロジェクトの作成」「Next.js アプリの作成」「FirebaseApp インスタンスの初期化」までを行います。 なお、ここでは Firebase JS SDK ver.9 以降を対象とします（ver.8 以前は初期化方法が若干異なります）。
Firebase サービスを使うと、Web アプリやモバイルアプリに必要なバックエンド環境を簡単に整えることができます。 例えば、Firebase は次のような機能を提供しており、小規模のアプリであれば無料の Spark プランで動かすことができます（参考: Firebase の料金プラン）。
Firebase Authentication &amp;hellip; ユーザー管理と認証（ログイン UI もある） Firebase Hosting &amp;hellip; Web アプリのホスティング（独自ドメインにも対応） Cloud Firestore &amp;hellip; NoSQL データベース Cloud Function &amp;hellip; サーバレス関数 Cloud Storage for Firebase &amp;hellip; ファイル管理 Web アプリから上記のような機能にアクセスするには、まずは FirebaseApp インスタンスの設定（初期化）が必要になります。 以下では、Next.js アプリから各種 Firebase インスタンスにアクセスするところまでの準備を行います。
Firebase プロジェクトの作成 Firebase コンソールにサインイン して、Firebase のプロジェクトを作成します。 プロジェクト名は、自分の Google アカウント内で一意の名前になっていれば OK です。 例えば、MyApp のような名前を付けて作成してください。 Google アナリティクスは有効にしなくても OK です。</description></item></channel></rss>