<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Firebase/Authentication on まくろぐ</title><link>https://maku.blog/tags/firebase/authentication/</link><description>Recent content in Firebase/Authentication on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><atom:link href="https://maku.blog/tags/firebase/authentication/index.xml" rel="self" type="application/rss+xml"/><item><title>Next.js で Firebase: Authentication 機能でユーザー認証できるようにする</title><link>https://maku.blog/p/8t6gq2b/</link><pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/8t6gq2b/</guid><description>何をするか？ Firebase の Authentication 機能 を使用すると、ウェブアプリ（やモバイルアプリ）にユーザー認証機能を付けて、各種リソースへのアクセスを制御できるようになります。 例えば、「Firestore に格納されているユーザー情報の編集は、そのユーザーにのみ許可する」といったことができます。 Firebase のクライアントアプリでユーザーデータを扱う場合は、Firebase Authentication はほぼ必須の機能だといえます。
ここでは、Next.js (React) アプリで Firebase Authentication を使い、ユーザー認証を行えるようにしてみます。 ユーザー認証に使う UI は、Firebase が用意している FirebaseUI を使って表示します。
事前準備として、Firebase プロジェクトの作成は済んでおり、Next.js アプリから各種 Firestore 関連インスタンスを取得できるようになっていると想定します。
参考: Next.js で Firebase: プロジェクトの作成と接続準備 ログインプロバイダの設定 Firebase Authentication では、サインイン方法として、新規に登録するメールアドレスや電話番号を使う方法（ネイティブプロバイダ）と、既存の Google アカウントや Facebook アカウントなどを使う方法（追加のプロバイダ）が準備されています。 まずは、シンプルに「メールアドレス」でユーザー登録できるようにしてみます。
Firebase コンソール の Authentication タブを選択して機能を有効化する。
ログインプロバイダ (Sign-in method) で メール／パスワード を選択する。
有効にする にチェックを入れて 保存 をクリック。
これで、Firebase Authentication で「メールアドレス」による認証を行えるようになります。
サインイン状態を扱う React フックを作成する Next.js (React) アプリから Firebase Authentication を使う場合は、サインイン状態を扱うためのカスタムフックを作成しておくと便利です。 サインインボタンなどの UI を先に作りたいところですが、ボタンを表示すべきかどうかの判断のために結局このカスタムフックが必要になるので、先にカスタムフックを作成します。</description></item><item><title>Next.js で Firebase: Authentication 機能でユーザー認証できるようにする</title><link>https://maku.blog/p/8t6gq2b/</link><pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/8t6gq2b/</guid><description>何をするか？ Firebase の Authentication 機能 を使用すると、ウェブアプリ（やモバイルアプリ）にユーザー認証機能を付けて、各種リソースへのアクセスを制御できるようになります。 例えば、「Firestore に格納されているユーザー情報の編集は、そのユーザーにのみ許可する」といったことができます。 Firebase のクライアントアプリでユーザーデータを扱う場合は、Firebase Authentication はほぼ必須の機能だといえます。
ここでは、Next.js (React) アプリで Firebase Authentication を使い、ユーザー認証を行えるようにしてみます。 ユーザー認証に使う UI は、Firebase が用意している FirebaseUI を使って表示します。
事前準備として、Firebase プロジェクトの作成は済んでおり、Next.js アプリから各種 Firestore 関連インスタンスを取得できるようになっていると想定します。
参考: Next.js で Firebase: プロジェクトの作成と接続準備 ログインプロバイダの設定 Firebase Authentication では、サインイン方法として、新規に登録するメールアドレスや電話番号を使う方法（ネイティブプロバイダ）と、既存の Google アカウントや Facebook アカウントなどを使う方法（追加のプロバイダ）が準備されています。 まずは、シンプルに「メールアドレス」でユーザー登録できるようにしてみます。
Firebase コンソール の Authentication タブを選択して機能を有効化する。
ログインプロバイダ (Sign-in method) で メール／パスワード を選択する。
有効にする にチェックを入れて 保存 をクリック。
これで、Firebase Authentication で「メールアドレス」による認証を行えるようになります。
サインイン状態を扱う React フックを作成する Next.js (React) アプリから Firebase Authentication を使う場合は、サインイン状態を扱うためのカスタムフックを作成しておくと便利です。 サインインボタンなどの UI を先に作りたいところですが、ボタンを表示すべきかどうかの判断のために結局このカスタムフックが必要になるので、先にカスタムフックを作成します。</description></item></channel></rss>