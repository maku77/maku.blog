<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hono on まくろぐ</title><link>https://maku.blog/tags/hono/</link><description>Recent content in Hono on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 19 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/hono/index.xml" rel="self" type="application/rss+xml"/><item><title>Cloudflare Workers の KV ストレージでアクセストークンをキャッシュする</title><link>https://maku.blog/p/q896mzu/</link><pubDate>Sun, 19 Jan 2025 00:00:00 +0000</pubDate><guid>https://maku.blog/p/q896mzu/</guid><description>何をするか ここでは、Cloudflare Worker から KV ストレージを使用する例として、サードパーティ製 API のアクセストークンなど、有効期限のある情報をキャッシュする方法 を紹介します。
サードパーティ API としてアクセストークン（あるいはリフレッシュトークン）を要求する API が定義されている場合、取得したトークンは有効期限内は再利用することが想定されています。 しかし、呼び出しごとに独立したコンテキストで動作する Cloudflare Workers の環境では、呼び出しのたびにトークンを取得することになってしまいます。 このようなケースでは、取得したトークンを KV ストレージにキャッシュしておくことで、次回のアクセス時に再利用することができます。
KV では、キーと値のペアを保存するときにオプション情報として TTL (Time To Live) を指定することができるので、こういった有効期限のある情報をキャッシュするのに適しています。 KV ストレージの基本的な使い方は下記を参照してください。
参考: Cloudflare Workers の KV ストレージの使い方 プロジェクトと KV namespace を作成する Cloudflare Worker のプロジェクトをまだ作成していない場合は先に作成しておきます。 ここでは、Hono フレームワークを使用するプロジェクトの雛形を作成します。
$ pnpm create hono@latest hello-hono $ cd hello-hono 次に、wrangler kv コマンドを使って KV namespace を作成します。 名前は単純に KV としておきます。
$ wrangler kv namespace create KV KV namespace が作成できたら、コマンドの出力を参考に、wrangler.</description></item><item><title>Cloudflare Workers の KV ストレージの使い方</title><link>https://maku.blog/p/xb5cpr6/</link><pubDate>Sun, 19 Jan 2025 00:00:00 +0000</pubDate><guid>https://maku.blog/p/xb5cpr6/</guid><description>Cloudflare Workers KV とは Cloudflare Workers は基本的にステートレスなサーバーレスプラットフォームですが、KV というデータストアを使うことで、複数のアクセス間でデータを共有することができます。 KV という名前の通り、キー (key) と値 (value) のペアを保存することができ、Worker のコードから簡単にアクセスできるようになっています。
Cloudflare Workers の基本的な使い方はこちらを参照してください。 下記作業では、すでに Cloudflare Workers のプロジェクト (hello-worker) が作成されていることを前提としています。 まだプロジェクトが作成されていない場合は、下記のように wrangler コマンドでプロジェクトを作成してください。
Cloudflare Workers プロジェクトの作成 $ wrangler init hello-worker $ cd hello-worker KV namespace の作成 KV にデータを保存するためには、まずは key &amp;amp; value の入れ物である KV namespace を作成する必要があります。 アカウント内に KV namespace を作成するには、wrangler kv namespace create コマンドを使います。 ここでは、単純に KV という名前の KV namespace を作成してみます。
KV namespace の作成 $ wrangler kv namespace create KV .</description></item><item><title>Cloudflare Workers で作成した Web API に API キーによるアクセス制限をかける</title><link>https://maku.blog/p/u6w6fq4/</link><pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate><guid>https://maku.blog/p/u6w6fq4/</guid><description>Cloudflare Worker で作成した Web API を公開するときに、固定の API キーによるアクセス制限をかける方法です。 独自サービス用のバックエンド API など、一般公開しない API の実装で使うことを想定しています。
準備 プロジェクトの作成 Cloudflare Workers のプロジェクトをまだ作っていないときは、wrangler を使って作成 しておきます。
プロジェクトを作成 $ wrangler init hello-api $ cd hello-api API キーを生成して登録する アクセス制御用の独自の API キーを用意して、それを Workers に登録して使います。 次のように、ランダムな文字列を生成して API キーにしてしまえばよいです。 自分で考えた文字列でも構いませんが、第三者が想像しにくい文字列にしてください。
ランダムな API キーを生成 $ openssl rand -base64 32 mmdkR+mMvBUnYeu2sn1kMqlXjK9Q4A0Os3I4M4aiMQs= 用意した API キーは、サーバー側の API_KEY という環境変数にセットすることにします。 開発サーバー用の環境変数は .dev.vars ファイル、本番環境用の環境変数は wrangler secret コマンドで設定します。
.dev.vars（ローカル環境用のシークレット設定） API_KEY=&amp;#34;mmdkR+mMvBUnYeu2sn1kMqlXjK9Q4A0Os3I4M4aiMQs=&amp;#34; Cloudflare Workers 用のシークレット設定 $ wrangler secret put API_KEY Enter a secret value: ********************** これらの値は、Workers のプログラム内で env.</description></item><item><title>Cloudflare Workers と Hono で軽量な Web API を作る</title><link>https://maku.blog/p/33cc7jy/</link><pubDate>Sat, 11 Jan 2025 00:00:00 +0000</pubDate><guid>https://maku.blog/p/33cc7jy/</guid><description>参考: Cloudflare Workers をはじめる (wrangler) Hono とは Hono は、Cloudflare Workers で使える Web アプリ用のフレームワークで、軽量な Web API を実装するときに便利です。 Node.js の Express に似た API を提供しており、ルーティングやミドルウェアを少ないコードで実装することができます。 Cloudflare Workers の Runtime API だけでも Web API を実装できますが、Hono を使うとよりシンプルなコードで実装できます。
☝️ Cloudflare Workers ≠ Node.js JavaScript のランタイム環境としては Node.js が有名ですが、Cloudflare Workers は V8 エンジンをベースとした 独自の Workers ランタイム環境 です。 ローカルでの開発中には Node.js のツール群を使ったりするので余計に混乱しますが、デプロイするコードは Cloudflare Workers 上で動作することを意識して実装する必要があります。 具体的には、Node.js の Runtime API は使えず、Cloudflare Workers の Runtime API を使う必要があります（参考: Workers - Node.js compatibility）。 Hono はもともと Cloudflare Workers 上で動作させることを考えて作られているので安心して使えます。 Web 標準機能を使った実装をウリにしており、Deno Deploy、AWS Lambda など他の環境でも動かすことができます。 Hono で Hello World Hono プロジェクトの作成 Hono 用のプロジェクトは npm create で作れるようになっているので、基本的にはこれを使ってサクッと作ります（参考: Hono - Getting Started）。</description></item></channel></rss>