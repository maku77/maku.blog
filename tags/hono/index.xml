<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hono on まくろぐ</title><link>https://maku.blog/tags/hono/</link><description>Recent content in Hono on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 13 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/hono/index.xml" rel="self" type="application/rss+xml"/><item><title>Cloudflare Workers で作成した Web API に API キーによるアクセス制限をかける</title><link>https://maku.blog/p/u6w6fq4/</link><pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate><guid>https://maku.blog/p/u6w6fq4/</guid><description>Cloudflare Worker で作成した Web API を公開するときに、固定の API キーによるアクセス制限をかける方法です。 独自サービス用のバックエンド API など、一般公開しない API の実装で使うことを想定しています。
準備 プロジェクトの作成 Cloudflare Workers のプロジェクトをまだ作っていないときは、wrangler を使って作成 しておきます。
プロジェクトを作成 $ wrangler init hello-api $ cd hello-api API キーを生成して登録する アクセス制御用の独自の API キーを用意して、それを Workers に登録して使います。 次のように、ランダムな文字列を生成して API キーにしてしまえばよいです。 自分で考えた文字列でも構いませんが、第三者が想像しにくい文字列にしてください。
ランダムな API キーを生成 $ openssl rand -base64 32 mmdkR+mMvBUnYeu2sn1kMqlXjK9Q4A0Os3I4M4aiMQs= 用意した API キーは、サーバー側の API_KEY という環境変数にセットすることにします。 開発サーバー用の環境変数は .dev.vars ファイル、本番環境用の環境変数は wrangler secret コマンドで設定します。
.dev.vars（ローカル環境用のシークレット設定） API_KEY=&amp;#34;mmdkR+mMvBUnYeu2sn1kMqlXjK9Q4A0Os3I4M4aiMQs=&amp;#34; Cloudflare Workers 用のシークレット設定 $ wrangler secret put API_KEY Enter a secret value: ********************** これらの値は、Workers のプログラム内で env.</description></item><item><title>Cloudflare Workers と Hono で軽量な Web API を作る</title><link>https://maku.blog/p/33cc7jy/</link><pubDate>Sat, 11 Jan 2025 00:00:00 +0000</pubDate><guid>https://maku.blog/p/33cc7jy/</guid><description>参考: Cloudflare Workers をはじめる (wrangler) Hono とは Hono は、Cloudflare Workers で使える Web アプリ用のフレームワークで、軽量な Web API を実装するときに便利です。 Node.js の Express に似た API を提供しており、ルーティングやミドルウェアを少ないコードで実装することができます。 Cloudflare Workers の Runtime API だけでも Web API を実装できますが、Hono を使うとよりシンプルなコードで実装できます。
☝️ Cloudflare Workers ≠ Node.js JavaScript のランタイム環境としては Node.js が有名ですが、Cloudflare Workers は V8 エンジンをベースとした 独自の Workers ランタイム環境 です。 ローカルでの開発中には Node.js のツール群を使ったりするので余計に混乱しますが、デプロイするコードは Cloudflare Workers 上で動作することを意識して実装する必要があります。 具体的には、Node.js の Runtime API は使えず、Cloudflare Workers の Runtime API を使う必要があります（参考: Workers - Node.js compatibility）。 Hono はもともと Cloudflare Workers 上で動作させることを考えて作られているので安心して使えます。 Web 標準機能を使った実装をウリにしており、Deno Deploy、AWS Lambda など他の環境でも動かすことができます。 Hono で Hello World Hono プロジェクトの作成 Hono 用のプロジェクトは npm create で作れるようになっているので、基本的にはこれを使ってサクッと作ります（参考: Hono - Getting Started）。</description></item></channel></rss>