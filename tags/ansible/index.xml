<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ansible on まくろぐ</title><link>https://maku.blog/tags/ansible/</link><description>Recent content in Ansible on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 29 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/ansible/index.xml" rel="self" type="application/rss+xml"/><item><title>Ansible とは？ Ansible をインストールする</title><link>https://maku.blog/p/m7ju6fq/</link><pubDate>Sat, 22 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku.blog/p/m7ju6fq/</guid><description>Ansible とは？ Ansible は、2012 年に Michael DeHaan 氏によって公開されたコンフィギュレーションツールです。 Ansible を実行するホスト自身の構成を行うこともできるし、複数のホストに対して一括して設定することもできます。 Chef や Puppet に比べて、導入や設定が容易という特徴があります。
類似ツールの比較 ツール名 公開日 作者 作成言語 構成管理ファイル Ansible 2012 年 Michael DeHaan 氏 Python 製 Playbook Chef 2009 年 Adam Jacob 氏 Ruby + Erlang 製 クックブック Puppet 2005 年 Luke Kanies 氏 Ruby 製 マニフェスト Ansible の特徴 ツール自体は Python で記述されています。 コントロールされる側のホスト（マネージドノード）には、Python と SSH さえ入っていればよく、導入が非常に容易です。コントロールする側のホスト（コントロールノード）から、SSH で Python スクリプトを流し込んで実行するという手法です。 複数のホストをプッシュ型でコントロールするので、大量のホスト（数千）の制御も問題なく行えます（複数のホストで並列にコンフィギュレーションが実行される）。ansible-pull というツールを導入すれば、プル型で動作させることも可能です（リモートホストがプロキシ環境内にある場合など）。 設定・構成情報は YAML 形式のテキストファイル (Playbook) で記述します。 Playbook で定義する各種処理（タスク）はモジュールによって提供されており、モジュール自身は様々な言語で実装することが可能 です（200 を超える組み込みモジュールは Python で記述されています）。 実行後の状態に関して冪等性（べきとうせい）が保証されており、何度実行しても同じ状態になるようになっています。Playbook には、「期待する状態」を「宣言的」に記載します。処理手順ではなく、目指すべき姿を定義するということです。 どのような環境でも実行可能な汎用的な Playbook を記述するというよりは、自分たちの組織用にカスタマイズされた Playbook を作成するという用途に向いています。たとえば、apt と yum のどっちのパッケージ管理ツールが使えるのかなどは意識して記述する必要があります。 Ansible の要件 VPS などのリモートサーバーを Ansible で制御できるようにするには、少なくとも対象のサーバー（マネージドノード）に SSH 接続できるようになっていて、Python がインストールされている必要があります。 これは、Ansible が SSH で Python スクリプトを流し込んで、ターゲット上で実行するという仕組みになっているからです。</description></item><item><title>Ansible で Hello World</title><link>https://maku.blog/p/uhu7hs4/</link><pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/uhu7hs4/</guid><description>インベントリーファイルを作る Ansible で制御したいホストは、インベントリーファイル (inventory file) に列挙しておく必要があります。 これは、想定外のホストを操作してしまうのを防ぐための安全策です。 デフォルトでは、インベントーリファイルとして /etc/ansible/hosts というファイルが読み込まれます。 コマンドラインオプション (-i) などで、読み込むファイルを指定する こともできます。
/etc/ansible/hosts（記述例） localhost 192.168.1.20 host.example.com インベントリーファイル内では、上記のように「ホスト名」や「IP アドレス」で制御対象のホスト (managed node) を列挙します。 ここでは、3 つのホストを Ansible のコマンド（ansible や ansible-playbook）で制御できるようにしています。 localhost 以外のホストは、SSH で接続できる状態になっている必要があります。
ansible コマンドで ping モジュールを実行してみる インベントリーファイルを用意したら、まずは制御対象のホストに ping を実行してみます。 ping は Ansible の組み込みモジュールとして提供されており、ターゲットホストへの接続確認のために使われます。 いわゆる Linux の ping コマンド (ICMP ping) ではないことに注意してください。
ローカルホストを制御する まずは、localhost に対して（自分自身を制御対象として）、ping を実行してみます。 制御対象とするホスト名は、ansible コマンドの第 1 パラメータで指定します。 次のように SUCCESS 表示が出れば成功です。
例: localhost に対して ping を実行 $ ansible localhost -c local -m ping localhost | SUCCESS =&amp;gt; { &amp;#34;changed&amp;#34;: false, &amp;#34;ping&amp;#34;: &amp;#34;pong&amp;#34; } Ansible はデフォルトで SSH 接続しようとするので、ローカルホストを制御対象とするときは -c local オプションを指定します。 -m ping オプションは、ping モジュールを使用してタスクを実行することを示しています。</description></item><item><title>Ansible で VPS を設定するための準備</title><link>https://maku.blog/p/2yahqx6/</link><pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2yahqx6/</guid><description>何をするか？ ConoHa VPS などの VPS を借りてサーバーをセットアップしようとすると、多くの手順が必要になります。 そんなとき、最初から Ansible で環境構築するようにしておけば、セットアップ手順を Ansible Playbook でドキュメント化することができ、サーバーの再構築が容易になります。
ここでは、初期状態の VPS サーバー（root 接続のみ可能な状態）に、ansible というユーザーを追加し、Ansible で VPS を制御するための環境を整えます。
前提条件 コントロールノード側（手元の PC）には、あらかじめ Ansible の実行環境がインストールされているものとします（参考: Ansible をインストールする）。 マネージドノード側（VPS サーバー）にはパスワードで SSH 接続することが可能で、Python3 の実行環境がインストールされているものとします。最新の Ubuntu であれば、これらのソフトウェアは最初から使えるはずです。 多くの場合、VPS を使い始めた直後は、root ユーザーで直接 SSH 接続できるようになっていると思います。 今回の手順で、Ansible による接続ができるようになった後は、SSH デーモンの設定を変更して、root ユーザーでの直接接続を禁止するようにしておくと安全です。 もちろん、この設定には Ansible を使うことができます。
セットアップの流れ ここでは、VPS に ansible というユーザーを作成し、Ansible で制御できるようにセットアップします。
VPS に ansible ユーザーを作成する ansible ユーザーを sudoers に登録する VPS に ansible ユーザーで SSH 接続できるようにする （おまけ）Ansible で SSH デーモンの設定を変更しておく root ユーザーで直接 SSH 接続すれば専用のユーザーを作成する必要はないのですが、それは sshd の運用上望ましくない ので却下とします。</description></item><item><title>Ansible 関連用語</title><link>https://maku.blog/p/a9twaog/</link><pubDate>Wed, 13 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/a9twaog/</guid><description>モジュール Ansible で使う機能の単位。例えば、ansible.builtin.systemd など。 プレイブック中の各プレイで指定するタスクリストは、モジュールを指定して定義していきます。 インベントリ コントロール対象とするマネージドノードの一覧ファイル。 INI 形式、あるいは YAML 形式で記述します。 シンプルに記述したければ INI 形式、階層構造を明確にしたければ YAML 形式を使います。 ホスト変数 インベントリで定義したホストに対して設定する変数。 インベントリファイルから分離して、host_vars ディレクトリ内の YAML ファイルに記述することもできます。 グループ変数 インベントリで定義したグループに対して設定する変数。 インベントリファイルから分離して、group_vars ディレクトリ内の YAML ファイルに記述することもできます。 インベントリプラグイン (inventory plugins) Ansible 本体にインベントリの機能を提供しているプラグイン。 INI ファイル用の ansible.builtin.ini や、YAML ファイル用の ansible.builtin.yaml などがあります。 他にも動的にインベントリを生成するものもあります。 参考: Index of all Inventory Plugins — Ansible Documentation プレイブック (playbook) マネージドノードに対する処理内容を YAML 形式で定義したもの。 プレイブックは、複数のプレイ (Play) で構成されており、プレイは複数のタスクで構成されています (Playbook ◇─ Play ◇─ Task)。 プラグイン Ansible 本体に対して機能を追加する仕組み。 参考: Indexes of all modules and plugins — Ansible Documentation ホスト / Host Ansible のコントロール対象となるリモートマシン。 ansible.</description></item><item><title>Ansible で facts 情報を表示する</title><link>https://maku.blog/p/zw7emu3/</link><pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/zw7emu3/</guid><description>Ansible の Playbook を実行すると、最初にリモートホストの情報 (Ansible facts) の収集が行われます。 ここには、OS の情報や IP アドレスの情報などが含まれており、タスクの中でこれらの情報を参照することができます。 実際に Ansible facts にどのような情報が含まれているかは、次のような Playbook で確認することができます。
show-facts.yml - hosts:allgather_facts:truetasks:- name:Show factsansible.builtin.debug:var:ansible_facts 実行結果（抜粋） TASK [Show facts] ********************************* ok: [example.com] =&amp;gt; { &amp;#34;ansible_facts&amp;#34;: { &amp;#34;all_ipv4_addresses&amp;#34;: [ &amp;#34;172.xxx.xx.xx&amp;#34;, &amp;#34;160.xxx.xx.xx&amp;#34; ], &amp;#34;all_ipv6_addresses&amp;#34;: [ &amp;#34;xxxx:xxxx:xxxx:xxx:xxx:xxx:xx:xx&amp;#34;, &amp;#34;xxxx::x:xxxx:xxxx:xxxx&amp;#34; ], ... ansible_facts 変数の値がからっぽになってしまう場合は、gather_facts: false と指定していないか確認してください。
ansible_facts オブジェクトの個々のプロパティを参照するには次のようにします。
- name:Show architectureansible.builtin.debug:msg:&amp;#34;Architecture: {{ ansible_architecture }}&amp;#34;</description></item><item><title>Ansible タスク例: ユーザーを特定のグループに参加させる (ansible.builtin.user)</title><link>https://maku.blog/p/s2fs5gs/</link><pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/s2fs5gs/</guid><description>Ansible の ansible.builtin.user モジュール を使用すると、ターゲットノード上に指定したユーザーを作成することができます。 このモジュールは、既存のユーザーの情報を変更する場合にも使えるので、例えば、あるユーザーを指定したグループに参加させる、といったことが可能です。
次の Playbook では、ユーザー maku をグループ docker に参加させています。 ユーザーが存在しない場合は、ユーザー自体の作成も行います。
- hosts:allbecome:truetasks:- name:Append the group &amp;#39;docker&amp;#39; to the user&amp;#39;s groupsansible.builtin.user:name:makugroups:[docker]append:yes注意点としては、groups でグループ名を列挙すると同時に、append: yes と指定するところです。 この指定により、ユーザー maku がすでに存在している場合に、現在のグループ情報はそのままで、追加で docker グループに参加するという意味になります。
逆に、純粋に docker グループにしか参加していないユーザーにしたいのであれば、append: yes の指定は省略して次のように記述すれば OK です（デフォルトは append: false です）。
ansible.builtin.user:name:makugroups:[docker]ユーザー名をハードコードするのではなく、SSH 接続しているカレントユーザーを対象にしてグループ参加させたいときは、ユーザー名として &amp;quot;{{ ansible_facts.env.SUDO_USER }}&amp;quot; を指定します。 これにより、sudo 実行前のユーザー名を取得できます。
- hosts:allgather_facts:truebecome:truetasks:- name:Append the group &amp;#39;docker&amp;#39; to the current user&amp;#39;s groupsansible.builtin.user:name:&amp;#34;{{ ansible_facts.env.SUDO_USER }}&amp;#34;groups:[docker]append:yes似たような変数に {{ ansible_user_id }} がありますが、この値は sudo した結果のユーザー名である root になるので注意してください（become: true していない場合は恐らく同じ値になります）。</description></item><item><title>Ansible タスク例: Docker と Docker Compose をインストールする</title><link>https://maku.blog/p/8k4j2gw/</link><pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/8k4j2gw/</guid><description>何をするか？ 下記の Docker のインストールマニュアルに従い、Ansible で Ubuntu 22.04 に Docker の実行環境をセットアップします。
Install Docker Engine on Ubuntu | Docker Documentation Playbook の例 次の YAML ファイルは、Docker の公式サイトのインストール手順をほぼそのまま Playbook 化したものです。 この Playbook を ansible-playbook で実行することで、Docker (+ Docker Compose) のインストール、および Docker デーモンの起動まで完了します。
install-docker.yml - hosts:allgather_facts:falsebecome:truetasks:- name:Install APT packages to use a repository over HTTPSansible.builtin.apt:pkg:- ca-certificates- curl- gnupg- lsb-releaseupdate_cache:yescache_valid_time:86400# cache for 1 day- name:Create APT&amp;#39;s keyrings directoryansible.builtin.file:path:/etc/apt/keyringsstate:directory- name:Add Docker&amp;#39;s official GPG keyansible.builtin.shell:cmd:curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.</description></item><item><title>Ansible タスク例: 任意のコマンドを実行する (ansible.builtin.command/shell)</title><link>https://maku.blog/p/ihqz7em/</link><pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ihqz7em/</guid><description>Ansible のターゲットノード上で任意のコマンドを実行するには、次のような組み込みモジュールを使用します。
ansible.builtin.command モジュール 任意のコマンドを実行します。 シェルを経由せず、指定したコマンドを直接実行するので、シェル特有の機能は使えません。 Windows の場合は代わりに ansible.builtin.win_command を使用します。 ansible.builtin.shell モジュール シェル (/bin/sh) で任意のコマンドを実行します。 シェルの機能（$HOSTNAME のような変数展開や * によるファイルグロブ、&amp;gt; によるリダイレクトなど）を使用することができます。 Windows の場合は代わりに ansible.builtin.win_shell を使用します。 command モジュールの基本 指定したコマンドを実行したいときは、command モジュールの cmd パラメーターでそのコマンド（と引数）を指定します。
- name:Run commandansible.builtin.command:cmd:cat /etc/hostname上記のような簡単なコマンドであれば、次のように省略して記述できます。
- name:Run commandansible.builtin.command:cat /etc/hostname実行するコマンドの引数として &amp;quot;user name&amp;quot; のようなスペースを含む値を渡したいときは、次のように argv を使ってコマンドと各引数を分割して指定します（この場合、cmd パラメーターは使用しません）。
- name:Run commandansible.builtin.command:argv:- /usr/bin/add_user_to_db.sh- user name- database nameファイルの有無で実行するかどうか制御する (creates/removes) command モジュールで指定したコマンドは、デフォルトで毎回実行されますが、creates および removes パラメーターを使用すると、特定のファイルの有無によってコマンドを実行するかしないかを制御することができます。
creates パラメーター creates パラメーターでファイル名を指定しておくと、そのファイルが存在しない場合だけタスクを実行します。 つまり、そのファイルを生成するようなコマンドを実行することを示唆します。
- name:Create an empty databaseansible.builtin.command:cmd:/usr/bin/make_database.shcreates:/path/to/databaseremoves パラメーター 逆に、特定のファイルが存在する場合だけコマンドを実行したいときは、removes パラメーターでそのファイル名を指定します。</description></item><item><title>Ansible タスク例: 空のディレクトリを作成する (ansible.builtin.file)</title><link>https://maku.blog/p/25gqyai/</link><pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/25gqyai/</guid><description>Ansible で空のディレクトリ作成するには、ansible.builtin.file モジュール の state パラメーターに directory を指定します。
空のディレクトリを作成する - hosts:allgather_facts:falsebecome:truetasks:- name:Create directoryansible.builtin.file:path:/var/cache/myappstate:directorypath パラメーターで指定したディレクトリ /var/cache/myapp を作成します。 すでにディレクトリが存在する場合は、このタスクはスキップされます。 ディレクトリは再帰的に作成されるので、深い階層のパスを指定しても大丈夫です（mkdir の -p オプションに相当）。
ディレクトリのパーミッションや所有者を指定する - hosts:allgather_facts:falsebecome:truetasks:- name:Create directoryansible.builtin.file:path:/var/cache/myappstate:directorymode:&amp;#34;0755&amp;#34;owner:myapp-usergroup:myapp-groupディレクトリ作成時のパーミッションは mode、所有ユーザーは owner、グループは group で指定することができます。 パーミッションは、0755 のような 8 進数指定の代わりに、u=rw,g=r,o=r のようなシンボリックモードでも指定可能です。</description></item><item><title>Ansible タスク例: 空のファイルを作成する (ansible.builtin.file)</title><link>https://maku.blog/p/uas9p6m/</link><pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/uas9p6m/</guid><description>Ansible で空のファイルを作成するには、ansible.builtin.file モジュール の state パラメーターに touch を指定します。 Linux の touch コマンドに相当する動きをするので、ファイルがなければ空のファイルを作成し、ファイルが存在する場合はタイムスタンプを更新する、という振る舞いになります。
空のファイルを作成する tasks:- name:Create fileansible.builtin.file:path:~/sample.txtstate:touch上記のようにすると、path で指定したファイルを作成します。 ファイルが既に存在する場合は、ファイルの中身は変更せずに、タイムスタンプを更新します。 つまり、このタスクはすでにファイルが存在する場合も実行されます（changed になる）。
タイムスタンプを更新しない - name:Create empty fileansible.builtin.file:path:~/sample.txtstate:touchaccess_time:preservemodification_time:preserveファイルがすでに存在する場合に、タイムスタンプを更新しないようにするには、access_time および modification_time パラメーターに preserve を指定します（両方とも指定する必要があります）。 この指定により、ファイルがすでに存在している場合は、このタスクはスキップされるようになります。</description></item><item><title>Ansible で SSH サーバーをセキュアにする (ansible.builtin.lineinfile, ansible.builtin.service)</title><link>https://maku.blog/p/hufvdta/</link><pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/hufvdta/</guid><description>SSH サーバーを安全に運用するには、いくつかのベストプラクティスがあります。 ここでは、root ユーザーでの SSH 接続を拒否 (PermitRootLogin no) する設定例を紹介します。
secure-sshd.yaml (Playbook) ---- hosts:allgather_facts:falsebecome:truetasks:- name:Prohibit root loginansible.builtin.lineinfile:path:/etc/ssh/sshd_configstate:presentregexp:&amp;#39;^PermitRootLogin &amp;#39;line:&amp;#39;PermitRootLogin no&amp;#39;notify:- Reload ssh daemonhandlers:- name:Reload ssh daemonansible.builtin.service:name:sshdstate:reloaded この Ansible Playbook では、次のようなことを行っています。
lineinfile モジュールで /etc/ssh/sshd_config の内容を修正する PermitRootLogin で始まる行が見つからない場合は、ファイルの末尾に PermitRootLogin no を追加する PermitRootLogin で始まる行が見つかった場合は、PermitRootLogin no に置換する（ただし、最初からその設定が記述されていたら何もしない） service モジュール で SSH デーモンに設定をリロードさせる この設定を行うと、root ユーザーでの SSH 接続ができなくなるので注意してください。 必ず、root ユーザー以外で SSH 接続できることを確認してから実行してください。</description></item><item><title>Ansible タスク例: APT パッケージをインストールする (ansible.builtin.apt)</title><link>https://maku.blog/p/efqyair/</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/efqyair/</guid><description>Debian 系の Linux ディストリビューション（Ubuntu など）では、パッケージ管理に APT を使用します。 Ansible 組み込みの ansible.builtin.apt モジュールを使用して、APT パッケージのインストールを行うことができます。
APK パッケージを 1 つインストールする - name:Install Apacheansible.builtin.apt:name:apache2state:presentupdate_cache:yesstate: present の指定はデフォルトなので省略できます。 update_cache: yes を指定しておくと、事前に apt update を実行してパッケージリスト情報を更新してくれます。 さらに、cache_valid_time: 3600 のように、キャッシュの有効期間（秒）を指定しておくこともできます。
複数のパッケージをインストールする - name:Install a list of packagesansible.builtin.apt:pkg:- git- iproute2- .</description></item><item><title>Ansible タスク例: UFW でファイアウォールを設定する (community.general.ufw)</title><link>https://maku.blog/p/evdubr7/</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/evdubr7/</guid><description>Ubuntu のファイアウォール（パケットフィルタ）設定には、UFW というツールが使用されています。
参考: Linux コマンド: ufw による Ubuntu のファイアウォール設定 Ansible の community.general.ufw モジュールを使用して UFW (Uncomplicated Firewall) の設定を行うことができます。 community.general コレクションは、Ansible のコミュニティパッケージをインストールした場合は標準でインストールされています。
UFW をインストールする UFW の設定は community.general.ufw モジュールで行うのですが、UFW の本体（ufw コマンド）はあらかじめ APT でインストールしておく必要があります。
- name:Install UFWansible.builtin.apt:name:ufwstate:presentupdate_cache:yesUFW を有効化する UFW をインストールしたら、有効化する必要があります。 次の例では、デフォルトポリシーを接続拒否 (deny) にして UFW を有効化しています。
- name:Enable UFWcommunity.general.ufw:state:enabledpolicy:deny特定ポートへのアクセスを許可する 次の例では、22 番ポート (SSH) と、80 番ポート (HTTP)、443 番ポート (HTTPS) へのアクセスを許可しています。
- name:UFW - Allow all access to tcp port 22 (SSH)community.general.ufw:rule:allowport:&amp;#39;22&amp;#39;proto:tcp- name:UFW - Allow all access to tcp port 80 (HTTP)community.</description></item><item><title>Ansible タスク例: Web からファイルをダウンロードする (ansible.builtin.get_url)</title><link>https://maku.blog/p/s9tctaq/</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/s9tctaq/</guid><description>参考: ansible.builtin.get_url module HTTPS でファイルをダウンロードする - name:Download foo.confansible.builtin.get_url:url:https://example.com/path/file.confdest:/etc/foo.confmode:&amp;#39;0440&amp;#39; パラメーターの説明: url &amp;hellip; （必須）ダウンロードするファイルの URL dest &amp;hellip; （必須）保存先の絶対パス。ディレクトリ名かファイル名。ディレクトリ名の場合は、ダウンロード元のファイル名が使われます。 mode &amp;hellip; （オプション）作成するファイルのモード (permission) dest で指定したファイルが既に存在する場合は、ダウンロードはスキップされます。 ただし、dest で指定したパスがディレクトリの場合は、ファイルは毎回ダウンロードされてしまうので、dest ではファイルのパスを指定すべきです。 force: yes オプションを指定すると、ファイルは必ずダウンロードされます。
SSL エラーが発生する場合 Ubuntu の Docker イメージには CA 証明書がインストールされておらず、get_url モジュールで HTTPS アクセスしたときに次のように SSL 関連のエラーが出ることがあります。
Request failed: &amp;lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)&amp;gt; このような場合は、get_url の validate_certs: no オプションを指定して SSL 検証をスキップしてしまうこともできますが、次のように CA 証明書をインストールするのが正しい対処方法です。</description></item><item><title>Ansible タスク例: when による Playbook の条件分岐</title><link>https://maku.blog/p/o4o7o6m/</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/o4o7o6m/</guid><description>コマンドが既に存在するかどうかチェックする 次の例では、docker コマンドが存在しない場合のみ、get-docker.sh スクリプトを実行して Docker をインストールしています。
- name:Check if docker command existsansible.builtin.shell:cmd:command -v dockerregister:docker_existsignore_errors:yes- name:Install Dockerwhen:docker_exists is failedansible.builtin.shell:cmd:sh ~/get-docker.shcommand -v &amp;lt;コマンド名&amp;gt; とすると、指定したコマンドがインストールされているときのみリターンコードが 0（成功）になることを利用しています。 この振る舞いは、次のように $?（リターンコード）の値を参照することで確かめられます。
$ command -v pwd pwd $ echo $? 0 （pwd コマンドは存在するのでリターンコードは 0） $ command -v hoge $ echo $? 1 （hoge コマンドは存在しないのでリターンコードは 1）</description></item><item><title>Ansible の SSH 接続で使用するユーザーと秘密鍵を指定する</title><link>https://maku.blog/p/n3jygwd/</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/n3jygwd/</guid><description>Ansible コマンド（ansible や ansible-playbook）でマネージドノードを制御するとき、デフォルトでは SSH ユーザーとしてコントロールノードのカレントユーザーが使用されます。 異なる SSH ユーザー（と秘密鍵）で接続したい場合は、コマンドライン引数やインベントリファイルで指定することができます。
コマンドライン引数で指定する方法 インベントリファイルで指定する方法 ansible.cfg でデフォルトユーザーを指定する方法 ~/.ssh/config で接続先ごとにユーザーを指定する方法 コマンドライン引数で SSH ユーザーを指定する方法 ansible-playbook コマンドの、-u (--user) オプションと --private-key オプションで、SSH 接続に使用するユーザー名と秘密鍵を指定することができます。
$ ansible-playbook -i hosts.ini site.yml -u maku --private-key ~/.ssh/maku/id_rsa インベントリファイルで SSH ユーザーを指定する方法 インベントリファイルで指定する場合は、ansible_user 変数と ansible_ssh_private_key 変数を使います。
hosts.ini（ホストごとに指定する場合） [servers] www1.example.com ansible_user=maku ansible_ssh_private_key_file=~/.ssh/maku/id_rsa www2.example.com ansible_user=maku ansible_ssh_private_key_file=~/.ssh/maku/id_rsa hosts.ini（グループ単位で指定する場合） [servers] www1.example.com www2.example.com [servers:vars] ansible_user=maku ansible_ssh_private_key_file=~/.ssh/maku/id_rsa YAML 形式でインベントリファイルを記述する場合も、同様の変数で設定できます。
hosts.yml all:hosts:www1.example.com:www2.example.com:vars:ansible_user:makuansible_ssh_private_key_file:~/.ssh/maku/id_rsa ~/.ssh/config で接続先ごとにユーザーを指定する方法 インベントリファイルに SSH のユーザー名や秘密鍵のパスを記述するのが煩わしいときは、SSH クライアントの設定ファイル (~/.</description></item><item><title>Docker コンテナで Ansible のテストベッド環境を用意する</title><link>https://maku.blog/p/csctaq7/</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/csctaq7/</guid><description>何をするか ansible-playbook を使って何らかの Linux 環境のセットアップを自動化するとき、Playbook のテスト用に使い捨ての Docker コンテナ（テストベッド環境）があると便利です。
Ansible には、Playbook 実行後の冪等性を保つという性質がありますが、一度 Playbook を実行してしまうと元の状態に戻すことはできません。 一方通行の冪等性はあっても、可逆性はないということですね。 Playbook を試行錯誤して作っている段階では、何度も ansible-playbook を実行することになるので、本当にその Playbook がまっさらな状態の OS に対して適用できるのか不安になってきます（冪等性があるので理論的には動作するはずですが）。 異なるディストリビューションに対して実行できるのか試したくなることもあります。
ここでは、Ansible のテストベッド環境として Docker コンテナを作成し、各種 Ansible コマンド (ansible / ansible-playbook) で制御してみます。
テストベッド用のコンテナを起動する Ansible は一般的にはマネージドノードに SSH 接続して Playbook を実行しますが、実は Docker コンテナに直接接続することもできます。 つまり、テストベッド用の Docker コンテナには、sshd (OpenSSH) などのサービスをわざわざインストールする必要はありません。
ただし、Ansible マネージドノードの要件として、Python3 だけはインストールしておく必要があります。 次の Dockerfile では、Ubuntu を親イメージとして、Python3 だけ追加しています。
Dockerfile FROMubuntu:22.04# Python3 のインストールRUN apt update &amp;amp;&amp;amp; apt install --no-install-recommends -y python3 Dockerfile をビルドして、testbed イメージを作成します。</description></item><item><title>Docker で Ansible の実行環境用のコンテナを作成する</title><link>https://maku.blog/p/euevcs8/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/euevcs8/</guid><description>何をするか？ Ansible の実行環境は Python がインストールされている環境であれば比較的簡単にインストールできますが、Docker の実行環境があれば、ホスト環境に何もインストールせずに Ansible の実行環境を手に入れることができます（もちろんコンテナは作る必要はありますが）。
Docker Hub を見ると、Alpine Linux ベースの Ansible 実行環境用イメージ alpine/ansible があるようですが、ここでは Dockerfile を使って自分でイメージを作成することにします。
Ansible 実行環境用イメージを作成する Dockerfile で Alpine Linux ベースの Ansible 実行環境を定義します。
Dockerfile FROMalpine:3WORKDIR/app# --no-cache を付けることで /var/cache/apk 以下にキャッシュが残るのを防ぐ# --update-cache を付けることで先に apk update するのと同じ効果になるRUN apk --no-cache --update-cache add ansible openssh sshpass APK (Alpine Package Keeper) で次のようなパッケージをインストールしています。
ansible &amp;hellip; Ansible Community パッケージ（ansible コマンドや ansible-playbook コマンドなど） openssh &amp;hellip; ssh コマンドのため sshpass &amp;hellip; ターゲットホストにパスワード認証 (--ask-pass) で接続するときのため Ansible Community パッケージ (ansible) ではなく、Ansible Core (ansible-core) を使うようにすれば、イメージサイズは 500MB 弱から 80MB 程度に削減できますが、サイズを気にしなくてよいなら Ansible Community パッケージを使っておいた方が楽です。</description></item><item><title>Ansible モジュールのヘルプを表示する (ansible-doc)</title><link>https://maku.blog/p/xx7enu3/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/xx7enu3/</guid><description>ansible-doc コマンドを使うと、Ansible モジュールのドキュメントを表示することができます。
ping モジュールのドキュメントを表示 $ ansible-doc ping &amp;gt; ANSIBLE.BUILTIN.PING (/Users/maku/Library/Python/3.10/lib/python/site-packages/ansible/modules/ping.py) A trivial test module, this module always returns `pong&amp;#39; on successful contact. It does not make sense in playbooks, but it is useful from `/usr/bin/ansible&amp;#39; to verify the ability to login and that a usable Python is configured. This is NOT ICMP ping, this is just a trivial test module that requires Python on the remote-node. For Windows targets, use the [ansible.</description></item><item><title>Ansible の ansible.cfg ファイルの検索順序</title><link>https://maku.blog/p/pamv6gq/</link><pubDate>Sun, 23 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku.blog/p/pamv6gq/</guid><description>Ansible の実行環境が参照する設定ファイル (ansible.cfg) は、下記のようなパスから検索されます。
環境変数 ANSIBLE_CONFIG で指定されたファイル ansible.cfg（カレントディレクトリ以下のファイル） ~/.ansible.cfg（ホームディレクトリ以下のファイル） /etc/ansible/ansible.cfg Git などで管理する場合は、Playbook の近くに一緒に入れておくとわかりやすいです（上記の 2 番目の方法）。</description></item><item><title>Ansible でインベントリーファイルの場所を指定する</title><link>https://maku.blog/p/eycnx9i/</link><pubDate>Sat, 22 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku.blog/p/eycnx9i/</guid><description>Ansible のコマンド（ansible や ansible-playbook）を実行すると、下記の順でインベントリーファイルが検索されます。
コマンドラインオプション -i で指定したファイル コンフィグファイル ansible.cfg 内の hostfile で指定したファイル（参考: ansible.cfg ファイルの検索パス） /etc/ansible/inventry 以下の例は、いずれもカレントディレクトリ内の hosts というファイルをインベントリファイルとして使用するように指定しています。
例: コマンドラインオプション (-i) で指定する方法 $ ansible myserver -i hosts -m ping 例: コンフィグファイル (ansible.cfg) で指定する方法 [defaults] hostfile = hosts</description></item></channel></rss>