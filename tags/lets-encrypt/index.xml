<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Let's Encrypt on まくろぐ</title><link>https://maku.blog/tags/lets-encrypt/</link><description>Recent content in Let's Encrypt on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sat, 03 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/lets-encrypt/index.xml" rel="self" type="application/rss+xml"/><item><title>Certbot で Let's Encrypt の SSL 証明書を取得する（Web サーバーの HTTPS 対応）</title><link>https://maku.blog/p/io4gs6h/</link><pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/io4gs6h/</guid><description>何をするか？ 数年前に Google が Web サイトの常時 SSL 化を推奨し始めて、今では多くの Web サイトが HTTPS によるアクセスに対応しています。 Web サーバーを HTTPS (SSL) 対応するには、第三者機関となる認証局 (CA: Certificate Authority) から SSL 証明書を発行してもらう必要があるのですが、Let&amp;rsquo;s Encrypt という認証局を使うと、SSL 証明書を無料で発行してもらえます（感謝！）。
図: Let&amp;#39;s Encrypt &amp;#43; Certbot による HTTPS 対応 レンタルサーバー側で提供されている WordPress 環境などを使用している人は、知らないうちに Let&amp;rsquo;s Encrypt を使った HTTPS 化の恩恵を受けているかもしれません。 ここでは、VPS などで自力で Web サーバーを立ち上げている人が、HTTPS (SSL) 対応する方法を説明します。
Let&amp;rsquo;s Encrypt からの SSL 証明書の発行には、Certbot というツールを使うのが一般的です。 Certbot による証明書取得や、Web サーバー (nginx) のヴァーチャルホスト設定をまとめて行ってしまう Docker イメージなども存在しますが、ここでは、Certbot の基本的な振る舞いを理解するために、certbot コマンドを直接実行する前提で説明していきます。
Certbot とは Certbot は、Let&amp;rsquo;s Encrypt 認証局から SSL 証明書を発行してもらうためのクライアントツールで、以下のような作業を自動で行ってくれます。</description></item><item><title>Let's Encrypt certificate expiration notice が来たら</title><link>https://maku.blog/p/cniq5vr/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/cniq5vr/</guid><description>Let&amp;rsquo;s Encrypt Expiry Bot からの証明書期限切れメール 2 ヶ月ほど前に、Sakura VPS レンタルサーバーを Let&amp;rsquo;s Encrypt で SSL 対応していたら、こんなメールが来ました。
Your certificate (or certificates) for the names listed below will expire in 20 days (on 10 Apr 19 07:02 +0000). Please make sure to renew your certificate before then, or visitors to your website will encounter errors.
We recommend renewing certificates automatically when they have a third of their total lifetime left. For Let&amp;rsquo;s Encrypt&amp;rsquo;s current 90-day certificates, that means renewing 30 days before expiration.</description></item><item><title>お名前.com の共用サーバーを Let's Encrypt で SSL 対応</title><link>https://maku.blog/p/s46j9sq/</link><pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/s46j9sq/</guid><description>Chrome で https に対応していない Web サイトにアクセスすると、アドレスバーに「保護されていない通信」という警告が出るようになりました。 Web サーバーの管理者は、https (SSL) への対応がほぼ必須になっています。 ここでは、お名前.com の共用サーバー（SD-11、SD-12 プランなど）で、SSL を有効にし、http によるアクセスがあったときに https なアドレスにリダイレクトする設定方法を説明します。
Let&amp;rsquo;s Encrypt による SSL 対応 お名前.com の共用サーバーで Web サイトを運用している場合は、下記のコントロールパネルからポチポチやるだけで、簡単に SSL (https) によるアクセスを有効にすることができます。
共用サーバーSD コントロールパネル https://cp.rentalserver.jp/ 自前の Web サーバで SSL 設定を行おうとすると、証明書の発行手続きや設定などが結構面倒ですが、このコンパネからポチポチやれば 1 分で設定完了です。 無料証明書で有名な Let&amp;rsquo;s Encrypt のサービスに対応しているので、無料で SSL 対応することができます。
http アクセスを https にリダイレクトする 数時間待って、無事 SSL の設定が反映されると、https:// によるウェブサイトへのアクセスが可能になります。 ただし、そのままだと古い http:// のサイトも残ったままです。
ここでは、Web サーバー (Apache) の設定ファイルである .htaccess を修正（なければ新規作成）することで http から https へのリダイレクト設定を行います。 ここでは、下記のような手順で修正することにしましょう。
sftp コマンドでサーバ上の .htaccess を取得（存在する場合のみ） ローカルで .</description></item><item><title>Sakura VPS レンタルサーバーを Let's Encrypt で SSL 対応</title><link>https://maku.blog/p/xkpjfcf/</link><pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/xkpjfcf/</guid><description>今更ですが、さくらインターネットでレンタルしている Sakura VPS の Web サーバーを SSL (https) に対応しました。 とりあえず今回は無料の Let&amp;rsquo;s Encrypt の証明書を、nginx サーバに設定します。
使っている OS が CentOS6 だったので、ついでに CentOS7 をクリーンインストールすることにしました。 といっても、さくらインターネットの VPS の設定画面でポチポチとやっていくだけ。 ここで、[public] CentOS_LetsEncrypt というスタートアップスクリプトを選んだら、自動的に SSL の証明書などの対応が完了します。 入力するパラメータはドメイン（example.com など）と連絡用のメールアドレスだけ。
Web サーバの nginx も自動的にインストールされて、Web サーバにアクセスできる状態で起動するのですが、nginx の設定は少しだけ調整する必要があります（ドキュメントルートなど）。
数分で OS の再インストールが完了し、下記のような nginx の設定ファイルが自動生成されていました（ドメイン名は example.com に置換してあります）。 SSL の設定も完了した状態になっています。
/etc/nginx/conf.d/https.conf map $http_upgrade $connection_upgrade { default upgrade; &amp;#39;&amp;#39; close; } server { listen 443 ssl http2; server_name example.com; location / { root /usr/share/nginx/html; index index.</description></item></channel></rss>