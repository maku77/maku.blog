<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VS Code on まくろぐ</title><link>https://maku.blog/tags/vs-code/</link><description>Recent content in VS Code on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 19 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/vs-code/index.xml" rel="self" type="application/rss+xml"/><item><title>VSCode の textlint プラグインで文章を校正する (vscode-textlint)</title><link>https://maku.blog/p/d3fs5gs/</link><pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/d3fs5gs/</guid><description>事前準備（textlint のインストール） vscode-textlint は、Visual Studio Code でテキスト校正ツールの textlint を実行するためのプラグインです。 プレーンテキスト (.txt) や、Markdown ファイル (.md) の校正を VSCode 上で実行できるようになります。 textlint の本体の方は、Node.js の npm コマンドを使ってあらかじめインストールしておく必要があります。
参考: textlint のインストールと基本的な使い方 こんな感じでインストールできます。
textlint 本体のインストール $ cd myproject # テキストファイルのあるディレクトリへ移動 $ npm init -y # package.json がない場合は作成 $ npm install -D textlint # textlint のインストール もし、既存のプロジェクトで、package.json や .textlintrc などがすでに存在しているのであれば、次のように実行すれば一発で textlint の実行環境が整います。
package.json に従って環境構築する場合 $ npm install vscode-textlint プラグインをインストールする vscode-textlint プラグインは、VS Code の Extensions タブから、textlint で検索してインストールすることができます。
vscode-textlint プラグインによる校正を実行する vscode-textlint プラグインは、VS Code で開いたディレクトリ内に設定ファイル .</description></item><item><title>VS Code の設定ファイルの場所 (settings.json)</title><link>https://maku.blog/p/tfq2cnw/</link><pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/tfq2cnw/</guid><description>ユーザー設定とワークスペース設定 VS Code の設定画面は Ctrl(Cmd) + , で起動できますが、ここで行った設定は、settings.json というユーザー設定ファイル（あるいはワークスペース設定ファイル）に保存されます。 このファイルの内容と設定画面の内容は連動しているので、設定はどちらで行ってもいいのですが、慣れてくると setttings.json を直接編集した方がすばやく設定を行えます。
ユーザー設定ファイル VS Code のユーザー設定ファイル (settings.json) は、OS ごとに下記のディレクトリに保存され、全ての VS Code インスタンス（ワークスペース）に共通の設定として使用されます。
OS ユーザー設定ファイルのパス Windows %APPDATA%\Code\User\settings.json macOS $HOME/Library/Application Support/Code/User/settings.json Linux $HOME/.config/Code/User/settings.json ワークスペース設定ファイル ワークスペースごとの設定は、プロジェクトのルートディレクトリの .vscode ディレクトリに保存されます。
&amp;lt;プロジェクトルート&amp;gt;/.vscode/settings.json ワークスペース設定は、前述のユーザー設定よりも優先されます（同じ設定項目の値が上書きされます）。 .vscode ディレクトリを Git にコミットしておけば、チーム内で VS Code の設定を共有できます。 .vscode ディレクトリには、プロジェクトのタスク設定ファイル (tasks.json) なども格納されます。
設定ファイルのサンプル settings.json ファイルの拡張子は .json ですが、JavaScript 形式のコメントを記述できるようになっています (JSON with Comments)。
settings.json の例 // Place your settings in this file to overwrite the default settings { &amp;#34;breadcrumbs.</description></item><item><title>VS Code を code コマンドで起動できるようにする</title><link>https://maku.blog/p/f5iv9kx/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/f5iv9kx/</guid><description>Windows のコマンドプロンプトや、macOS のターミナルから Visual Studio Code を開くには、code コマンドを使用します。
$ code . # ディレクトリを開く（通常はこれを使う） $ code sample.txt # ファイルを開く code コマンドが見つからない (command not found) と言われる場合は、VS Code から次のように実行することで実行できるようになります。
Cmd + Shift + P (Ctrl + Shift + P) でコマンドパレットを開く shell と入力し、Shell Command: install 'code' command in PATH を選択する macOS の場合は、下記のコマンドへのシンボリックリンクとして、/usr/local/bin/code というファイルが作成されるようです。
/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code</description></item><item><title>VS Code で Markdown ファイルのプレビューを表示する</title><link>https://maku.blog/p/ornz2yx/</link><pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ornz2yx/</guid><description>図: VSCode の Markdown プレビュー表示 Visual Studio Code で Markdown ファイルのプレビュー表示を行うには、F1 キー（あるいは Ctrl + Shift + P) でコマンドパレットを開き、Markdown メニューから Open Preview を選択します。
次のように、新しいタブで開くか、左右に分割して表示するかを選択できます。
プレビューを新しいタブで表示: Markdown: Open Preview プレビューを左右分割して表示: Markdown: Open Preview to the Side Markdown ファイルを編集中に右上に表示される「プレビューボタン」を押すことでも、プレビューを表示することができます（こっちのが早いかも）。
図: VSCode の分割プレビューボタン 1 文字入力するごとにリアルタイムにプレビュー更新してくれるので気持ちよく作業できます。 フロントマターを解析してプレビュー表示してくれないなどの欠点はありますが、きっと近いうちに拡張されて表示できるようになると思います。</description></item><item><title>TypeScriptの環境: Visual Studio Code で TypeScript の開発環境を構築する</title><link>https://maku.blog/p/ak7u3h3/</link><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ak7u3h3/</guid><description>はじめに TypeScript は Microsoft が開発している言語で、同じく Microsoft が開発している IDE である Visual Studio Code（以下 VS Code）が TypeScript コードの編集に適しています。
VS Code による TypeScript の開発環境を構築するには、下記をインストールする必要があります。
Visual Studio Code Node.js（npm コマンド） TypeScript（tsc コマンド) 開発環境をインストールする Visual Studio Code のインストール VS Code は下記からインストーラーをダウンロードしてインストールできます。
Download Visual Studio Code TypeScript のソースコード (.ts) ファイルは、単純なテキストエディタでも編集できますが、この VS Code を使って編集すると、プロパティ名の自動補完などができて効率的に開発を行えます。
コマンドラインから code と入力して、VS Code を起動できるようになれば OK です。 VS Code をインストールしたのに code コマンドが認識されない場合は、こちらの記事 を参考にしてパスを通してください。
Node.js のインストール TypeScript のトランスパイラである tsc コマンドは、Node.js のパッケージとして提供されているため、先に Node.js をインストールしておく必要があります。 Node.js は下記からインストーラーをダウンロードしてインストールできます。</description></item><item><title>VS Code のショートカットキーを使いこなす（ウィンドウ操作編）</title><link>https://maku.blog/p/as4cmu4/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/as4cmu4/</guid><description>ショートカットキーで Cmd になっているところは、Windows の場合は Ctrl に置き換えればほぼ動作します。 とりあえずは、サイドバーやターミナルパネルを On/Off する Cmd + B や Cmd + J から覚えて、画面を広く使えるようになりましょう。
アクティビティバー／サイドバーの操作 ショートカット 説明 Cmd + B サイドバー全体の表示／非表示 Cmd + Shift + E Explorer を開く Cmd + Shift + F(H) Search を開く（H なら置換モード） Ctrl + Shift + G Source Control を開く Cmd + Shift + D Debug を開く Cmd + Shift + X Extension を開く ターミナル／出力パネル 画面の下の方に表示されるターミナルなどのパネルを開くためのショートカットキーです。
ショートカット 説明 Cmd + J パネル全体の表示／非表示 Ctrl + ` Terminal パネルを開く Cmd + Shift + Y Debug Console パネルを開く Cmd + Shift + M Problem パネルを開く Cmd + Shift + U Output パネルを開く 外部コマンドを実行するときは、Terminal パネルを使用する代わりに、Cmd + Shift + C で OS 標準のターミナルを開くこともできます（Windows なら Ctrl + Shift + C でコマンドプロンプトが開きます）。</description></item><item><title>VS Code でビルドタスクやテストタスクを登録する (tasks.json)</title><link>https://maku.blog/p/zn2er4g/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/zn2er4g/</guid><description>タスク設定とは VS Code のビルドタスク設定 (tasks.json) をしておくと、 Cmd + Shift + B (Ctrl + Shift + B) というショートカットキーで、任意のビルドタスクを実行できるようになります。
「ビルド」タスクと言っていますが、実際には任意のコマンドを実行することができます。 例えば、Node.js アプリを起動するための npm start や、シェル上でのコマンドを素早く実行できるようになります。
ここでは、下記のようなコマンドを実行するタスクを VS Code に登録してみます。
npm start コマンド（Node.js アプリの起動） echo コマンド（Hello World と表示するだけ） サンプルアプリの準備 npm start で起動するサンプルアプリとして、簡単な Node.js アプリを作成しておきます。 プロジェクト用のディレクトリと package.json を作成し、VS Code で開きます。
$ mkdir myapp $ cd myapp $ npm init -y # package.json の生成 $ code . # VS Code で開く VS Code にプロジェクトとして認識させるには、ファイルではなくディレクトリを開く必要があることに注意してください。 VS Code が開いたら、Cmd + N で新しくエディタを開き、次のような内容の main.</description></item><item><title>VS Code で YAML ファイルをソートする（YAML Sort 拡張）</title><link>https://maku.blog/p/2apzood/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2apzood/</guid><description>YAML Sort の概要 VS Code に YAML Sort 拡張 をインストールすると、YAML ファイルの内容をキー名でソートすることができます。 主にソート用に使うものですが、YAML フォーマッターとしても利用できます。 次のような簡単なカスタマイズを行うこともできます。
指定したキーを優先的に上から並べる 1 階層目の各キーの間に空白行を入れる 配列要素をソートする YAML Sort の使い方 YAML Sort のページで Install ボタンを押すだけで、VS Code への拡張のインストールは完了です。 ここでは、次のような YAML ファイルをソートしてみます。
sample.yml（ソート前） root2: ccc: 300 aaa: 100 bbb: 200 root1: fruits: - grape - apple - banana animals: [&amp;#39;wolf&amp;#39;, &amp;#39;fox&amp;#39;, &amp;#39;dolphin&amp;#39;, &amp;#39;eagle&amp;#39;] VS Code で YAML ファイルを開いた状態で、コマンドパレットを開いて (Ctrl/Cmd + Shift + P)、YAML Sort: Sort YAML を選択すると、YAML ファイルの内容がソートされます。
sample.yml（ソート後） --- root1: animals: [&amp;#39;wolf&amp;#39;, &amp;#39;fox&amp;#39;, &amp;#39;dolphin&amp;#39;, &amp;#39;eagle&amp;#39;] fruits: - grape - apple - banana root2: aaa: 100 bbb: 200 ccc: 300 先頭行に自動でセパレーター (---) が挿入され、すべてのキーがアルファベット順にソートされていることが分かります。 キー間の空白行はすべて削除されています。 一方で、配列要素は自動ではソートされないようです（順番が意味を持つことがあるので当然ですが）。</description></item><item><title>VS Code で Python 用のフォーマッター (Black) を使う</title><link>https://maku.blog/p/4oybku6/</link><pubDate>Sat, 13 Nov 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/4oybku6/</guid><description>何をするか？ Visual Studio Code に Python 拡張 を入れることで、Python コードの編集（自動補完など）ができるようになりますが、コードの自動フォーマットを行うには、フォーマッターを別途インストールしておく必要があります（いろんなフォーマッターがあるため）。
Python のフォーマッターとしては、autopep8 や yapf などもありますが、ここでは、最近人気がある Black をインストールして VS Code の自動フォーマッターとして設定します。 Facebook や Dropbox、Mozilla などでも導入されており、採用実績としては申し分なさそうです。
☝️ 頑固なフォーマッター Black は自分自身を The uncompromising code formatter と説明しています。 ようするに、「私が定義する設定に従いなさい」という意味で、ユーザーにほとんど設定の余地を残していません（行の長さ程度は設定できます）。 このようにすることで、チーム内でのフォーマット論争を防ぐ効果があります。 TypeScript (JavaScript) でよく使われている Prettier フォーマッターも同様の思想で作られており、ほとんど設定ができないようになっています（こちらは opinionated という単語を使っています）。
参考: TypeScript コードを Prettier で自動整形する Black ではどのようなスタイルになるか？ インデントは スペース 4 文字 PEP 8 通り。 トップレベルのクラス定義や関数定義の間には 2 行の空白行 を入れる（クラス内のメソッド間は 1 行） PEP 8 通り。 1 行あたり最大 88 文字 まで PEP 8 は 79 文字と言っているが、それだと改行がたくさん入りすぎる傾向があるので、Black では 1 割増しの 88 文字にした。Raymond Hettinger の講演 Beyond PEP 8 でも 90 文字くらいがよいと指摘している。 文字列リテラルは ダブルクォートで囲む（Issue #51 などの議論を経てダブルクォートに落ち着いた。理由をまとめると以下のような感じ） PEP 257 で docstring はダブルクォートで囲むべしとされており、それに合わせるのが一貫性があってよい。PEP 8 では docstring 以外の文字列リテラルにシングルクォートを使っているが、バラバラにする理由がない。 空白文字列をシングルクォートで表現すると '' となって、フォントによっては判別しにくくなる。ダブルクォートであれば一目瞭然 (&amp;quot;&amp;quot;)。 ダブルクォートの中でシングルクォートを使うことはよくあるが（例: &amp;quot;don't&amp;quot;）、その逆は少ない。 UK レイアウトや German レイアウトのキーボードでは、&amp;quot; の入力は苦じゃないよ。シングルクォートの方が入力しやすければ、それで入力しておいて Black に &amp;quot; に変換させればよい。 文字列リテラルをシングルクォートで囲っている Python プロジェクトは多いので、Black が一貫してダブルクォートを採用しているところは要注意かもしれません。 ただ、上記のような理由を読むと、ダブルクォートを使う方が理にかなっているような気がします。</description></item><item><title>VS Code の Explorer で特定のファイルやディレクトリを非表示にする (files.exclude)</title><link>https://maku.blog/p/raku5dn/</link><pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/raku5dn/</guid><description>VS Code のエクスプローラービューは、サイドバー上にプロジェクト内のファイル一覧を表示してくれる便利な機能ですが、編集対象ではないファイルまで表示されていると地味に邪魔だったりします。 例えば、Node.js アプリの node_modules ディレクトリなどは常に表示されていてもあまり役に立たないかもしれません。
図: 不要なディレクトリが表示されている このような場合は、設定ファイル (settings.json) の files.exclude プロパティで非表示にしたいファイルやディレクトリのパターンを指定します。
settings.json { // Explorer で非表示にするもの &amp;#34;files.exclude&amp;#34;: { &amp;#34;**/.next&amp;#34;: true, // Next.js サーバーのキャッシュ &amp;#34;**/node_modules&amp;#34;: true, &amp;#34;out&amp;#34;: true // Next.js の export 先 }, // その他の設定... } 上記のようにパターンに out と指定すると、トップディレクトリの out という名前のファイルおよびディレクトリが非表示になります。 **/node_modules と指定すると、任意の階層の node_modules という名前のファイルおよびディレクトリが非表示になります。 末尾にスラッシュ (/) を付けるのは何も効果がないようです。 グロブパターン（** など）の詳細な指定方法は、Advanced search options のドキュメントが参考になります。
図: 指定したディレクトリが非表示になった ちなみに、デフォルト設定では次のようなファイルとディレクトリが非表示になります。
{ // Configure glob patterns for excluding files and folders. // For example, the file Explorer decides which files and folders // to show or hide based on this setting.</description></item><item><title>VS Code のフォーマッターで自動整形する (editor.formatOnSave)</title><link>https://maku.blog/p/qcoz9ju/</link><pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/qcoz9ju/</guid><description>VS Code には、標準で各種言語用のフォーマッターが搭載されており、JavaScript、TypeScript、JSON、HTML などのコードを自動整形することができます。
手動でフォーマッターを起動する ファイル全体をフォーマット (editor.action.formatDocument) コマンドパレット1 を使う場合: Format Document を選択 ショートカットキーを使う場合: (Windows) Shift + Alt + F (macOS) Shift + Option + F 選択中の行をフォーマット (editor.action.formatSelection) コマンドパレット1 を使う場合: Format Selection を選択 ショートカットキーを使う場合: (Windows) Ctrl + K → Ctrl + F (macOS) Cmd + K → Cmd + F ファイル保存時などに自動でフォーマットする 下記の設定をしておくと、ファイル保存時や、コードの編集中に自動的にフォーマッターを起動することができます。 設定ファイル (settings.json) の場所に関しては、こちらの記事 を参考にしてください。
全ての種類のファイルで自動フォーマットする場合 settings.json { // 自動フォーマット設定 &amp;#34;editor.formatOnSave&amp;#34;: true, // 保存時にフォーマット &amp;#34;editor.formatOnType&amp;#34;: true, // 入力中（改行時）にフォーマット &amp;#34;editor.formatOnPaste&amp;#34;: true, // ペースト時にフォーマット // その他.</description></item><item><title>MongoDB for VS Code で Azure Cosmos DB を操作する</title><link>https://maku.blog/p/dt3ahpw/</link><pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/dt3ahpw/</guid><description>Cosmos DB インスタンスを MongoDB API アクセス用に作成 しておくと、さまざまな MongoDB 用のツールでデータベースにアクセスできるようになります。 ここでは、VS Code 用の拡張「MongoDB for VS Code」を使って、Cosmos DB を操作できるようにしてみます。 TypeScript を使って Web アプリを作成しているときは、エディタとして VS Code を使っていることが多いでしょうから、同じ環境上で Cosmos DB を操作できると開発が捗ります。
MongoDB for VS Code のインストール 図: MongoDB for VS Code のインストール MongoDB for VS Code は、VS Code の Extesions バー (Cmd/Ctrl + Shift + X) で MongoDB で検索すれば簡単にインストールできます。
VS Code から Cosmos DB (MongoDB) に接続する 接続文字列で簡単接続 MongoDB for VS Code をインストールすると、サイドバーに 葉っぱのアイコン が出てくるので、ここから MongoDB サーバーに接続することができます。 ちなみに、MongoDB が葉っぱアイコンを使うのは、それを使うことが「シンプルで自然であるから」らしいです（じゃあ水でもいいじゃん、とは言いますまい）。</description></item><item><title>EditorConfig でコーディングスタイルを統一する</title><link>https://maku.blog/p/7aoa6x5/</link><pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/7aoa6x5/</guid><description>EditorConfig とは EditorConfig（.editorconfig ファイル）を導入すると、各種エディタ（Visual Studio、Android Studio、Vim など）に共通のコーディングスタイルを設定することができます。
ソフトウェア開発プロジェクトでは、通常なんらかのコーディングルールが決められています。 ただ、開発者ごとに使用するエディタ、IDE が異なると、設定方法を統一できないという問題が発生します。 EditorConfig は、特定のエディタに依存しない、コーディングスタイルを記述するためのフォーマット（およびツール群） です。
EditorConfig で設定可能な項目は、エンコーディング形式や改行コード、インデントサイズといったごく基本的な項目のみですが、最低限の記述スタイルをプロジェクト全体で素早く統一することができます。
EditorConfig の導入（.editorconfig ファイルの作成） EditorConfig の導入はとても簡単で、次のような設定ファイル (.editorconfig) をプロジェクトのルートに作成するだけです。
.editorconfig # ここが最上位の設定ファイル root = true # 全種類のテキストファイルの基本設定 [*] charset = utf-8 end_of_line = lf indent_size = 4 indent_style = space insert_final_newline = true trim_trailing_whitespace = true # あとは、ファイルの種類ごとに設定を上書き [*.{js,jsx,ts,tsx}] indent_size = 2 max_line_length = 80 [*.{kt,kts}] max_line_length = 100 [*.md] trim_trailing_whitespace = false [*.py] max_line_length = 80 [*.</description></item><item><title>VS Code で行末の空白（半角スペース）を自動で削除する (files.trimTrailingWhitespace)</title><link>https://maku.blog/p/j6jv7it/</link><pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/j6jv7it/</guid><description>Visual Studio Code で次のように設定しておくと、ファイル保存時に、行末の余計なスペースを自動で削除してくれます。
settings.json で設定する方法 settings.json { &amp;#34;files.trimTrailingWhitespace&amp;#34;: true, // ... } Markdown ファイル (.md) は、行末の 2 つのスペースが改行の意味を持っていたりします。 そのような場合はスペースが削除されてしまうと都合が悪いので、次のように言語別設定で markdown の場合のみ無効化しておきます。
{ &amp;#34;files.trimTrailingWhitespace&amp;#34;: true, &amp;#34;[markdown]&amp;#34;: { &amp;#34;files.trimTrailingWhitespace&amp;#34;: false }, // ... } 参考: settings.json について 設定画面で設定する方法 Ctrl + , で設定画面を開く（macOS の場合は Cmd + ,） trim で検索して Trim Trailing Whitespace にチェックを入れる</description></item><item><title>VS Code の Vim プラグインで OS のクリップボードと同期する (vim.useSystemClipboard)</title><link>https://maku.blog/p/tb6s2ck/</link><pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/tb6s2ck/</guid><description>Vim エディタ使いにとって、Visual Studio Code の Vim プラグイン はほぼ必須の機能になっています。
Vim - Visual Studio Marketplace デフォルトでは、y キーによるヤンクバッファ（Vim 用語では unnamed register）のコピーが、OS のクリップボードと同期されません。 次のように Vim プラグインの設定を行っておく、OS のクリップボードと同期してくれるようになります。
settings.json で設定する方法 settings.json { &amp;#34;vim.useSystemClipboard&amp;#34;: true, // OS のクリップボードと同期 // ... } 参考: settings.json について 設定画面で設定する方法 Cmd + ,（Windows では Ctrl + ,）で設定メニューを開く Vim: Use System Clipboard の項目にチェックを入れる これで、アプリ間をまたいだコピー＆ペーストを行うことができるようになります。</description></item></channel></rss>