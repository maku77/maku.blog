<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure Table Storage on まくろぐ</title><link>https://maku.blog/tags/azure-table-storage/</link><description>Recent content in Azure Table Storage on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Thu, 04 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/azure-table-storage/index.xml" rel="self" type="application/rss+xml"/><item><title>Azure Table Strage を使ってみる (1) テーブルの作成</title><link>https://maku.blog/p/xyzwod2/</link><pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/xyzwod2/</guid><description>ストレージアカウントを作成する Table Storage や BLOB Storage などの個々のストレージ系サービスは、ストレージアカウントに紐づく形で管理されます。 まずは、ストレージアカウントを作成しておく必要があります。
Azure のストレージアカウントを作成する Table Storage にテーブルを作ってみる テーブルの作成 上記で作成したストレージアカウントを選択し、Table Service → テーブル を選択し、作成 ボタンを押すと、Table Service 上に新しいテーブルを作成することができます。
ここでは、書籍を管理するための、books テーブルを作成してみました。
エンティティの追加 テーブルができたら、そこに適当にデータを追加していきます。 Table Strorage では、テーブル内の個々のデータのことを「エンティティ」と呼びます（RDB でいうレコードです）。
ストレージアカウントのメニューにある、「Storage Explorer」を使ってエンティティを追加できます。
「エンティティの追加」ダイアログが表示されるので、ここでエンティティの情報を入力していきます。 デフォルトでは、PartitionKey と RowKey というプロパティ（RDB でいうフィールド）が定義されていますが、本の情報を入力するために、タイトル (Title) と著者 (Author) のプロパティを追加しておきます。 プロパティ名は、C# の慣例に従って、単語の先頭を大文字で始める CamelCase で定義 しておくのがよいようです（C# から使うとは限らないのですが^^;）。
最初のデータとして次のように入力してます。
PartitionKey : book RowKey : 1 Title : まくの秘密 Author : まく PartitionKey と RowKey は、Table Storage がデフォルトで用意する文字列型プロパティで、これらを組み合わせたものがテーブル内でデータを一意に特定する情報になります（RDB のプライマリキーのようなもの）。 詳しくは後述しますが、ここでは単純に book というパーティション名を付けています。</description></item><item><title>Azure Table Strage を使ってみる (2) 接続情報（キー）を確認する</title><link>https://maku.blog/p/dofzeua/</link><pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/dofzeua/</guid><description>Table Storage サービスの ストレージアカウントを作成 すると、各種プログラムから Table Storage にアクセスするための接続情報（キー）を取得することができます。
Table Storage の接続情報は、Azure ポータル からストレージアカウントのリソースを開き、設定 → アクセスキー と辿ると確認することができます。
Python や Node.js などのプログラムから Azure Storage に接続するには、上の図の中の、
ストレージアカウント名 と キー のペア 接続文字列 のいずれかの情報が必要です。</description></item><item><title>Azure Table Strage を使ってみる (3) Python からテーブル操作してみる</title><link>https://maku.blog/p/o8ufwct/</link><pubDate>Wed, 29 Jan 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/o8ufwct/</guid><description>azure-cosmosdb-table パッケージのインストール Python から Azure Table Storage を操作するには、azure-cosmosdb-table というライブラリを使用します。
azure-cosmosdb-table のインストール $ pip install azure-cosmosdb-table ☝️ ワンポイント Cosmos DB をまったく使わない場合でも cosmosdb と名前のついたライブラリを使わせようとするのは、 Microsoft の策略 Cosmos DB に力を入れているという意思表示でしょう。 正直なところ Cosmos DB はお金がかかりすぎて個人の趣味レベルでは使えないのですが。。。
（追記: 2021年）CosmosDB に無料枠ができて少しずつ個人利用もできそうな感じになってきました。
TableService オブジェクトの生成 Azure Storage にアクセスするには、接続情報（ストレージアカウント名とキー）が必要になるので、Azure ポータル で確認しておいてください。
参考: Azure Storage の接続情報（キー）を確認する Table Storage にアクセスしてごにょごにょするには、TableService クラス のメソッドを使用します。 TableService のコンストラクタには、ストレージアカウント名とキーを渡します。
from azure.cosmosdb.table.tableservice import TableService STORAGE_NAME = &amp;#39;maku77storage&amp;#39; STORAGE_KEY = &amp;#39;XlgKN4Hv...(省略)...F55o3N9g==&amp;#39; table_service = TableService(account_name=STORAGE_NAME, account_key=STORAGE_KEY) ☝️ URL の指定は必要ない？ 接続先アドレス (URL) の構築は TableService クラスがよろしくやってくれるので、実装コードがとてもスッキリします。 ストレージアカウント名は Azure 内（世界中）で一意になっているので、ストレージアカウント名さえ指定すれば、Web API の URL も自動的に決まるということですね。 ストレージアカウントのキーを環境変数から取得する ストレージアカウントにアクセスするためのキー情報をスクリプト内にハードコーディングするのは望ましくないので、環境変数などから取得するようにしておくとよいでしょう。</description></item><item><title>Azure Table Strage を使ってみる (4) Node.js からテーブル操作してみる</title><link>https://maku.blog/p/ccoonon/</link><pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ccoonon/</guid><description>azure-storage パッケージのインストール Node.js から Azure Table Storage を操作するには、azure-storage というライブラリを使用します。 npm コマンドで簡単にインストールすることができます。
azure-storage のインストール $ npm install --save azure-storage 参考: npm によるパッケージのインストール | Node.js ノート TableService オブジェクトの生成 Azure Storage にアクセスするには、接続情報（ストレージアカウント名とキー）が必要になるので、Azure ポータル で確認しておいてください。
参考: Azure Storage の接続情報（キー）を確認する 接続情報としてデフォルトの環境変数を使用する Node.js から Table Storage を扱うには、azure-storage モジュールが提供する TableService クラス を使用します。 TableService のインスタンスは下記のように生成することができます。
const azure = require(&amp;#39;azure-storage&amp;#39;); const tableService = new azure.TableService(); 上記のように、TableService のコンストラクのパラメータを何も指定しないと、接続のために下記のような環境変数が参照されます。
AZURE_STORAGE_ACCOUNT &amp;hellip; Azure Storage の「ストレージアカウント名」 AZURE_STORAGE_ACCESS_KEY &amp;hellip; Azure Storage の「キー」 AZURE_STORAGE_CONNECTION_STRING &amp;hellip; Azure Storage の「接続文字列」 1 と 2 を両方とも設定するか、3 を設定しておけば Azure Storage にアクセスできるようになります。</description></item><item><title>Azure Table Stroage を使ってみる: TableService を Promise 化して使いやすくする</title><link>https://maku.blog/p/4m96s2r/</link><pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/4m96s2r/</guid><description>PromiseTableService クラスの概要 Node.js から Azure Table Storage を操作する場合は、azure-storage パッケージの TableService クラス を使用するのですが、このクラスは残念ながら Promise 対応 対応されておらず、旧式のコールバック形式での呼び出しが強制されます。
下記の azure-table-promise パッケージが提供している PromiseTableService クラスを使用すると、TableService を Promise 化して使用することができます。
azure-table-promise - npm パッケージ ちなみに、下記の Issue で公式パッケージの Promise 化の議論がされているのですが、TableService クラスはいまだに対応されてませんね（2020年6月現在）。
参考: Promise support · Issue #110 · Azure/azure-storage-node こういった対応は本家の方でサクッとやってくれれば 3rd パーティライブラリの乱立が防げるんですけどね。。。
PromiseTableService を使ってみる まず必要なモジュールをインストールします。 azure-storage は本家 Microsoft の TableService クラスを使うためのモジュールで、azure-table-promise がそれを Promise ラップするためのモジュールです。 ここでは TypeScript を使うので、Node.js 型定義もインストールしておきます。
npm モジュールのインストール $ npm install --save-dev @types/node $ npm install --save azure-storage $ npm install --save azure-table-promise 次の MyTableStorage クラスは、PromiseTableService を使って TableStroage から情報を取得するサンプルです。 コンストラクタで PromiseTableService インスタンスを生成し、getRandomMessage() メソッドで、randommessage テーブルの値をランダムに取得しています。</description></item></channel></rss>