<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS/Cognito on まくろぐ</title><link>https://maku.blog/tags/aws/cognito/</link><description>Recent content in AWS/Cognito on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><atom:link href="https://maku.blog/tags/aws/cognito/index.xml" rel="self" type="application/rss+xml"/><item><title>Amazon Cognito (1) サインイン可能な Web サイトを作る (Cognito User Pool)</title><link>https://maku.blog/p/pufs8kx/</link><pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/pufs8kx/</guid><description>Cognito とは？ Amazon Cognito は、各種アプリケーションにユーザーの概念を取り入れて、サインアップやサインインなどを行えるようにするサービスです（OpenID Connect 準拠の Identity Provider (IdP) のひとつです）。 Cognito は大きく下記の 2 つの機能から成ります。
ユーザープール: ユーザーを管理する。任意のアプリに、ユーザー登録（サインアップ）や、認証（サインイン）の機能を付けることができる。 ID プール: 上記の仕組みでサインインしたユーザーに対して、AWS サービスへのアクセス権限を付加する。 単純にユーザー管理だけをしたいのであれば、前者の「ユーザープール」の機能だけを使うことができます。 実際には、認証後に AWS のリソースにアクセスさせることが多いと思いますので、後者の「ID プール」の仕組みを使って IAM の権限割り当てを行うことになります。
認証の仕組みに関しては、5 万 MAU（月間アクティブユーザー）まで無料で使えるので、個人で作成しているアプリでも使いやすいと思います。 ただし、無料枠を超えると 1 ユーザーあたり 1 円くらいかかり、多要素認証などを使おうとするともう少しお金がかかります。 詳しくは、Cognito の料金）のページを参照してください。
通常、Web サイトに認証機能を付けたいと思うと、ユーザー管理の仕組みや、サインイン画面などの UI を作成する必要がありますが、Cognito はこれらをまとめて提供してくれます。 ここでは、Cognito のユーザープールの作成から、React アプリでの認証までを説明します。
Cognito にユーザープールを作成する 準備として、Cognito のユーザープールを作成しておきます。
Cognito のマネージメントコンソールにアクセス ユーザープールの管理 → ユーザープールを作成する を選択します ユーザー作成時の条件 (Attribute) などを設定して作成ボタンを押します プール名は、適当に myapp-test とでも付けておけば大丈夫です。 本番環境用のユーザープールと、開発／テスト用のユーザープールは分けて作っておくのがよいので、ここではサフィックスとして -test を付けておきました。 デフォルト設定でサクッと作成してしまうこともできるし、いろいろな条件（メールアドレス必須とかパスワード強度とか）を指定することもできます。 ここでは、とりあえずデフォルト設定で適当に作成してしまいましょう。 ユーザー名でなく、メールアドレスでもログインできるようにしたいときは、属性 (Attribte) のタブで、ユーザー名 - 検証済みの E メールアドレスでのサインインも許可 にチェックをいれておきます。</description></item><item><title>Amazon Cognito (2) サインイン後に AWS リソースへのアクセス権限を与える (Cognito Identity Pool)</title><link>https://maku.blog/p/3mx8hr2/</link><pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/3mx8hr2/</guid><description>何をやるか？ 参考: Amazon Cognito (1) サインイン可能な Web サイトを作る (with React) 上記記事では、Cognito のユーザープール機能を使って、Web サイトにサインイン（サインアップ）機能を付けるところまでを説明しています。 ここでは、さらに Cognito の ID プール機能を使い、認証後のユーザーに AWS リソースへのアクセス権限を割り当てる方法を説明します。
Amazon Cognito サービスは、大きくわけて下記の 2 つの機能を提供しています。
User Pool &amp;hellip; 認証 (Authentication) Identity Pool &amp;hellip; 認証後のユーザーに対する 認可 (Authorization) 「認証」の方は、Cognito の User Pool を使う方法以外にも、Amazon、Facebook、Google など、様々な認証サービス（これらを 認証プロバイダー (IdP) と呼びます）を使用することができますが、ここでは Cognito の User Pool でユーザー認証することを前提とします。
ここから先の説明は、「認可」に関しての説明になります。 Cognito Identity Pool は、何らかの認証プロバイダーによる認証済みユーザーに対して、IAM ロールを割り当てることによって、任意の AWS リソースへのアクセスを許可します。 また、認証していないユーザー（いわゆるゲストユーザー）に対して、リードオンリーな IAM ロールを割り当てたり、User Pool の方でユーザーをグループに登録しておいて、そのグループの IAM ロールをアクセス権限として割り当てるといったことも可能です。
ID プール（フェデレーティッドアイデンティティ） Cognito の ID プールを使うと、各種認証プロバイダーサービス（Cognito の場合は「ユーザープール」）でサインインしたユーザーに対して、AWS リソース（API Gateway や DynamoDB など）へのアクセス権限を割り当てることができます。 ざっくり言うと、ID プールは、ユーザーに対して IAM ロールを割り当てる仕組み です。</description></item><item><title>Amazon Cognito: Amplify SDK による認証まわりの UI 表示あれこれ</title><link>https://maku.blog/p/24p8jjx/</link><pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/24p8jjx/</guid><description>認証済みユーザーが admin グループに属しているか調べて UI を切り替える Cognito ユーザープールの「グループ」機能を使うと、既存のユーザーをグループ単位でまとめて、特別な IAM ロールを割り当てたりすることができます。 例えば、admin グループを作っておいて、そのグループに所属するユーザーに、DynamoDB の書き込み権限 (IAM role) を与える、といったことができます。
React アプリのレイヤでは、このような IAM ロールの権限うんぬんの前に、カレントユーザーがどのようなグループに所属しているかに応じて UI の表示分けをしたいことがあります。 例えば、admin グループのユーザーが Web ページを表示しているときは、管理者向けのメニュー表示をする、といったケースです。
幸い、aws-amplify モジュールの Auth オブジェクトが提供する認証情報を参照することで、認証済みのユーザーがどの Cognito グループに属しているかを調べることができます。 具体的には、Auth.currentAuthenticatedUser() などが返すユーザー情報のアクセストークンのペイロードに cognito:groups というプロパティがあり、そこに Cognito グループ名のリストが格納されています。
参考: Using the Access Token - Amazon Cognito 次のようなカスタムフック useAuthState を定義しておくと、戻り値の isAdmin プロパティを見るだけで、現在のユーザーが admin グループに属しているかを確認できます。
src/hooks/useAuthState.tsx import { useEffect, useState } from &amp;#39;react&amp;#39; import { Auth } from &amp;#39;aws-amplify&amp;#39; import { AuthState, CognitoUserInterface, onAuthUIStateChange, } from &amp;#39;@aws-amplify/ui-components&amp;#39; // ユーザーがこのグループ名の Cognito グループに所属しているときに、 // useAuthState フックが返す isAdmin プロパティを true にします。 const ADMIN_GROUP_NAME = &amp;#39;admin&amp;#39; /** useAuthState フックの戻り値の型 */ export type UseAuthStateOutput = { isSignedIn: boolean isAdmin: boolean user: CognitoUserInterface | undefined } /** 現在の認証状態を取得するためのフック関数です。 */ export const useAuthState = (): UseAuthStateOutput =&amp;gt; { // Cognito によるサインイン状態やユーザー情報を保持するステート const [authState, setAuthState] = useState&amp;lt;AuthState | undefined&amp;gt;() const [user, setUser] = useState&amp;lt;CognitoUserInterface | undefined&amp;gt;() useEffect(() =&amp;gt; { // 画面遷移時に onAuthUIStateChange が呼ばれないことへの対応 // https://github.</description></item><item><title>Amazon Cognito をコマンドライン (CLI) から操作する</title><link>https://maku.blog/p/yzjj4c7/</link><pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/yzjj4c7/</guid><description>AWS CLI による Cognito 操作用のコマンドには、cognito-idp と cognito-identity があります。
aws cognito-idp &amp;hellip; Cognito User Pools の操作（ユーザープール／ID プロバイダー） ユーザープール自体の作成や、ユーザーの追加・削除などを行えます。ユーザープールでの認証に成功すると、ユーザー情報を参照するためのトークンが発行されます。一般的にいうところの ID プロバイダー (IdP) です。 aws cognito-identity &amp;hellip; Cognito Federated Identities の操作（フェデレーテッドアイデンティティー／ID プール） 何らかの ID プロバイダー (IdP) で認証されたユーザーに対して、AWS サービスにアクセスするための一時的なアクセストークンを発行します。ID プロバイダーは上記の Cognito ユーザープールでもよいし、Google や Facebook などのサードパーティ ID プロバイダーでもかまいません。 ユーザープールの操作 (cognito-idp) aws cognito-idp のサブコマンドには、admin- プレフィックスが付くものと付かないバージョンがあったりしますが、プレフィックスがない方は、ユーザー認証後に取得できるトークンの指定 (--access-token) が必要です。
ユーザープールの一覧を取得する (cognito-idp list-user-pools) $ aws cognito-idp list-user-pools --max-results 10 実行例 UserPools:- CreationDate:&amp;#39;2020-10-20T16:56:45.</description></item><item><title>Go 言語と AWS SDK V2 で Amazon Cognito を操作する</title><link>https://maku.blog/p/nej9wjb/</link><pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/nej9wjb/</guid><description>ここでは、AWS SDK for Go V2 を使って、Go 言語から Amazon Cognito を操作するサンプルコードを示します。 Go 言語で AWS SDK を使うための開発環境 は構築済みとします。
指定したユーザープール内のユーザーリストを取得する (ListUsers) list_users.go package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;github.com/aws/aws-sdk-go-v2/aws&amp;#34; &amp;#34;github.com/aws/aws-sdk-go-v2/config&amp;#34; &amp;#34;github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider&amp;#34; ) var userPoolId = &amp;#34;ap-northeast-1_XXXXXXXXX&amp;#34; // ユーザープールの ID func main() { listUsers() } func listUsers() { client := cognitoidentityprovider.NewFromConfig(loadAwsConfig()) input := &amp;amp;cognitoidentityprovider.ListUsersInput { UserPoolId: &amp;amp;userPoolId, } output, err := client.ListUsers(context.TODO(), input) if err != nil { panic(err) } for _, user := range output.</description></item></channel></rss>