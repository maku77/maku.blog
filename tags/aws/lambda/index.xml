<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS/Lambda on まくろぐ</title><link>https://maku.blog/tags/aws/lambda/</link><description>Recent content in AWS/Lambda on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><atom:link href="https://maku.blog/tags/aws/lambda/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS CloudFormation で Lambda 関数のリソースを生成する</title><link>https://maku.blog/p/w8s8kx9/</link><pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/w8s8kx9/</guid><description>何をするか？ AWS CloudFormation を使うと Lambda 関数を含むインフラ（AWS リソース群）をまとめて生成することができますが、AWS CloudFormation の拡張である AWS SAM を使うと、もっと簡潔に Lambda 関数のリソースを生成することができます。
例えば、CloudFormation テンプレートの AWS::Lambda::Function リソースでは、Role プロパティが必須でしたが、SAM テンプレートの AWS::Serverless::Function リソースでは、Role プロパティはオプショナルになっています。 Role プロパティを省略すると、Lambda 関数に付けた論理 ID (Logical ID) をもとに、&amp;lt;論理ID&amp;gt;Role という名前のロールが自動生成されます。
ここでは、AWS SAM を使った Lambda 関数生成の基本として、次のようなパターンで CloudFormation スタックを生成してみます。
SAM テンプレートに関数コードを埋め込んでデプロイ S3 バケット上の関数の ZIP ファイルを使ってデプロイ SAM テンプレートに関数コードを埋め込んでデプロイ まずは、一番シンプルな例として、SAM テンプレート内に Lambda 関数の実装をハードコーディングしてしまい、それをデプロイ（CloudFormation スタックの生成）してみます。
下記が SAM テンプレートです。 SAM で Lambda 関数のリソースを定義するときは、リソースタイプとして AWS::Serverless::Function を指定します（CloudFormation では AWS::Lambda::Function です）。 ここでは関数の実装を InlineCode プロパティでハードコーディングし、単純な Hello World! メッセージをレスポンスとして返すようにしています。</description></item><item><title>AWS CloudFormation の設定例: Lambda 関数の設定いろいろ</title><link>https://maku.blog/p/pbo2dpy/</link><pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/pbo2dpy/</guid><description>タイムアウト時間 (Timeout) Lambda 関数のタイムアウト時間（最大実行可能時間）を設定するには、Timeout プロパティで秒単位の指定を行います。
例: タイムアウトを 15 秒にする AWSTemplateFormatVersion:&amp;#39;2010-09-09&amp;#39;Transform:AWS::Serverless-2016-10-31Resources:MyLambda:Type:AWS::Serverless::FunctionProperties:Runtime:nodejs14.xCodeUri:function.zipHandler:index.handlerTimeout:15 すべての Lambda 関数の Timeout 値をまとめて設定したいときは、Globals セクションを使います。
AWSTemplateFormatVersion:&amp;#39;2010-09-09&amp;#39;Transform:AWS::Serverless-2016-10-31Globals:Function:Runtime:nodejs14.xCodeUri:function.zipTimeout:15Resources:MyLambda1:Type:AWS::Serverless::FunctionProperties:Handler:index.handler1MyLambda2:Type:AWS::Serverless::FunctionProperties:Handler:index.handler2 環境変数 (Environment) Lambda 関数の中から参照可能な環境変数を設定するには、Variables プロパティに、キーと値のペアを指定します。 すべての Lambda 関数に共通で設定する環境変数は、Globals セクションで定義します。
Globals:Function:Environment:Variables:STAGE:ProductionTABLE_NAME:global-tableResources:MyFunction:Type:AWS::Serverless::FunctionProperties:Environment:Variables:TABLE_NAME:resource-tableNEW_VAR:hello トリガー設定 (Events) Lambda 関数を呼び出すためのトリガー（イベント）は、Events プロパティで定義できます。 Resouces プロパティと同様に、Events プロパティの一階層目にはイベントの論理 ID (Logical ID) を記述して、その下にそのイベントの設定を記述します。
Events プロパティの構成 Resources:MyFunction:Type:AWS::Serverless::FunctionProperties:Events:イベントの論理ID1:イベントの設定...イベントの論理ID2:イベントの設定... 一定時間ごとに呼び出す (Type: Schedule) Lambda 関数を一定時間ごとに呼び出したり、毎日決まった時刻に呼び出したりするには、Type: Schedule のイベントを設定します。 実際に生成される AWS リソースは EventBridge (CloudWatch Events) ルールです（リソースタイプは AWS::Events::Rule）。
次の例では、5 分おきに Lambda 関数を呼び出すように設定しています。
AWSTemplateFormatVersion:&amp;#39;2010-09-09&amp;#39;Transform:AWS::Serverless-2016-10-31Resources:HelloFunction:Type:AWS::Serverless::FunctionProperties:Runtime:python3.7Handler:index.handlerCodeUri:src/Events:MySchedule:Type:ScheduleProperties:Schedule:&amp;#39;rate(5 minutes)&amp;#39;# Schedule: &amp;#39;cron(0 * * * ?</description></item><item><title>AWS CloudFormation の設定例: Lambda 関数から S3 にアクセスできるようにする</title><link>https://maku.blog/p/dzdq3ep/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/dzdq3ep/</guid><description>CloudFormation (SAM) を利用して、Lambda 関数および S3 バケットを作成し、Lambda 関数から S3 バケットにアクセスできるようにポリシー設定するテンプレートの例です。 参考までに Lambda 関数の TypeScript コードも載せましたが、あくまで SAM テンプレートの記述例を示すことを目的としています。
SAM テンプレートの記述例 次の SAM テンプレートでは、AWS リソースとして S3 バケット (MyBucket) と Lambda 関数 (MyFunction) を定義しています。
template.yml AWSTemplateFormatVersion:&amp;#39;2010-09-09&amp;#39;Transform:AWS::Serverless-2016-10-31Resources:# S3 バケットの定義MyBucket:Type:AWS::S3::Bucket# Lambda 関数の定義MyFunction:Type:AWS::Serverless::FunctionProperties:Runtime:nodejs14.xHandler:build/index.handlerCodeUri:function.zipPolicies:- S3CrudPolicy:BucketName:!Ref MyBucketEnvironment:Variables:BUCKET_NAME:!Ref MyBucket S3 バケットは単純にスタック内に新規作成するだけなので、何もプロパティ設定していません。 ポイントは、Lambda 関数側のポリシー設定（Policies プロパティ）です。
Policies:- S3CrudPolicy:BucketName:!Ref MyBucket ここでは、AWS が標準で用意している S3CrudPolicy というポリシーを使っています。 このポリシーの BucketName パラメータとして、作成した S3 バケットの物理 ID (Physical ID) を渡すことで、Lambda 関数から S3 バケットの読み書き（CRUD 操作）が可能になります。 S3 バケットの Physical ID は、Ref 関数に Logical ID を渡すことで取得することができます。</description></item><item><title>AWS Lambda をコマンドライン (CLI) で操作する</title><link>https://maku.blog/p/n9nydjc/</link><pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/n9nydjc/</guid><description>Lambda 関数の一覧を取得する (lambda list-functions) $ aws lambda list-functions --max-items 10 関数名だけ取り出す $ aws lambda list-functions --max-items 10 --query &amp;#34;Functions[].FunctionName&amp;#34; Node.js 10 を使ってる関数の ARN を調べる $ aws lambda list-functions --function-version ALL --output text --query &amp;#34;Functions[?Runtime==&amp;#39;nodejs10.x&amp;#39;].FunctionArn AWS から来た「Node.js 10 のサポート切れるから乗り換えてね」というメール (2021-06-04) に書かれていたやり方です。
Lambda 関数の情報を取得する (lambda get-function) $ aws lambda get-function --function-name my-function 実行結果 { &amp;#34;Configuration&amp;#34;: { &amp;#34;FunctionName&amp;#34;: &amp;#34;my-function&amp;#34;, &amp;#34;FunctionArn&amp;#34;: &amp;#34;arn:aws:lambda:ap-northeast-1:123456789012:function:my-function&amp;#34;, &amp;#34;Runtime&amp;#34;: &amp;#34;nodejs12.x&amp;#34;, &amp;#34;Role&amp;#34;: &amp;#34;arn:aws:iam::123456789012:role/lambda-ex&amp;#34;, &amp;#34;CodeSha256&amp;#34;: &amp;#34;FpFMvUhayLkOoVBpNuNiIVML/tuGv2iJQ7t0yWVTU8c=&amp;#34;, &amp;#34;Version&amp;#34;: &amp;#34;$LATEST&amp;#34;, &amp;#34;TracingConfig&amp;#34;: { &amp;#34;Mode&amp;#34;: &amp;#34;PassThrough&amp;#34; }, &amp;#34;RevisionId&amp;#34;: &amp;#34;88ebe1e1-bfdf-4dc3-84de-3017268fa1ff&amp;#34;, .</description></item></channel></rss>