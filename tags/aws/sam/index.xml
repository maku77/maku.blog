<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS/SAM on まくろぐ</title><link>https://maku.blog/tags/aws/sam/</link><description>Recent content in AWS/SAM on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><atom:link href="https://maku.blog/tags/aws/sam/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS CloudFormation で Lambda 関数のリソースを生成する</title><link>https://maku.blog/p/w8s8kx9/</link><pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/w8s8kx9/</guid><description>何をするか？ AWS CloudFormation を使うと Lambda 関数を含むインフラ（AWS リソース群）をまとめて生成することができますが、AWS CloudFormation の拡張である AWS SAM を使うと、もっと簡潔に Lambda 関数のリソースを生成することができます。
例えば、CloudFormation テンプレートの AWS::Lambda::Function リソースでは、Role プロパティが必須でしたが、SAM テンプレートの AWS::Serverless::Function リソースでは、Role プロパティはオプショナルになっています。 Role プロパティを省略すると、Lambda 関数に付けた論理 ID (Logical ID) をもとに、&amp;lt;論理ID&amp;gt;Role という名前のロールが自動生成されます。
ここでは、AWS SAM を使った Lambda 関数生成の基本として、次のようなパターンで CloudFormation スタックを生成してみます。
SAM テンプレートに関数コードを埋め込んでデプロイ S3 バケット上の関数の ZIP ファイルを使ってデプロイ SAM テンプレートに関数コードを埋め込んでデプロイ まずは、一番シンプルな例として、SAM テンプレート内に Lambda 関数の実装をハードコーディングしてしまい、それをデプロイ（CloudFormation スタックの生成）してみます。
下記が SAM テンプレートです。 SAM で Lambda 関数のリソースを定義するときは、リソースタイプとして AWS::Serverless::Function を指定します（CloudFormation では AWS::Lambda::Function です）。 ここでは関数の実装を InlineCode プロパティでハードコーディングし、単純な Hello World! メッセージをレスポンスとして返すようにしています。
template.yml AWSTemplateFormatVersion: &amp;#39;2010-09-09&amp;#39; Transform: AWS::Serverless-2016-10-31 Description: Simple Lambda Function Resources: HelloFunction: Type: AWS::Serverless::Function Properties: Runtime: python3.</description></item><item><title>AWS CloudFormation で Lambda 関数のリソースを生成する</title><link>https://maku.blog/p/w8s8kx9/</link><pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/w8s8kx9/</guid><description>何をするか？ AWS CloudFormation を使うと Lambda 関数を含むインフラ（AWS リソース群）をまとめて生成することができますが、AWS CloudFormation の拡張である AWS SAM を使うと、もっと簡潔に Lambda 関数のリソースを生成することができます。
例えば、CloudFormation テンプレートの AWS::Lambda::Function リソースでは、Role プロパティが必須でしたが、SAM テンプレートの AWS::Serverless::Function リソースでは、Role プロパティはオプショナルになっています。 Role プロパティを省略すると、Lambda 関数に付けた論理 ID (Logical ID) をもとに、&amp;lt;論理ID&amp;gt;Role という名前のロールが自動生成されます。
ここでは、AWS SAM を使った Lambda 関数生成の基本として、次のようなパターンで CloudFormation スタックを生成してみます。
SAM テンプレートに関数コードを埋め込んでデプロイ S3 バケット上の関数の ZIP ファイルを使ってデプロイ SAM テンプレートに関数コードを埋め込んでデプロイ まずは、一番シンプルな例として、SAM テンプレート内に Lambda 関数の実装をハードコーディングしてしまい、それをデプロイ（CloudFormation スタックの生成）してみます。
下記が SAM テンプレートです。 SAM で Lambda 関数のリソースを定義するときは、リソースタイプとして AWS::Serverless::Function を指定します（CloudFormation では AWS::Lambda::Function です）。 ここでは関数の実装を InlineCode プロパティでハードコーディングし、単純な Hello World! メッセージをレスポンスとして返すようにしています。
template.yml AWSTemplateFormatVersion: &amp;#39;2010-09-09&amp;#39; Transform: AWS::Serverless-2016-10-31 Description: Simple Lambda Function Resources: HelloFunction: Type: AWS::Serverless::Function Properties: Runtime: python3.</description></item><item><title>AWS CloudFormation の設定例: Lambda 関数の設定いろいろ</title><link>https://maku.blog/p/pbo2dpy/</link><pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/pbo2dpy/</guid><description>タイムアウト時間 (Timeout) Lambda 関数のタイムアウト時間（最大実行可能時間）を設定するには、Timeout プロパティで秒単位の指定を行います。
例: タイムアウトを 15 秒にする AWSTemplateFormatVersion: &amp;#39;2010-09-09&amp;#39; Transform: AWS::Serverless-2016-10-31 Resources: MyLambda: Type: AWS::Serverless::Function Properties: Runtime: nodejs14.x CodeUri: function.zip Handler: index.handler Timeout: 15 すべての Lambda 関数の Timeout 値をまとめて設定したいときは、Globals セクションを使います。
AWSTemplateFormatVersion: &amp;#39;2010-09-09&amp;#39; Transform: AWS::Serverless-2016-10-31 Globals: Function: Runtime: nodejs14.x CodeUri: function.zip Timeout: 15 Resources: MyLambda1: Type: AWS::Serverless::Function Properties: Handler: index.handler1 MyLambda2: Type: AWS::Serverless::Function Properties: Handler: index.handler2 環境変数 (Environment) Lambda 関数の中から参照可能な環境変数を設定するには、Variables プロパティに、キーと値のペアを指定します。 すべての Lambda 関数に共通で設定する環境変数は、Globals セクションで定義します。
Globals: Function: Environment: Variables: STAGE: Production TABLE_NAME: global-table Resources: MyFunction: Type: AWS::Serverless::Function Properties: Environment: Variables: TABLE_NAME: resource-table NEW_VAR: hello トリガー設定 (Events) Lambda 関数を呼び出すためのトリガー（イベント）は、Events プロパティで定義できます。 Resouces プロパティと同様に、Events プロパティの一階層目にはイベントの論理 ID (Logical ID) を記述して、その下にそのイベントの設定を記述します。</description></item><item><title>AWS CloudFormation の設定例: Lambda 関数の設定いろいろ</title><link>https://maku.blog/p/pbo2dpy/</link><pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/pbo2dpy/</guid><description>タイムアウト時間 (Timeout) Lambda 関数のタイムアウト時間（最大実行可能時間）を設定するには、Timeout プロパティで秒単位の指定を行います。
例: タイムアウトを 15 秒にする AWSTemplateFormatVersion: &amp;#39;2010-09-09&amp;#39; Transform: AWS::Serverless-2016-10-31 Resources: MyLambda: Type: AWS::Serverless::Function Properties: Runtime: nodejs14.x CodeUri: function.zip Handler: index.handler Timeout: 15 すべての Lambda 関数の Timeout 値をまとめて設定したいときは、Globals セクションを使います。
AWSTemplateFormatVersion: &amp;#39;2010-09-09&amp;#39; Transform: AWS::Serverless-2016-10-31 Globals: Function: Runtime: nodejs14.x CodeUri: function.zip Timeout: 15 Resources: MyLambda1: Type: AWS::Serverless::Function Properties: Handler: index.handler1 MyLambda2: Type: AWS::Serverless::Function Properties: Handler: index.handler2 環境変数 (Environment) Lambda 関数の中から参照可能な環境変数を設定するには、Variables プロパティに、キーと値のペアを指定します。 すべての Lambda 関数に共通で設定する環境変数は、Globals セクションで定義します。
Globals: Function: Environment: Variables: STAGE: Production TABLE_NAME: global-table Resources: MyFunction: Type: AWS::Serverless::Function Properties: Environment: Variables: TABLE_NAME: resource-table NEW_VAR: hello トリガー設定 (Events) Lambda 関数を呼び出すためのトリガー（イベント）は、Events プロパティで定義できます。 Resouces プロパティと同様に、Events プロパティの一階層目にはイベントの論理 ID (Logical ID) を記述して、その下にそのイベントの設定を記述します。</description></item><item><title>AWS CloudFormation の設定例: Lambda 関数から S3 にアクセスできるようにする</title><link>https://maku.blog/p/dzdq3ep/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/dzdq3ep/</guid><description>CloudFormation (SAM) を利用して、Lambda 関数および S3 バケットを作成し、Lambda 関数から S3 バケットにアクセスできるようにポリシー設定するテンプレートの例です。 参考までに Lambda 関数の TypeScript コードも載せましたが、あくまで SAM テンプレートの記述例を示すことを目的としています。
SAM テンプレートの記述例 次の SAM テンプレートでは、AWS リソースとして S3 バケット (MyBucket) と Lambda 関数 (MyFunction) を定義しています。
template.yml AWSTemplateFormatVersion: &amp;#39;2010-09-09&amp;#39; Transform: AWS::Serverless-2016-10-31 Resources: # S3 バケットの定義 MyBucket: Type: AWS::S3::Bucket # Lambda 関数の定義 MyFunction: Type: AWS::Serverless::Function Properties: Runtime: nodejs14.x Handler: build/index.handler CodeUri: function.zip Policies: - S3CrudPolicy: BucketName: !Ref MyBucket Environment: Variables: BUCKET_NAME: !Ref MyBucket S3 バケットは単純にスタック内に新規作成するだけなので、何もプロパティ設定していません。 ポイントは、Lambda 関数側のポリシー設定（Policies プロパティ）です。</description></item><item><title>AWS CloudFormation の設定例: Lambda 関数から S3 にアクセスできるようにする</title><link>https://maku.blog/p/dzdq3ep/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/dzdq3ep/</guid><description>CloudFormation (SAM) を利用して、Lambda 関数および S3 バケットを作成し、Lambda 関数から S3 バケットにアクセスできるようにポリシー設定するテンプレートの例です。 参考までに Lambda 関数の TypeScript コードも載せましたが、あくまで SAM テンプレートの記述例を示すことを目的としています。
SAM テンプレートの記述例 次の SAM テンプレートでは、AWS リソースとして S3 バケット (MyBucket) と Lambda 関数 (MyFunction) を定義しています。
template.yml AWSTemplateFormatVersion: &amp;#39;2010-09-09&amp;#39; Transform: AWS::Serverless-2016-10-31 Resources: # S3 バケットの定義 MyBucket: Type: AWS::S3::Bucket # Lambda 関数の定義 MyFunction: Type: AWS::Serverless::Function Properties: Runtime: nodejs14.x Handler: build/index.handler CodeUri: function.zip Policies: - S3CrudPolicy: BucketName: !Ref MyBucket Environment: Variables: BUCKET_NAME: !Ref MyBucket S3 バケットは単純にスタック内に新規作成するだけなので、何もプロパティ設定していません。 ポイントは、Lambda 関数側のポリシー設定（Policies プロパティ）です。</description></item><item><title>AWS CloudFormation で DyanamoDB のリソースを作成する</title><link>https://maku.blog/p/h3gsjs2/</link><pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/h3gsjs2/</guid><description>SAM で簡単な DynamoDB テーブルを生成してみる DynamoDB のテーブルリソースも、Lambda 関数などのリソースと同様に AWS SAM で自動生成＆更新することができます。 CloudFormation のテンプレートをそのまま記述するより、拡張された SAM テンプレートの形式で記述することで、シンプルにリソースを定義することができます。
SAM テンプレート内で DynamoDB のテーブルを定義するときは、リソースタイプとして AWS::Serverless::SimpleTable を指定します（CloudFormation スタック内に実際に生成されるリソースのタイプは AWS::DynamoDB::Table になります）。
DynamoDB テーブルを作成するための最低限の SAM テンプレートはとてもシンプルです。 次の例では、MyTable という 論理 ID (Logical ID) で DynamoDB のテーブルを定義しています。 論理 ID はスタック内でリソースを特定するための名前です。
template.yml AWSTemplateFormatVersion: &amp;#39;2010-09-09&amp;#39; Transform: AWS::Serverless-2016-10-31 Description: My sample app Resources: MyTable: Type: AWS::Serverless::SimpleTable ひとつもプライマリキーを指定していませんが、その場合はデフォルトで id という名前のプライマリキー（String 型）が定義されます。 AWS CLI で次のように実行すると、CloudFormation のスタックを作成することができます。
$ aws cloudformation deploy --stack-name mystack \ --template-file template.yml CloudFormation スタック内に、実際にどのような AWS リソースが作成されたかを調べるには以下のようにします。 ここではリソースタイプと、その物理 ID (Pysical ID) を table 形式で出力してみました。</description></item><item><title>AWS CloudFormation で DyanamoDB のリソースを作成する</title><link>https://maku.blog/p/h3gsjs2/</link><pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/h3gsjs2/</guid><description>SAM で簡単な DynamoDB テーブルを生成してみる DynamoDB のテーブルリソースも、Lambda 関数などのリソースと同様に AWS SAM で自動生成＆更新することができます。 CloudFormation のテンプレートをそのまま記述するより、拡張された SAM テンプレートの形式で記述することで、シンプルにリソースを定義することができます。
SAM テンプレート内で DynamoDB のテーブルを定義するときは、リソースタイプとして AWS::Serverless::SimpleTable を指定します（CloudFormation スタック内に実際に生成されるリソースのタイプは AWS::DynamoDB::Table になります）。
DynamoDB テーブルを作成するための最低限の SAM テンプレートはとてもシンプルです。 次の例では、MyTable という 論理 ID (Logical ID) で DynamoDB のテーブルを定義しています。 論理 ID はスタック内でリソースを特定するための名前です。
template.yml AWSTemplateFormatVersion: &amp;#39;2010-09-09&amp;#39; Transform: AWS::Serverless-2016-10-31 Description: My sample app Resources: MyTable: Type: AWS::Serverless::SimpleTable ひとつもプライマリキーを指定していませんが、その場合はデフォルトで id という名前のプライマリキー（String 型）が定義されます。 AWS CLI で次のように実行すると、CloudFormation のスタックを作成することができます。
$ aws cloudformation deploy --stack-name mystack \ --template-file template.yml CloudFormation スタック内に、実際にどのような AWS リソースが作成されたかを調べるには以下のようにします。 ここではリソースタイプと、その物理 ID (Pysical ID) を table 形式で出力してみました。</description></item></channel></rss>