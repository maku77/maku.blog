<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>エディタ on まくろぐ</title><link>https://maku.blog/tags/%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF/</link><description>Recent content in エディタ on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Fri, 20 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF/index.xml" rel="self" type="application/rss+xml"/><item><title>EditorConfig でコーディングスタイルを統一する</title><link>https://maku.blog/p/7aoa6x5/</link><pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/7aoa6x5/</guid><description>EditorConfig とは EditorConfig（.editorconfig ファイル）を導入すると、各種エディタ（Visual Studio、Android Studio、Vim など）に共通のコーディングスタイルを設定することができます。
ソフトウェア開発プロジェクトでは、通常なんらかのコーディングルールが決められています。 ただ、開発者ごとに使用するエディタ、IDE が異なると、設定方法を統一できないという問題が発生します。 EditorConfig は、特定のエディタに依存しない、コーディングスタイルを記述するためのフォーマット（およびツール群） です。
EditorConfig で設定可能な項目は、エンコーディング形式や改行コード、インデントサイズといったごく基本的な項目のみですが、最低限の記述スタイルをプロジェクト全体で素早く統一することができます。
EditorConfig の導入（.editorconfig ファイルの作成） EditorConfig の導入はとても簡単で、次のような設定ファイル (.editorconfig) をプロジェクトのルートに作成するだけです。
.editorconfig # ここが最上位の設定ファイル root = true # 全種類のテキストファイルの基本設定 [*] charset = utf-8 end_of_line = lf indent_size = 4 indent_style = space insert_final_newline = true trim_trailing_whitespace = true # あとは、ファイルの種類ごとに設定を上書き [*.{js,jsx,ts,tsx}] indent_size = 2 max_line_length = 80 [*.{kt,kts}] max_line_length = 100 [*.md] trim_trailing_whitespace = false [*.py] max_line_length = 80 [*.</description></item><item><title>秀丸: カラーマーカーを設定してジャンプする</title><link>https://maku.blog/p/2bqp8i3/</link><pubDate>Thu, 14 Jul 2011 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2bqp8i3/</guid><description>秀丸のメニューから、その他 → キー割り当て で以下のような感じでショートカットキーを設定しておくと、任意の行にさくっとブックマークできるので便利です。
現在行をマーク/マーク解除 -- Alt+Ctrl+Right マーク一覧 -- Alt+Ctrl+Left マーク行の下検索 -- Alt+Ctrl+Down マーク行の上検索 -- Alt+Ctrl+Up あとは、以下のようにマークした行全体を強調するようにすると見やすくなります。
その他 → ファイルタイプ別の設定 → デザイン/表示 と辿る マークした行全体をカラー表示 にチェック</description></item><item><title>秀丸: 秀丸で OR 検索する (grep)</title><link>https://maku.blog/p/q5w35me/</link><pubDate>Mon, 18 Apr 2011 00:00:00 +0000</pubDate><guid>https://maku.blog/p/q5w35me/</guid><description>秀丸の検索 (grep) 機能で OR 検索をしたいときは、正規表現にチェックを入れて、以下のように検索する文字列を | で区切れば OK です。
Pattern A | Pattern B</description></item><item><title>秀丸: 日時挿入マクロ</title><link>https://maku.blog/p/a9u6j7f/</link><pubDate>Mon, 31 Jan 2005 00:00:00 +0000</pubDate><guid>https://maku.blog/p/a9u6j7f/</guid><description>カーソル位置に、2005-01-31 14:07:33 といった現在の日時を挿入するマクロです。
my_insert_datetime.mac //disableinvert; //disabledraw; call DayOfWeekStr; // 挿入用文字列を作成 #i = -1; #i = #i + 1; $str[#i] = year + &amp;#34;-&amp;#34; + month + &amp;#34;-&amp;#34; + day; #i = #i + 1; $str[#i] = year + &amp;#34;-&amp;#34; + month + &amp;#34;-&amp;#34; + day + &amp;#34; &amp;#34; + hour + &amp;#34;:&amp;#34; + minute; #i = #i + 1; $str[#i] = year + &amp;#34;-&amp;#34; + month + &amp;#34;-&amp;#34; + day + &amp;#34; &amp;#34; + hour + &amp;#34;:&amp;#34; + minute + &amp;#34;:&amp;#34; + second; #i = #i + 1; $str[#i] = year + &amp;#34;-&amp;#34; + month + &amp;#34;-&amp;#34; + day + &amp;#34; (&amp;#34; + $$return + &amp;#34;)&amp;#34;; #i = #i + 1; $str[#i] = year + &amp;#34;-&amp;#34; + month + &amp;#34;-&amp;#34; + day + &amp;#34; (&amp;#34; + $$return + &amp;#34;)&amp;#34; + &amp;#34; &amp;#34; + hour + &amp;#34;:&amp;#34; + minute; #i = #i + 1; $str[#i] = year + &amp;#34;-&amp;#34; + month + &amp;#34;-&amp;#34; + day + &amp;#34; (&amp;#34; + $$return + &amp;#34;)&amp;#34; + &amp;#34; &amp;#34; + hour + &amp;#34;:&amp;#34; + minute + &amp;#34;:&amp;#34; + second; // 表示用文字列を作成 #j = 0; while (#j &amp;lt;= #i) { $showstr[#j] = &amp;#34;&amp;amp;&amp;#34; + str(#j + 1) + &amp;#34; &amp;#34; + $str[#j]; #j = #j + 1; } menuarray $showstr, #i+1; #n = result; // result は 1 回しか参照できないので保存 (Ver 4.</description></item></channel></rss>