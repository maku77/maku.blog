<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>チャットボット on まくろぐ</title><link>https://maku.blog/tags/%E3%83%81%E3%83%A3%E3%83%83%E3%83%88%E3%83%9C%E3%83%83%E3%83%88/</link><description>Recent content in チャットボット on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 27 Mar 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/%E3%83%81%E3%83%A3%E3%83%83%E3%83%88%E3%83%9C%E3%83%83%E3%83%88/index.xml" rel="self" type="application/rss+xml"/><item><title>よいチャットボットとは？ボットを作成するときのベストプラクティス</title><link>https://maku.blog/p/o2nq2qa/</link><pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/o2nq2qa/</guid><description>とある事情によりチャットボットを作ろうという話になっています。 まずは、チャットボットってどんなことに気を付けて作ればよいかを調べたので、ポイントになりそうなことをまとめておきます。
下記の Microsoft が提供している Bot Framework のドキュメントがとても参考になりました。
参考: Principles of bot design - Bot Service | Microsoft Docs
チャットボットの知識は、今流行りのスマートスピーカー（Amazon Alexa や Google Home）などのスキルを作成する際にも応用がききそうです。 音声入力による会話は、チャットの特殊形態（キーボードやモニタがないときの手段）と考えることができるので、チャットボットの基本原則を押さえておくことはきっと参考になります。
チャットボットが目指すべきこと こだわるべき事 少ないステップで簡単に問題を解決できること 他の手段よりもチャットボットを使ったほうが速く、簡単で、よりよい結果を得られること ユーザが**使いたい環境（クライアント）**で動作すること ユーザがボットの存在に気付けること。それを使って何をすればよいのか気付けること 何より大切なのはユーザーエクスペリエンスです。 めっちゃ賢い AI を使っているかどうかではなく、ユーザがやりたいことを素早く、簡単に行えるかが重要です。
こだわらなくてよい事 機械学習は必須ではない。めっちゃ賢いボットは必須ではない。 完璧に自然言語を理解して会話できる必要はない。 ボイス対応により必ず UX が改善されるわけではない。ボイスを嫌うユーザはいるし、ノイズの多い環境では使えない。 大切なのは技術力とかクールさとかではなく、ユーザのやりたいことができることです。
最初の挨拶は「自然言語」か「メニュー選択」か？ どんな話しかけにも反応できるボットは存在しません（少なくとも現在は）。 ユーザは、ボットが何をできるのか知らないので、できることの選択肢を表示してあげるとよいです。
選択肢が少なければボタンを並べて、それを押すだけで会話を進められるようにすると、ユーザの入力の手間を大幅に削減することができます。 できることがたくさんあるのであれば、選択肢として「ヘルプ」ボタンを配置して、より詳しい使い方を提示してあげましょう。
図: 最初のメッセージの例 一般的に、自由回答形式の質問 (open-ended question) はユーザーの返答を予測できないので、選択回答形式の質問 (closed-ended question) を使用した方がボットの設計者にとっても望ましいといえます。 見栄を張ってどんな会話でもできる賢いボットを作ろうとするのではなく、できることを明確に示して上げたほうがユーザにとっても使いやすいボットができるでしょう。
プライバシーポリシーの表示 ユーザが「個人情報保護に関する方針と利用規約」(Privacy policy and terms of use) にアクセスできるようにしておくのが望ましいです。 特に、チャットボットサービスを介して個人情報を収集するのであれば、このような表示は必須になります。
会話 (Dialog) のスタック構造という罠 チャットボットのフレームワーク内部では、会話の流れは Dialog（会話）といった単位で管理されます。 一般的に、ユーザとの会話は、GUI アプリケーションのウィンドウと同様に、Dialog（会話）のスタック構造で管理されます。 つまり、ウィンドウを開いたり閉じたりするのと同様に、次の会話内容へ進んだり、前の会話内容へ戻ったりします。</description></item><item><title>チャットボット: Chatdown（.chat ファイル）を使ってボットの会話をデザインする</title><link>https://maku.blog/p/a6yzskr/</link><pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/a6yzskr/</guid><description>Chatdown フォーマットとは Chatdown フォーマットは、会話の設計をテキストベースで行うことを意図したフォーマットです。 拡張子は .chat で、下記のような感じで会話例を記述していきます。
sample.chat user=Joe bot=LulaBot bot: Hi! user: yo! bot: [Typing][Delay=3000] Greetings! What would you like to do? * update - You can update your account * List - You can list your data * help - you can get help user: I need the bot framework logo. 上記のように、チャットボットがタイプ中であることや、応答までのディレイなどもデザインすることができます。 Markdown 形式で書式設定できるようになっているのが Chatdown という名前の由来ですね。
Bot Framework Emulator で会話を再現する Bot Framework Emulator で会話ファイルを読み込むと、チャット UI 上で会話を再現することができます。 ただし、Emulator が読み込むことのできるファイルは .</description></item><item><title>LUIS (1) LUIS とは？</title><link>https://maku.blog/p/mkwnnsz/</link><pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/mkwnnsz/</guid><description>LUIS でできること Microsoft が提供している LUIS (Language Understanding Intelligent Service) サービスを使用すると、自然言語による文章（発話テキスト）を、コンピュータが理解しやすい形式に翻訳することができます。 主にチャットボットのバックエンドとして使用されることが想定されているようです。
LUIS (Language Understanding) - Cognitive Services - Microsoft Azure LUIS - Endpoint API メインのクエリ用 REST API LUIS - Authoring API アプリ管理用の REST API LUIS は、入力した発話テキストをインテントとエンティティに分解します。
インテント … 意図、目的。ユーザが何をしたいのかを表す。 エンティティ … 文章の中のプレースホルダに当たる部分の値。求めているものや、条件などを示す部分。 例えば、下記のような入力テキストがあったとすると、
15時から4人で使える部屋はない？ LUIS は次のようなインテント＋エンティティの情報に翻訳します。
インテント: SearchMeetingRoom エンティティ: Time=15時、People=4人 チャットボットのプログラムは、この翻訳された情報を見て、「ミーティングルームを探す」処理を、パラメータ「15時」、「4人」で行えばよいことになります。 LUIS は上記のような翻訳処理を行うためのサービスなので、その先のミーティングルームの検索処理などは独自に実装する必要があります。
LUIS の Web サイト上では、このような発話例 (Utterance) と、インテント、エンティティの情報を登録していくことで、モデルの学習を進めることができます。
LUIS のモデルを公開する LUIS ポータル上で作成した自然言語解析のモデルを、Web API (REST API) の形で使用できるようにするには、下記のようなステップを踏みます（QnA Maker のサービスと同様の手順です）。
Azure ポータルの リソースの作成 から Language Understanding (LUIS) のリソースを作成する LUIS ポータルで LUIS アプリ（モデル）を作成する（上記で作成した Azure の LUIS リソース経由でアクセスできるよう関連付ける） LUIS ポータルでモデルを Publish して REST API として呼び出せるようにする 上記のようにしてナレッジベースを公開すれば、Node.</description></item></channel></rss>