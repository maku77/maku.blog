<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MongoDB on まくろぐ</title><link>https://maku.blog/tags/mongodb/</link><description>Recent content in MongoDB on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 18 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/mongodb/index.xml" rel="self" type="application/rss+xml"/><item><title>MongoDB の特徴</title><link>https://maku.blog/p/xzc5z98/</link><pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/xzc5z98/</guid><description>MongoDB はオープンソースの NoSQL データベースで、MongoDB Inc.（旧 10gen）によって開発とサポートが行われています。
https://www.mongodb.com/ MongoDB は次のような特徴を持っています。
ドキュメント指向型のデータベースで、BSON 形式 (Binary JSON) でオブジェクトを格納する。 スキーマ定義が必要なく、データ構造が柔軟。 マスタ・スレーブ型のアーキテクチャを取り、書き込みはマスタノードに対してのみ、読み出しは複製されたスレーブノードからのみ行われる。非同期に複製が行われ、一時的に複数のデータバージョンが混在する可能性があるため、完璧な整合性が求められる用途には向かない。 バージョン 1.6 以降はレプリカ・セットという方式を採用し、プライマリ＆セカンダリの役割に基づいて複製制御が行われる。 MapReduce を使ったバッチ処理を利用できる。 セカンダリ・インデックスという機能により、複数の索引を使ってデータを検索できる。 RDB と比較して大量のデータを扱える。Mongo という名前は、英語の humongous（巨大な）から来ている。 JavaScript コードをストアド・プロシージャとして使用できる。</description></item><item><title>mongo シェルの基本的な使い方</title><link>https://maku.blog/p/pwx5kf7/</link><pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate><guid>https://maku.blog/p/pwx5kf7/</guid><description>MongoDB サーバーへの接続 mongo シェルで MongoDB サーバーへ接続するには次の用に実行します。 先に MongoDB サーバーを起動 しておく必要があります）。
$ mongo # 単純に接続する場合 $ mongo mydb # 使用するデータベース名を指定する場合 ポート番号（デフォルトは 27017）や接続先の IP アドレスを指定することもできます。 下記はすべて正しい接続方法です。
$ mongo --port 40001 $ mongo --port 40001 mydb $ mongo localhost:40001 $ mongo localhost:40001/mydb $ mongo 192.168.0.100 $ mongo 192.168.0.100/mydb $ mongo 192.168.0.100:40001/mydb ヘルプの表示 (help) mongo シェルを起動したあとに、help コマンドを実行するとヘルプを表示することができます。
&amp;gt; help db.help() help on db methods db.mycoll.help() help on collection methods sh.help() sharding helpers rs.</description></item><item><title>MongoDB サーバー (mongod) を起動する</title><link>https://maku.blog/p/3ucs8n3/</link><pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate><guid>https://maku.blog/p/3ucs8n3/</guid><description>MongoDB クライアント（mongo コマンドや Web アプリケーション）から MongoDB のデータベースにアクセスするには、あらかじめ MongoDB サーバー（mongod）を起動しておく必要があります。
MongoDB サーバーを起動する (mongod) MongoDB サーバーは、単純にコマンドラインから mongod と実行するだけで起動できます（Windows のサービスとして起動 しておくことも可能です）。 mongod コマンドを実行するときに、--dbpath オプションを使ってデータの格納先ディレクトリを指定することができます（デフォルトは /data/db）。 下記の例では、mydata ディレクトリをデータ格納先に指定しています。
MongoDB サーバーの起動 $ mkdir mydata $ mongod --dbpath mydata ログファイル名を指定する (&amp;ndash;logpath, &amp;ndash;logappped) MongoDB サーバーのログはデフォルトで標準出力に出力されますが、--logpath オプションを使って、出力先のログファイル名を指定することもできます。 さらに、--logappend オプションを指定すると、これまでのログに追記される形で書き込まれます（このオプションを付けないと、ログファイルが上書きされてしまいます）。
ログを log.txt に保存する $ mongod --dbpath mydata --logpath log.txt --logappend --dbpath にはディレクトリ名を指定しますが、--logpath にはファイル名を指定することに注意してください。
ポート番号を指定する (&amp;ndash;port) mongod が使用するデフォルトのポート番号は 27017 ですが、--port オプションを使用して、任意のポート番号で起動することができます。 ポート番号を変更しておけば、1 台のホスト上で複数の mongod を立ち上げることができます。
ポート番号 40001 で起動する $ mongod --dbpath mydata --port 40001 サーバー側のポート番号を変更した場合は、mongo クライアントを起動するときにも mongo localhost:40001/dbname や --port 40001 のようにポート番号の指定が必要になることに注意してください。</description></item><item><title>mongo シェルで JavaScript ファイル（スクリプト）を実行する</title><link>https://maku.blog/p/2thipwb/</link><pubDate>Mon, 31 Mar 2014 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2thipwb/</guid><description>例えば、input.js というスクリプトを mongo シェルで実行するには以下のようにします。 ここでは、mydb という名前のデータベースの books コレクションに、テスト用のドキュメントを追加しています。
$ mongo mydb input.js input.js db.books.insert({title: &amp;#39;Title 1&amp;#39;}); db.books.insert({title: &amp;#39;Title 2&amp;#39;}); db.books.insert({title: &amp;#39;Title 3&amp;#39;}); ドキュメントには書いてありませんが、標準入力から読み込ませることもできるようです。 この方法を使うと、mongo コマンドのオプションのフォーマット的に、データベース名を省略してスクリプトファイル名を指定できるようになるので、スクリプトの中でデータベースを切り替えることができます。
$ mongo &amp;lt; input2.js $ mongo --port 40001 &amp;lt; input2.js $ mongo localhost:40001 &amp;lt; input2.js input2.js use testdb; db.books.insert({title: &amp;#39;Title 1&amp;#39;, tags: [&amp;#39;AAA&amp;#39;, &amp;#39;BBB&amp;#39;]}); db.books.insert({title: &amp;#39;Title 2&amp;#39;, tags: [&amp;#39;BBB&amp;#39;, &amp;#39;CCC&amp;#39;]}); db.books.insert({title: &amp;#39;Title 3&amp;#39;, tags: [&amp;#39;CCC&amp;#39;, &amp;#39;AAA&amp;#39;]});</description></item><item><title>MongoDB サーバー (mongod) を Windows サービスとして登録する</title><link>https://maku.blog/p/tm4jzet/</link><pubDate>Fri, 17 Jan 2014 00:00:00 +0000</pubDate><guid>https://maku.blog/p/tm4jzet/</guid><description>Windows サービスとして MongoDB サービスを登録する MongoDB サーバー (mongod) を Windows サービスとして登録しておくと、バックグラウンドで MongoDB サーバーが動作するようになるため、いちいちコマンドラインで mongod を起動する必要がなくなります。
MongoDB サーバーを Windows サービスとして登録するには、コマンドプロンプトを管理者権限で起動し、次のように入力します。
Windows サービスとして MongoDB サービスを登録 C:\&amp;gt; mongod --install --dbpath &amp;lt;DBディレクトリ&amp;gt; --logpath &amp;lt;ログファイル名&amp;gt; コンソール上でログを確認することができなくなってしまうので、ログがファイルに保存されるように、ログファイル名を指定しておく必要があります。
下記は実行例です。 ここでは、データベースディレクトリとして D:\mongo_data、ログファイル名 D:\mongo_log\log.txt を指定しています。 ディレクトリはあらかじめ作成しておく必要があります。
C:\&amp;gt; mkdir D:\mongo_data C:\&amp;gt; mkdir D:\mongo_log C:\&amp;gt; mongod --install --dbpath D:\mongo_data --logpath D:\mongo_log\log.txt Fri Jan 17 12:11:49.699 Trying to install Windows service &amp;#39;MongoDB&amp;#39; Fri Jan 17 12:11:49.711 Service &amp;#39;MongoDB&amp;#39; (Mongo DB) installed with command line &amp;#39;C:\app\mongodb\mongod.</description></item><item><title>MongoDB と RDB の用語比較</title><link>https://maku.blog/p/gbs79ua/</link><pubDate>Tue, 22 Oct 2013 00:00:00 +0000</pubDate><guid>https://maku.blog/p/gbs79ua/</guid><description>MongoDB で使用する Database や Collection などの用語は、RDB の用語と以下のような関係にあります。
MongoDB の用語 RDB の用語 Database Database Collection（コレクション） Table（テーブル） Document（ドキュメント） Record / Row（行） Field（フィールド） Column（列） ある Database の Collection に Document を追加するときは、mongo クライアントでは以下のように実行します。
&amp;gt; use &amp;lt;Database名&amp;gt; &amp;gt; db.&amp;lt;Collection名&amp;gt;.insert(&amp;lt;Document の Field セット&amp;gt;)</description></item><item><title>MongoDB (mongo, mongod) をインストールする</title><link>https://maku.blog/p/jyn7v9y/</link><pubDate>Sat, 28 Dec 2013 00:00:00 +0000</pubDate><guid>https://maku.blog/p/jyn7v9y/</guid><description>各種 OS 用のパッケージでインストールする MongoDB のクライアント (mongo) やサーバー (mongod)、その他の各種コマンド（mongoexport や mongostat など） は、下記のサイトから各種 OS 用のバイナリをダウンロードしてインストールすることができます。
MongoDB Community Download | MongoDB Windows 用のインストーラを使うと、簡単に mongod を Windows サービスとして登録したりすることができます（手動でサービス登録することもできます）。 インストールして、bin ディレクトリへのパスが通ったら、mongo コマンドを実行できるか確認しておきましょう。
mongo コマンドを実行できるか確認 $ mongo --version MongoDB shell version v4.0.9 git version: fc525e2d9b0e4bceff5c2201457e564362909765 allocator: tcmalloc modules: none build environment: distmod: 2008plus-ssl distarch: x86_64 target_arch: x86_64 macOS なら Homebrew でのインストールが楽 macOS の場合、Homebrew を使うと簡単に MongoDB のコマンド群（mongo や mongod）をインストールできます。
mongodb-community パッケージのインストール $ brew tap mongodb/brew # MongoDB 用のリポジトリ情報を追加 $ brew install mongodb-community # MongoDB 関連コマンドをインストール $ brew upgrade mongodb-community # （バージョンアップしたいとき） これで、/usr/local/bin に以下のようなコマンド群がインストールされます（正確にはこれらはシンボリックリンクであり、実体は /usr/local/Cellar/mongodb-* 以下にインストールされています）。</description></item><item><title>Azure Cosmos DB にアカウントを作って MongoDB API でアクセスする</title><link>https://maku.blog/p/cd9bg3x/</link><pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/cd9bg3x/</guid><description>Azure Cosmos DB と MongoDB API Azure Cosmos DB は、Microsoft の Azure 上に配置できるスケーラブルなデータベースで、SQL や MongoDB API など様々なインタフェースでアクセスできるようになっています。
MongoDB を使った既存のアプリケーションがある場合、接続先を Azure Cosmos DB アカウントのアドレスに変更するだけで、簡単にクラウド上のデータを扱えるようになります。 ローカルの MongoDB サーバ (mongod) に接続する代わりに、Azure Cosmos DB に接続するということです。
ここでは、MongoDB API（MongoDB シェル）による Azure Cosmos DB へのアクセスを試してみます。 まずは、Azure 上に Cosmos DB のリソースを作成します。
Azure Cosmos DB アカウントを作成する Azure ポータルへログインし、Azure Cosmos DB のページを開き、Azure Cosmos DB アカウントの作成 をクリックします。
次の画面では、アカウント名 や API の種類を設定します。
アカウント名 に入力した値は、下記のように接続 URI の一部として使われます。 よって、このアカウント名は世界中で一意である必要があります。
mongodb://＜アカウント名＞:＜キー＞@＜アカウント名＞.documents.azure.com:10255/?ssl=true&amp;amp;replicaSet=globaldb API の種類には、MongoDB API を指定してください。 各項目の入力が終わったら、確認と作成 を押して数分待つと、Azure Cosmos DB アカウントの作成が完了します。</description></item><item><title>Deno で MongoDB にアクセスする</title><link>https://maku.blog/p/3pwojuj/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/3pwojuj/</guid><description>Deno 用の MongoDB ドライバーとして、deno_mongo が公開されています。 Deno Deploy 上でも使えるので、Deno Deploy で公開する Web API から MongoDB Atlas に接続する、といったことが簡単に行えます。
mongo | Deno GitHub - denodrivers/mongo: MongoDB driver for Deno MongoDB サーバーへ接続する ローカルホスト上で起動した MongoDB サーバーへ接続するには次のようにします。
import { MongoClient } from &amp;#34;https://deno.land/x/mongo@v0.31.1/mod.ts&amp;#34;; const client = new MongoClient(); await client.connect(&amp;#34;mongodb://127.0.0.1:27017&amp;#34;); // 後は client インスタンスを使って MongoDB を操作する 実運用を考えると、MONGO_URI のような環境変数で接続先の MongoDB サーバーを指定できるようにしておいた方がよいでしょう。 例えば、MongoDB Atlas サービスを使用している場合は、次のような接続文字列 (SRV URI) が発行されますが、ここには接続パスワードなどが含まれるので、この URI をハードコーディングすることはできません。
mongodb+srv://&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@cluster-name.abcde.mongodb.net/?retryWrites=true&amp;amp;w=majority 次の client.ts モジュールは、MongoClient インスタンスを MONGO_URI 環境変数が示す MongoDB サーバーに接続し、export しています。 MONGO_URI 環境変数がセットされていない場合は、代わりに 127.</description></item><item><title>Docker で MongoDB サーバーを立ち上げる</title><link>https://maku.blog/p/y6zgrg2/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/y6zgrg2/</guid><description>Docker のオフィシャルイメージとして、mongo イメージが公開されています。
mongo - Official Image | Docker Hub このイメージには、MongoDB サーバー (mongod) や、MongoDB クライアント (mongosh) が含まれており、コマンドを省略してコンテナを起動すると、デフォルトで MongoDB サーバーが立ち上がります。
MongoDB サーバーのコンテナを起動する 次のように mongo コンテナを起動すると、ローカルホスト上で MongoDB サーバーを立ち上げたのと同様に振舞います。
$ docker container run --rm -d -p 27017:27017 --name mongo mongo オプションの意味:
--rm &amp;hellip; コンテナを停止したときにコンテナを削除します。コンテナを削除したくなければ、このオプションは外してください。 -d &amp;hellip; デーモンをバックグラウンドで動作させます。 -p 27107:27017 &amp;hellip; ローカルホストの 27107 ポートへのアクセスを、コンテナ内の MongoDB サーバーの 27107 ポートへ転送します。 --name mongo &amp;hellip; 起動するコンテナに mongo という名前を付けます。 mongo &amp;hellip; Docker イメージとして mongo:latest を使用します（デフォルトで :latest が使われます)。 次のようにして、mongo コンテナが起動していることを確認できます。</description></item><item><title>MongoDB for VS Code で Azure Cosmos DB を操作する</title><link>https://maku.blog/p/dt3ahpw/</link><pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/dt3ahpw/</guid><description>Cosmos DB インスタンスを MongoDB API アクセス用に作成 しておくと、さまざまな MongoDB 用のツールでデータベースにアクセスできるようになります。 ここでは、VS Code 用の拡張「MongoDB for VS Code」を使って、Cosmos DB を操作できるようにしてみます。 TypeScript を使って Web アプリを作成しているときは、エディタとして VS Code を使っていることが多いでしょうから、同じ環境上で Cosmos DB を操作できると開発が捗ります。
MongoDB for VS Code のインストール 図: MongoDB for VS Code のインストール MongoDB for VS Code は、VS Code の Extesions バー (Cmd/Ctrl + Shift + X) で MongoDB で検索すれば簡単にインストールできます。
VS Code から Cosmos DB (MongoDB) に接続する 接続文字列で簡単接続 MongoDB for VS Code をインストールすると、サイドバーに 葉っぱのアイコン が出てくるので、ここから MongoDB サーバーに接続することができます。 ちなみに、MongoDB が葉っぱアイコンを使うのは、それを使うことが「シンプルで自然であるから」らしいです（じゃあ水でもいいじゃん、とは言いますまい）。</description></item><item><title>mongo シェルで find の結果をインデントして見やすく表示する (pretty)</title><link>https://maku.blog/p/uvusqb7/</link><pubDate>Mon, 31 Mar 2014 00:00:00 +0000</pubDate><guid>https://maku.blog/p/uvusqb7/</guid><description>mongo シェルで find() を実行した結果を見やすいように整形するには、実行結果に対して pretty() を適用します。
&amp;gt; db.books.find().pretty() { &amp;#34;_id&amp;#34; : ObjectId(&amp;#34;533973de50b35840de2dda25&amp;#34;), &amp;#34;title&amp;#34; : &amp;#34;Title 1&amp;#34;, &amp;#34;tags&amp;#34; : [ &amp;#34;AAA&amp;#34;, &amp;#34;BBB&amp;#34; ] } { &amp;#34;_id&amp;#34; : ObjectId(&amp;#34;533973de50b35840de2dda26&amp;#34;), &amp;#34;title&amp;#34; : &amp;#34;Title 2&amp;#34;, &amp;#34;tags&amp;#34; : [ &amp;#34;BBB&amp;#34;, &amp;#34;CCC&amp;#34; ] } { &amp;#34;_id&amp;#34; : ObjectId(&amp;#34;533973de50b35840de2dda27&amp;#34;), &amp;#34;title&amp;#34; : &amp;#34;Title 3&amp;#34;, &amp;#34;tags&amp;#34; : [ &amp;#34;CCC&amp;#34;, &amp;#34;AAA&amp;#34; ] }</description></item><item><title>mongo シェルで MapReduce を実行する</title><link>https://maku.blog/p/qvkkcuj/</link><pubDate>Mon, 31 Mar 2014 00:00:00 +0000</pubDate><guid>https://maku.blog/p/qvkkcuj/</guid><description>mongo シェルを使って、下記のような books コレクションに対して MapReduce をかけて、タグ情報のリスト（tags コレクション）を生成する方法を示します。
{ title: &amp;#39;Title 1&amp;#39;, tags: [&amp;#39;AAA&amp;#39;, &amp;#39;BBB&amp;#39;] } { title: &amp;#39;Title 2&amp;#39;, tags: [&amp;#39;BBB&amp;#39;, &amp;#39;CCC&amp;#39;] } { title: &amp;#39;Title 3&amp;#39;, tags: [&amp;#39;CCC&amp;#39;, &amp;#39;AAA&amp;#39;] } 作成される tags コレクションは、以下のようになることを想定しています。
{ &amp;#34;_id&amp;#34; : &amp;#34;AAA&amp;#34;, &amp;#34;value&amp;#34; : 2 } { &amp;#34;_id&amp;#34; : &amp;#34;BBB&amp;#34;, &amp;#34;value&amp;#34; : 2 } { &amp;#34;_id&amp;#34; : &amp;#34;CCC&amp;#34;, &amp;#34;value&amp;#34; : 2 } まずは、サンプルデータとなる books コレクションを作成します。
books.js use testdb; // books コレクションの初期化 db.books.drop(); db.</description></item><item><title>mongo シェルで各フィールドの型を調べる (typeof, instanceof)</title><link>https://maku.blog/p/yejmu4v/</link><pubDate>Tue, 22 Oct 2013 00:00:00 +0000</pubDate><guid>https://maku.blog/p/yejmu4v/</guid><description>mongo シェルで、各フィールドの型（タイプ）を調べたいときは、typeof や instanceof を使用します。
フィールドの型を調べる typeof mydoc._id 指定した型のフィールドかどうか調べる mydoc._id instanceof ObjectId 参考リンク Data Types in the mongo Shell — MongoDB Manual</description></item><item><title>MongoDB の ObjectId について（Document の生成時間を調べる）</title><link>https://maku.blog/p/wdbr8dx/</link><pubDate>Tue, 22 Oct 2013 00:00:00 +0000</pubDate><guid>https://maku.blog/p/wdbr8dx/</guid><description>MongoDB の各 Document（RDB でいうレコード）は、それぞれ _id というプライマリキーとなるフィールドを持っています。 この値は、何も指定しないと、自動的に ObjectId オブジェクトが生成されて設定されます。
&amp;gt; db.mycollection.insert({value:100}) &amp;gt; db.mycollection.findOne() { &amp;#34;_id&amp;#34; : ObjectId(&amp;#34;5265e358c76d2a2f8b870057&amp;#34;), &amp;#34;value&amp;#34; : 100 } この ObjectId オブジェクトは BSON 形式 のオブジェクトで、内部的に以下のような値を保持しています。
フィールド サイズ 内容 Timestamp 4 bytes 生成時間（秒） Machine ID 3 bytes マシン固有値 PID 2 bytes プロセス ID Counter 3 bytes ランダム値から始まってインクリメントされる ObjectId オブジェクト内に含まれているタイムスタンプは、getTimestamp() メソッドによって取得できます。 これを利用すると、Document の _id フィールドから、その Document が生成された時間を調べることができます。</description></item></channel></rss>