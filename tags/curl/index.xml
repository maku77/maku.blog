<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cURL on まくろぐ</title><link>https://maku.blog/tags/curl/</link><description>Recent content in cURL on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 28 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/curl/index.xml" rel="self" type="application/rss+xml"/><item><title>Linuxコマンド: curl コマンドのチートシート</title><link>https://maku.blog/p/2sv4bqw/</link><pubDate>Tue, 28 Nov 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2sv4bqw/</guid><description>コマンド 説明 curl --help all 詳細なヘルプを表示 curl https://example.com GET リクエスト curl -i https://example.com レスポンスヘッダーも表示 curl -I https://example.com レスポンスヘッダーだけ表示 curl -v https://example.com 冗長表示（リクエストとレスポンスのヘッダーを確認可能） curl -H &amp;quot;Authorization: Bearer TOKEN&amp;quot; https://example.com リクエストヘッダーの指定 curl -b &amp;quot;cookie1=value1; cookie2=value2&amp;quot; http://example.com クッキーの指定 curl -A &amp;quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64)&amp;quot; http://example.com ユーザーエージェントの指定 curl -L http://example.com リダイレクト (302) レスポンスを自動処理 curl -O https://example.com/file.txt ファイルのダウンロード（同名で保存） curl -o hoge.txt https://example.com/file.txt ファイルのダウンロード（別名で保存） curl -# -O http://example.com/largefile.zip ダウンロードの進捗を表示 curl -r 0-100 http://example.com/file.txt -o partial.</description></item><item><title>Linuxコマンド: curl コマンドの使用例（GET/POST リクエスト、ファイルのダウンロード）</title><link>https://maku.blog/p/phdp2do/</link><pubDate>Fri, 03 Apr 2015 00:00:00 +0000</pubDate><guid>https://maku.blog/p/phdp2do/</guid><description>curl コマンドは URL を指定してサーバー上のリソースにアクセスするためのコマンドで、Web API のテストや、ファイルのダウンロードに使用できます。 昔は curl コマンドは Linux 用のコマンドという認識でしたが、Windows 10 には標準搭載されるようになりました。 curl は様々なプロトコルで通信できますが、主に HTTP/HTTPS が使用されます。
参考: curl コマンドのチートシート curl コマンドでファイルをダウンロードする curl コマンドはデフォルトではダウンロードしたファイルを標準出力に出力します。 -o（小文字のオー）オプションや、-O（大文字のオー）オプションを指定することで、ファイルに保存する ことができます。 同時に -L オプションを指定しておくと、リダイレクトレスポンスを自動処理してくれます。
ダウンロード元と同名で保存 (-O) sample.zip という名前で保存 $ curl -L -O http://example.com/sample.zip 別名で保存 (-o) # カレントディレクトリに foo.zip という名前で保存 $ curl -L -o foo.zip http://example.com/sample.zip # 保存先を絶対パスで指定することも可能 $ curl -L -o /tmp/foo.zip http://example.com/sample.zip curl コマンドで GET/POST リクエストを送信する REST API などのテストに curl コマンドを利用できます。
GET リクエスト 特にオプションを指定しなければ、HTTP の GET リクエストが送信されます。</description></item></channel></rss>