<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Deno on まくろぐ</title><link>https://maku.blog/tags/deno/</link><description>Recent content in Deno on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 18 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/deno/index.xml" rel="self" type="application/rss+xml"/><item><title>Deno プログラミングをはじめる</title><link>https://maku.blog/p/d8s6fpz/</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/d8s6fpz/</guid><description>Deno とは？ Deno（発音: ディーノ）は、Node.js の作者であるライアン・ダール (Ryan Dahl) 氏が作成した JavaScript/TypeScript の実行環境です。 Deno という名前は、Node を逆にしたネーミングになっています。 Node.js での反省を活かした改善が行われており、今後は Node.js ではなく Deno で作成されるアプリケーションが増えていくと思われます。 Deno には次のような特徴があります。
シンプルな 1 つの実行ファイル（deno コマンド）で提供 ネイティブに TypeScript 実行をサポート（tsc コマンドのインストールが不要） ゼロコンフィグで開発を始められる（必要に応じて deno.json を用意することも可能） package.json で依存モジュールを管理する必要がない 各種開発ツールを deno サブコマンドで標準搭載 deno fmt &amp;hellip; フォーマッター deno lint &amp;hellip; Lint ツール deno test &amp;hellip; テストランナー deno bundle &amp;hellip; バンドラー（1 つの JavaScript ファイルにまとめる） deno compile &amp;hellip; コンパイラー（OS ごとの実行ファイルを生成する） クロスプラットフォームな deno task（Node の npm run に相当） Web 標準の JavaScript API と互換性のある API 定義 (Web Platform APIs) Promise ベースの Deno API 実装 Rust 実装による高速動作（当初は Golang 実装だった） npm モジュールのサポート（2022 年に追加） 公式のサーバレス環境 Deno Deploy が提供されている Node.</description></item><item><title>Node.js と Deno のコーディング方法の違いまとめ</title><link>https://maku.blog/p/zbaga2z/</link><pubDate>Wed, 21 Dec 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/zbaga2z/</guid><description>Deno でのコーディングは、Node.js とほぼ同様の書き方で行えますが、いくつか押さえておきたいポイントがあるのでまとめておきます。
Web Platform APIs Web ブラウザーで使える JavaScript の標準 API、例えば fetch API や、それに付随する Request や Response インタフェースをデフォルトで使用することができます。 これは、Chrome や Firefox などのブラウザ上で動作する JavaScript で使える API と同様の API を使えるということです。もちろん、Deno の実行環境はブラウザではないので、セキュリティモデルなどに微妙に違いがありますが、インタフェースが統一されているので学習コストが低いです。 Web Platform API の一覧は、こちらを参照してください。
Deno APIs / Built-in APIs JavaScript 標準ではない、組み込みの API (Deno API) は、Deno という namespace 以下のメソッド／プロパティとして提供されています。Deno が提供している API ということが一目でわかります。下記は、コマンドライン引数を参照するときの例です。 Deno.argv[0] // Deno の場合 process.argv[0] // Node の場合 Deno API 呼び出し時に発生するエラーは、Deno.errors namespace に定義されています。 Deno API には、まだ安定版 (stable) になっていないものがあり、それらを使う場合は、deno run 実行時に --unstable オプションを指定します。 Deno namespace の API の一覧は、こちらを参照してください。</description></item><item><title>Deno Deploy で Deno のサーバープログラムを公開する</title><link>https://maku.blog/p/phz7fo3/</link><pubDate>Sat, 24 Dec 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/phz7fo3/</guid><description>Deno Deploy とは？ Deno Deploy を使うと、Deno で作成したサーバープログラムを簡単に公開することができます。 Deno Deploy はエッジサーバーで動作する Deno 実行環境を提供しており、ゼロコンフィグでデプロイすることができます。
TypeScript コードで記述したプログラムがそのまま動きます（Deno なので） CLI ツール (deployctl) や GitHub 統合、GitHub Actions で簡単にデプロイできます デプロイは数秒で終わります（GitHub 連携による Deno Deploy へのデプロイは、Vercel や Cloudflare へのデプロイより 10 倍以上速い） サーバー上で公開されている .ts ファイルを直接デプロイすることができます プレビューサイト用の URL が自動生成されます（もちろん SSL 対応） 1 日に 10 万回までの呼び出しであれば無料で利用できます（それ以上は$10/月からの有料プラン） deployctl のインストール ローカルにある .ts ファイルを Deno Deploy へデプロイするには、CLI コマンドの deployctl を使用します。 このコマンドは、deno コマンドでインストールできます。
deployctl のインストール $ deno install \ --allow-read --allow-write --allow-env --allow-net --allow-run \ --no-check -r -f https://deno.</description></item><item><title>Deno で MongoDB にアクセスする</title><link>https://maku.blog/p/3pwojuj/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/3pwojuj/</guid><description>Deno 用の MongoDB ドライバーとして、deno_mongo が公開されています。 Deno Deploy 上でも使えるので、Deno Deploy で公開する Web API から MongoDB Atlas に接続する、といったことが簡単に行えます。
mongo | Deno GitHub - denodrivers/mongo: MongoDB driver for Deno MongoDB サーバーへ接続する ローカルホスト上で起動した MongoDB サーバーへ接続するには次のようにします。
import { MongoClient } from &amp;#34;https://deno.land/x/mongo@v0.31.1/mod.ts&amp;#34;; const client = new MongoClient(); await client.connect(&amp;#34;mongodb://127.0.0.1:27017&amp;#34;); // 後は client インスタンスを使って MongoDB を操作する 実運用を考えると、MONGO_URI のような環境変数で接続先の MongoDB サーバーを指定できるようにしておいた方がよいでしょう。 例えば、MongoDB Atlas サービスを使用している場合は、次のような接続文字列 (SRV URI) が発行されますが、ここには接続パスワードなどが含まれるので、この URI をハードコーディングすることはできません。
mongodb+srv://&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@cluster-name.abcde.mongodb.net/?retryWrites=true&amp;amp;w=majority 次の client.ts モジュールは、MongoClient インスタンスを MONGO_URI 環境変数が示す MongoDB サーバーに接続し、export しています。 MONGO_URI 環境変数がセットされていない場合は、代わりに 127.</description></item><item><title>Deno のタスクランナーの使い方 (deno task)</title><link>https://maku.blog/p/ho4gs5h/</link><pubDate>Sat, 14 Jan 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ho4gs5h/</guid><description>Deno のタスクランナーとは？ npm スクリプトとの違いは？ Deno は標準で deno task コマンド を提供しており、deno.json（あるいは deno.jsonc）の tasks プロパティで定義したタスクを実行できるようになっています。 これは、Node.js で言うところの npm スクリプト (npm run) に相当するものですが、deno task の場合は、クロスプラットフォームなタスクを定義できる ところが大きな特徴になっています。
deno.json でのタスク定義 { &amp;#34;tasks&amp;#34;: { &amp;#34;hello&amp;#34;: &amp;#34;echo Hello, Deno Task Runner!&amp;#34; } } タスクの実行方法 $ deno task hello npm スクリプトの場合は、定義したタスクが OS のシェル上で実行されることが前提だったので、シェルの機能をうかつに使ってしまうと、Linux では動くけど Windows では動かないというタスクなってしまいがちでした。 例えば、ファイルをまとめて削除するタスクを作りたい場合、Linux に依存した rm -rf コマンドは使えず、いちいち rimraf モジュールをインストールするといったことが必要でした。 一方、Deno 場合は、クロスプラットフォームで動作する 組み込みコマンドとして rm コマンドを備えています。 他にも、cp、mv、mkdir、echo、cat といったよく使うコマンドが、Linux や Windows、macOS などで共通で使えるようになっています。
また、Linux と Windows では、パイプやリダイレクトの記述方法も微妙に異なっていますが、Deno のタスクランナーでは、組み込みでパイプやリダイレクトの構文を処理する ようになっており、連続したコマンド実行も OS のシェルに依存せずに定義できます。</description></item><item><title>Deno で JSON ファイルを読み込む方法いろいろ</title><link>https://maku.blog/p/a83hr2b/</link><pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/a83hr2b/</guid><description>Deno で JSON ファイルを読み込んで、JavaScript のオブジェクトとして参照できるようにするには、import で直接インポートする方法と、Deno.readTextFile で読み込んでから JSON.parse する方法があります。 ここでは、それぞれの方法で次のような JSON ファイルを読み込んでみます。
books.json [ { &amp;#34;title&amp;#34;: &amp;#34;Title 1&amp;#34;, &amp;#34;author&amp;#34;: &amp;#34;Author 1&amp;#34; }, { &amp;#34;title&amp;#34;: &amp;#34;Title 2&amp;#34;, &amp;#34;author&amp;#34;: &amp;#34;Author 2&amp;#34; }, { &amp;#34;title&amp;#34;: &amp;#34;Title 3&amp;#34; } ] JSON モジュールとしてインポートする方法 Deno では、import 文で JSON ファイルを直接インポートできるようになっています。 JSON ファイルをインポートするときは、import assertions の機能を使って、JSON ファイルであることを明示する必要があります。
import 文で静的インポート main.ts import books from &amp;#34;./books.json&amp;#34; assert { type: &amp;#34;json&amp;#34; }; for (const b of books) { console.log(`title: ${b.title}, author: ${b.author ?</description></item><item><title>Deno Deploy の例: JSON ファイルを読み込んで返す REST API を作る (oak)</title><link>https://maku.blog/p/zt3birz/</link><pubDate>Tue, 27 Dec 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/zt3birz/</guid><description>何をするか？ Deno Deploy を使うと、Web API を簡単にデプロイすることができます。 ここでは、よくある例として、サーバー側で JSON ファイルを読み込んで、その内容をレスポンスとして返す REST API を作ってみます。 ここでは、次のような関数やモジュールを使用します。
Deno.readTextFile テキストファイルを読み込むために使用する Deno の標準 API です。 x/oak モジュール HTTP サーバーを作るときに使えるミドルウェアフレームワークです。リクエストのパスに応じて、処理を簡単に振り分けることができます。Node の express と同じように使えます。 前提条件 Deno Deploy の基本的な使い方は下記ページを参考にしてください。
参考: Deno Deploy で Deno のサーバープログラムを公開する 後述の記事では、デプロイ用の deployctl コマンドを使用するので、上記ページに従って先にインストールしておいてください。
JSON ファイル サーバー側で読み込む、サンプルの JSON ファイルを用意しておきます。
data/books.json [ { &amp;#34;id&amp;#34;: &amp;#34;1&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;Title 1&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;2&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;Title 2&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;3&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;Title 3&amp;#34; } ] 3 冊の書籍データが格納されているという想定です。 実際のアプリケーションでは、RDB や mongoDB などのデータベースから情報取得することになると思います。</description></item></channel></rss>