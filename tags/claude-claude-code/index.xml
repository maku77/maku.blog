<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>claude, claude code on まくろぐ</title><link>https://maku.blog/tags/claude-claude-code/</link><description>Recent content in claude, claude code on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Fri, 29 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/claude-claude-code/index.xml" rel="self" type="application/rss+xml"/><item><title>Claude Code の使い方（指示の出し方のコツ）</title><link>https://maku.blog/p/qj9wydo/</link><pubDate>Fri, 29 Aug 2025 00:00:00 +0000</pubDate><guid>https://maku.blog/p/qj9wydo/</guid><description>Claude Code のノウハウが溜まってきたので様々なノウハウをメモしていきます。 Agent といかに共同作業するかのコツのようなものです。
Claude Code を使い始めてすぐの頃は、「指示を出す → 動作が終わるまで見守る → 新しい指示を出す」という感じで使っていました。 ただ、このやり方だと「自分が」ツールを使っている感覚に近く、自分の時間は拘束されたままです。 Agent にもっとうまく働いてもらうには、人に仕事を委託している感覚 で使うのがよいことに気づきました。 下記のような使い方を知っていると、単なる壁打ちから脱却した一歩進んだ使い方 ができます。
作業中に割り込んで、方向性を修正する（ESC 割り込み） 先に詳細なプランを立ててもらう (Shift + TAB で Plan mode へ） 作業が終わったら知らせてもらう（hooks） Agent と並行して別の作業をする（git worktree など） 作業中に割り込む (ESC) この ESC キーによる「待った」 機能は超重要です。 Claude Code にある程度複雑な作業を任せると、作業中に「やっぱりこうしてほしい」ということが出てきます。 例えば、下記はビルド構成の最適化をしてもらっているところですが、Claude が想定外のファイルまで解析しようとしていることに気づいたとします。 そんなときは、ESC キーを押して作業に割り込み、そのファイルは対象外だと教えてあげます。
図: ESC で割り込み指示 そうすると、新しく指示した方針に従って作業を続けてくれます。 上記のように Claude が考えている最中に割り込むだけでなく、Claude から追加の情報を求められたとき（ユーザーからの入力待ちのとき）にも割り込むことができます。 間違った方向に進んでいることに気づいたら、すぐに ESC キーで割り込むことで、トークンも時間も無駄にしなくて済みます。
先に詳細なプランを立ててもらう (Plan mode) 仕事で部下や協力会社の人へ複雑な作業をお願いする場合は、いきなり作業を始めるのではなく、まずは「作業プラン」を立ててもらって確認すると思います。 同様に、Claude Code にも最初に詳細なプランを立ててもらい、それを確認してから作業を始めてもらうと後戻りが少なくなります。 Claude Code はデフォルトではいきなり作業を始めてしまうので、Shift + TAB キーを 2 回押して Plan mode に切り替えます。</description></item></channel></rss>