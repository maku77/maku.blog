<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JSON on まくろぐ</title><link>https://maku.blog/tags/json/</link><description>Recent content in JSON on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 19 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/json/index.xml" rel="self" type="application/rss+xml"/><item><title>VS Code で YAML ファイルの構文をチェックする（YAML 拡張）</title><link>https://maku.blog/p/c7sp7ut/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/c7sp7ut/</guid><description>YAML 拡張とは？ VS Code の YAML 拡張 (redhat.vscode-yaml) をインストールすると、スキーマ定義に基づいて、YAML ファイルの記述内容が正しいかをチェックすることができます。 スキーマ定義を JSON スキーマファイル の形で作成し、YAML ファイルの先頭に次のようなコメントを記述することで適用できます。
YAML ファイルの先頭に追加 # yaml-language-server: $schema=./schema.json YAML ファイルの構文チェックなのに JSON スキーマ？と思うかもしれませんが、YAML と JSON のデータ形式には互換性があるので、スキーマは JSON スキーマでよいんですね。
スキーマによる YAML ファイルの構文チェック 公開スキーマファイルを参照する スキーマファイルは、インターネット上に公開されているものを URL で指定できるようになっています。 有名どころの設定ファイルのスキーマは、下記のサイトに一覧があるので、いろいろなプロジェクトからそのまま利用できます。
JSON Schema Store Ansible Playbook など、内容が複雑になりがちな YAML ファイルに設定しておくと役に立ちそうです。
playbook.yml（の先頭に記述する） # yaml-language-server: $schema=https://raw.githubusercontent.com/ansible/ansible-lint/main/src/ansiblelint/schemas/ansible.json GitHub Actions のワークフローファイル (.github/workflows/*.yml) などは、そのファイルパスから、どのスキーマを使用すればいいかを推測できるので、上記のようなコメント行すら記述せずに自動的に GitHub Actions 用のスキーマ を適用してくれます。 つまり、VS Code に YAML 拡張をインストールするだけで、GitHub Actions のワークフローファイルの構文チェックが有効になります。 便利！
独自定義したスキーマファイルを参照する アプリケーション独自の設定ファイルやデータファイルを YAML 形式で作成する場合は、そのスキーマも独自であることが多いので、専用の JSON スキーマファイルを作成することになるでしょう。 例えば、次の JSON スキーマファイルでは、ユーザー情報を表現するためのスキーマを定義しています（コメントを記述できるようにするために、拡張子を .</description></item><item><title>Deno で JSON ファイルを読み込む方法いろいろ</title><link>https://maku.blog/p/a83hr2b/</link><pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/a83hr2b/</guid><description>Deno で JSON ファイルを読み込んで、JavaScript のオブジェクトとして参照できるようにするには、import で直接インポートする方法と、Deno.readTextFile で読み込んでから JSON.parse する方法があります。 ここでは、それぞれの方法で次のような JSON ファイルを読み込んでみます。
books.json [ { &amp;#34;title&amp;#34;: &amp;#34;Title 1&amp;#34;, &amp;#34;author&amp;#34;: &amp;#34;Author 1&amp;#34; }, { &amp;#34;title&amp;#34;: &amp;#34;Title 2&amp;#34;, &amp;#34;author&amp;#34;: &amp;#34;Author 2&amp;#34; }, { &amp;#34;title&amp;#34;: &amp;#34;Title 3&amp;#34; } ] JSON モジュールとしてインポートする方法 Deno では、import 文で JSON ファイルを直接インポートできるようになっています。 JSON ファイルをインポートするときは、import assertions の機能を使って、JSON ファイルであることを明示する必要があります。
import 文で静的インポート main.ts import books from &amp;#34;./books.json&amp;#34; assert { type: &amp;#34;json&amp;#34; }; for (const b of books) { console.log(`title: ${b.title}, author: ${b.author ?</description></item><item><title>TypeScript で JSON オブジェクトに型情報を付加する</title><link>https://maku.blog/p/2hr3eqx/</link><pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2hr3eqx/</guid><description>何が問題か？ JSON テキストファイルの内容を JSON.parse した結果や、fetch API のレスポンスを json() 関数にかけた結果は、型情報のない any 型のオブジェクトになります。 TypeScript コードから、このオブジェクトのプロパティを参照しようとすると、「定義されていないプロパティを参照している」という感じの ESLint エラーになってしまいます。 何より、型情報がないデータをそのまま扱おうとすると、VS Code などでプロパティ名の入力補完機能が働きません。
ここでは、サンプルデータとして次のような JSON 形式の文字列を使うことにします。
const jsonText = `{ &amp;#34;games&amp;#34;: [ { &amp;#34;title&amp;#34;: &amp;#34;Title1&amp;#34;, &amp;#34;genres&amp;#34;: [&amp;#34;ACT&amp;#34;] }, { &amp;#34;title&amp;#34;: &amp;#34;Title2&amp;#34;, &amp;#34;genres&amp;#34;: [&amp;#34;ACT&amp;#34;, &amp;#34;RPG&amp;#34;] }, { &amp;#34;title&amp;#34;: &amp;#34;Title3&amp;#34;, &amp;#34;genres&amp;#34;: [&amp;#34;STG&amp;#34;], &amp;#34;note&amp;#34;: &amp;#34;Fantastic shooting game&amp;#34; } ] } ` この JSON 文字列を JSON.parse 関数でオブジェクトに変換して、そのプロパティを参照しようとすると、ESLint がエラーを出します。
// Unsafe assignment of an `any` value (@typescript-eslint/no-unsafe-assignment) const jsonObj = JSON.</description></item></channel></rss>