<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mac on まくろぐ</title><link>https://maku.blog/tags/mac/</link><description>Recent content in mac on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 30 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/mac/index.xml" rel="self" type="application/rss+xml"/><item><title>macOS で不要なファイルを削除してストレージ容量を確保する</title><link>https://maku.blog/p/ygpw6dk/</link><pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ygpw6dk/</guid><description>macOS のストレージ容量が足りなくなってきたときのために、各種キャッシュの削除方法などをまとめておきます。
Homebrew (brew) 関連 古いバージョンの削除 brew コマンドでいろいろコマンドをインストールしていると、古いバージョンのモジュールが /usr/local/Cellar ディレクトリの中にどんどん増えていきます。 brea cleanup コマンドで、古いモジュールを削除できます。
# ドライラン（何が削除されて、何MBくらい減らせるか確認） $ brew cleanup -n # 実際に削除 $ brew cleanup 各モジュールでどのようなバージョンがインストールされているかは、次のように確認することができます。
$ brea ls-versions ... libxext 1.3.4 libxrender 0.9.10 libyaml 0.1.6_1 0.2.5 0.1.7 ... ダウンロードキャッシュの削除 Homebrew のダウンロードキャッシュが格納されているディレクトリは次のコマンドで確認できます。
$ brew --cache /Users/maku/Library/Caches/Homebrew 次のようにしてキャッシュディレクトリごとまとめて削除できます。
$ rm -rf `brew --cache` ライブラリフォルダ内のキャッシュを削除 $ rm -rf ~/Library/Caches/* Ruby 関連 gem # インストールされている Gem のバージョン一覧 $ gem list # 古いバージョンの削除（ドライラン） $ gem cleanup --dryrun # 古いバージョンの削除（実行） $ gem cleanup</description></item><item><title>macOS のスポットライトのインデックス処理を停止・開始する</title><link>https://maku.blog/p/j5gr3dn/</link><pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/j5gr3dn/</guid><description>macOS の mdutil コマンドを使用すると、スポットライトのインデックス設定を変更することができます。
インデックス処理の現在の設定を調べる $ sudo mdutil -a -s /: Indexing enabled. /System/Volumes/Data: Indexing enabled. /Volumes/SD_card: Indexing and searching disabled. インデックス処理を無効化する $ sudo mdutil -a -i off インデックス処理を有効化する $ sudo mdutil -a -i on インデックスを削除して再生成 $ sudo mdutil -a -E</description></item><item><title>macOS で JAVA_HOME に設定すべきパスを調べる（java_home コマンド）</title><link>https://maku.blog/p/7jkgzd4/</link><pubDate>Sat, 19 Jul 2014 00:00:00 +0000</pubDate><guid>https://maku.blog/p/7jkgzd4/</guid><description>複数の JDK がインストールされている場合にバージョンを切り替えて java (javac) コマンドを使用するには、JAVA_HOME 環境変数を設定します。 JAVA_HOME に設定すべきパスは、java_home コマンドで調べることができます。 下記は、Apple の JDK1.6、Oracle の JDK1.8 がインストールされている場合の出力例です。
$ /usr/libexec/java_home -v 1.6 /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home $ /usr/libexec/java_home -v 1.8 /Library/Java/JavaVirtualMachines/jdk1.8.0_11.jdk/Contents/Home 普段使用する JDK バージョンは、下記のように .bash_profile で設定しておけばよいでしょう。
~/.bash_profile # JDK 1.6 を使用する場合 export JAVA_HOME=$(/usr/libexec/java_home -v 1.6) # JDK 1.8 を使用する場合（デフォルト） export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)</description></item></channel></rss>