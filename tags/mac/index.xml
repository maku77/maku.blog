<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mac on まくろぐ</title><link>https://maku.blog/tags/mac/</link><description>Recent content in mac on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 30 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/mac/index.xml" rel="self" type="application/rss+xml"/><item><title>Macメモ: AppleScript を実行する</title><link>https://maku.blog/p/6je96q9/</link><pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate><guid>https://maku.blog/p/6je96q9/</guid><description>macOS の AppleScript を使用すると、実行したい一連の処理をスクリプト化することができます。 Windows のバッチファイルのようなものです。 AppleScript を実行するには、osascript コマンドを使用します。
ワンライナーで実行する 次のようにして、-e オプションで実行する処理を直接記述することができます。
例: ダイアログでメッセージを表示する $ osascript -e &amp;#39;display dialog &amp;#34;Hello&amp;#34;&amp;#39; スクリプトファイルを実行する 長いスクリプトを作成するときは、次のようにスクリプトファイルとして保存しておくのがよいでしょう。
sample.osa（スクリプトファイル） #!/usr/bin/env osascript display dialog &amp;#34;Hello&amp;#34; スクリプトファイルを実行するときは、ファイル名をそのままパラメーターとして指定します。
$ osascript sample.osa 上記のスクリプト例のように 1 行目にシェバング (#!) を記述した上で実行権限を付けておけば、そのまま実行ファイルとして実行することができます。
$ chmod +x sample.osa $ ./sample.osa</description></item><item><title>macOS で不要なファイルを削除してストレージ容量を確保する</title><link>https://maku.blog/p/ygpw6dk/</link><pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/ygpw6dk/</guid><description>macOS のストレージ容量が足りなくなってきたときのために、各種キャッシュの削除方法などをまとめておきます。
Homebrew (brew) 関連 古いバージョンの削除 brew コマンドでいろいろコマンドをインストールしていると、古いバージョンのモジュールが /usr/local/Cellar ディレクトリの中にどんどん増えていきます。 brea cleanup コマンドで、古いモジュールを削除できます。
# ドライラン（何が削除されて、何MBくらい減らせるか確認） $ brew cleanup -n # 実際に削除 $ brew cleanup 各モジュールでどのようなバージョンがインストールされているかは、次のように確認することができます。
$ brea ls-versions ... libxext 1.3.4 libxrender 0.9.10 libyaml 0.1.6_1 0.2.5 0.1.7 ... ダウンロードキャッシュの削除 Homebrew のダウンロードキャッシュが格納されているディレクトリは次のコマンドで確認できます。
$ brew --cache /Users/maku/Library/Caches/Homebrew 次のようにしてキャッシュディレクトリごとまとめて削除できます。
$ rm -rf `brew --cache` ライブラリフォルダ内のキャッシュを削除 $ rm -rf ~/Library/Caches/* Ruby 関連 gem # インストールされている Gem のバージョン一覧 $ gem list # 古いバージョンの削除（ドライラン） $ gem cleanup --dryrun # 古いバージョンの削除（実行） $ gem cleanup</description></item><item><title>macOS のスポットライトのインデックス処理を停止・開始する (mdutil)</title><link>https://maku.blog/p/j5gr3dn/</link><pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/j5gr3dn/</guid><description>macOS の mdutil コマンドを使用すると、スポットライトのインデックス設定を変更することができます。
インデックス処理の現在の設定を調べる $ sudo mdutil -a -s /: Indexing enabled. /System/Volumes/Data: Indexing enabled. /Volumes/SD_card: Indexing and searching disabled. インデックス処理を無効化する $ sudo mdutil -a -i off インデックス処理を有効化する $ sudo mdutil -a -i on インデックスを削除して再生成 $ sudo mdutil -a -E</description></item><item><title>macOS のコマンドラインで ZIP ファイルを作成する</title><link>https://maku.blog/p/2it3bjs/</link><pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2it3bjs/</guid><description>ZIP ファイルを作成する（zip コマンド） macOS に標準で付属している zip コマンドを使って、ファイル群を ZIP ファイルとしてアーカイブ（圧縮）できます。
ファイルを 1 つずつ指定する $ zip sample.zip 1.txt 2.txt 3.txt 作成される ZIP ファイル sample.zip +-- 1.txt +-- 2.txt +-- 3.txt ディレクトリごとまとめて ZIP 化する (-r) $ zip -r sample.zip dir1 dir2 作成される ZIP ファイル sample.zip +-- dir1/ | +-- 1.txt | +-- 2.txt | +-- 3.txt +-- dir2/ +-- 4.txt +-- 5.txt +-- 6.txt トップディレクトリを含めずに ZIP 化する 例: src ディレクトリ以下のファイルだけ圧縮 $ (cd src &amp;amp;&amp;amp; zip -r .</description></item><item><title>macOS でシェルスクリプトファイルをダブルクリックで起動できるようにする</title><link>https://maku.blog/p/pfiw6cc/</link><pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/pfiw6cc/</guid><description>macOS では、シェルスクリプトファイルに .command という拡張子を付けておくと、Finder 上からファイルのアイコンをダブルクリックするだけで起動できるようになります。 例えば、下記のように簡単な echo 出力を行うだけのシェルスクリプトがあるとします。
sample.sh #!/bin/sh echo AAA sleep 1 echo BBB sleep 1 echo CCC sleep 1 このファイルをダブルクリックで実行できるようにするには、下記のようにします。 chmod +x しておくのを忘れずに。
$ chmod +x sample.sh $ mv sample.sh sample.command この仕組みはスクリプトファイルであれば、どんな言語にでも適用できます。 例えば、先頭のシェバング部分を #!/usr/bin/env python などに変更すれば、Python スクリプトをダブルクリックで実行できるようになります。</description></item><item><title>macOS でスクリーンショットや画面の動画を撮る</title><link>https://maku.blog/p/hibf6f7/</link><pubDate>Sat, 26 Jan 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/hibf6f7/</guid><description>スクリーンショットを撮るためのショートカット macOS にはデフォルトでスクリーンキャプチャを撮るためのショートカットキーが設定されています。
Shift+Cmd+3 -- 画面全体のスクリーンショットをファイルに保存する Shift+Cmd+4 -- 選択範囲のスクリーンショットをファイルに保存する Shift+Cmd+5 -- 様々なキャプチャ方法を選択（後述） 選択したウィンドウのキャプチャ、画面の動画を撮る Shift+Cmd+5 というショートカットキーを使用すると、下記のようなキャプチャのためのダイアログが表示されます。 例えば、左から 2 番目のアイコンを選択（下記の赤枠のアイコン）すると、マウスカーソルがカメラの形に変わり、選択したウィンドウのキャプチャを撮ることができます。
図: キャプチャ範囲の選択 さらに、右端には 画面全体を収録 と 選択部分を収録 のボタンがあり、これを使って PC 画面の動画撮影を行うことができます。 オプション ボタンを押すと、動画の撮影時間や、マウスカーソルの表示、クリックの表示などを設定することができます。
影なしでキャプチャする ウィンドウのキャプチャは、デフォルトでは影のついたものになります。 影を付けないようにするには、Option キーを押した状態でキャプチャを実行します（カメラアイコンが表示されているときに押します）。
デフォルトで影なしにする ウィンドウのキャプチャを行うときに、デフォルトで影なしにするには、ターミナルから次のように設定します。
$ defaults write com.apple.screencapture disable-shadow -boolean true $ killall SystemUIServer 影付きに戻すには、次のように実行してください。
$ defaults delete com.apple.screencapture disable-shadow $ killall SystemUIServer</description></item><item><title>macOS のユーザ辞書をバックアップ、リストアする</title><link>https://maku.blog/p/3frb657/</link><pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate><guid>https://maku.blog/p/3frb657/</guid><description>macOS の「システム環境設定」の「キーボード」→「ユーザ辞書」タブで登録したユーザ辞書のエントリは、次のようにしてバックアップ＆リストアすることができます。
ユーザ辞書のバックアップ 単語リストの一覧で Ctrl-A を押して全項目を選択する。 Finder の任意のフォルダへドラッグ＆ドロップ。 これで、ユーザ辞書.plist というファイル名でユーザ辞書が保存されます。
ユーザ辞書のリストア ユーザ辞書.plist ファイルを単語リストの一覧へドラッグ＆ドロップ。 すでに登録されている用語に関しては重複登録はされないので、安心して上書き追加できます。
plist ファイルのフォーマット ちなみに、plist ファイルのフォーマットは、下記のような XML 形式になっており、直接編集することが可能です。
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt; &amp;lt;plist version=&amp;#34;1.0&amp;#34;&amp;gt; &amp;lt;array&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;phrase&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;暗槓&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;shortcut&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;あんかん&amp;lt;/string&amp;gt; &amp;lt;/dict&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;phrase&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;暗刻&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;shortcut&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;あんこう&amp;lt;/string&amp;gt; &amp;lt;/dict&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;phrase&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;一翻&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;shortcut&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;いーはん&amp;lt;/string&amp;gt; &amp;lt;/dict&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;phrase&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;一翻&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;shortcut&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;いーふぁん&amp;lt;/string&amp;gt; &amp;lt;/dict&amp;gt; &amp;lt;/array&amp;gt; &amp;lt;/plist&amp;gt;</description></item><item><title>macOS で昔ながらの ftp コマンドを使用できるようにする</title><link>https://maku.blog/p/4fsvwuc/</link><pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate><guid>https://maku.blog/p/4fsvwuc/</guid><description>Mac High Sierra からは、ftp コマンドは廃止され、よりセキュアな sftp コマンドしか使用することができません。 sftp コマンドでファイル転送するには、サーバ側で sftp プロトコルに対応している必要があります。
下記のように tnftp をインストールすれば、昔ながらの ftp コマンドを使用できるようになります。
$ brew install tnftp $ ftp user@ftp.example.com ちなみに、次のようにすれば、FTP コマンドを列挙したスクリプトを実行することができます（-n オプションで、ログインプロンプトの表示を抑制する必要があります）。
$ ftp -n &amp;lt; upload.ftp upload.ftp open ftp.example.com user username password bin prompt cd hoge put sample.txt quit</description></item><item><title>macOS のコマンドラインからデフォルトエディタでファイルを開く (open -t)</title><link>https://maku.blog/p/p2mvive/</link><pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate><guid>https://maku.blog/p/p2mvive/</guid><description>次のようにすると、.txt ファイルに関連づけられたエディタでファイルを開くことができます。
$ open sample.txt ただし、任意の拡張子のファイルをデフォルトのテキストエディタで開く場合は、-t オプションを指定する必要があります。
$ open -t sample.xxx 任意のアプリケーションでファイルを開くには、-a オプションでアプリケーションを指定します。
$ open -a /Applications/MacVim.app sample.txt</description></item><item><title>macOSのターミナルをコマンドラインから操作する</title><link>https://maku.blog/p/p96wptf/</link><pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate><guid>https://maku.blog/p/p96wptf/</guid><description>ソフトウェアの開発作業などで、Mac のターミナルを使うことが多いのであれば、コマンドラインからターミナルを操作する方法を知っておくと便利です。 複数の作業用ターミナルを一度に開いたり、タイトルを設定して判別しやすくすることができます。
新しいターミナルを開く $ open -n /Applications/Utilities/Terminal.app Command + N でも新しいターミナルウィンドウを開くことができます。
新しいタブを開く Terminal 内で新しくタブを開くには、AppleScript を使用します。
$ osascript -e &amp;#39;tell application &amp;#34;System Events&amp;#34; to tell process &amp;#34;Terminal&amp;#34; to keystroke &amp;#34;t&amp;#34; using command down&amp;#39; Command + T でも新しいタブを開くことができます。
ターミナルのタイトルを変更する 次のようにすると、現在のターミナルの（タブの）タイトルが、「新しいタイトル」に変更されます。
$ printf &amp;#34;\e]1;新しいタイトル\a&amp;#34; # あるいは $ echo -e &amp;#34;\033];新しいタイトル\007&amp;#34; Command + Shift + I でダイアログを開いて設定することもできます。
AppleScript からターミナルを操作する方法はこちらを参照してください。</description></item><item><title>Macメモ: AppleScript でコメントを記述する</title><link>https://maku.blog/p/h3zmh7k/</link><pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate><guid>https://maku.blog/p/h3zmh7k/</guid><description>AppleScript にも C++ や Java のように、行コメントとブロックコメントのための構文が用意されています。
行コメント -- コメント -- 以降に記述したテキストは、行末までコメントとみなされ実行時に無視されます。
ブロックコメント (* コメント コメント -- 行コメントをネストすることもできます (* ブロックコメントをネストすることもできます *) *) 複数行に渡るコメントを記述したいときは、(* と *) で囲みます。 Java や C/C++ とは異なり、ブロックコメントの中にブロックコメントを入れ子で含めることができます。</description></item><item><title>Macメモ: AppleScript でターミナルを操作する</title><link>https://maku.blog/p/dgde4df/</link><pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate><guid>https://maku.blog/p/dgde4df/</guid><description>新規ターミナルウィンドウを開く macOS で次のシェルスクリプトを実行すると、新しいターミナルを起動してそのターミナルをアクティブにすることができます。
#!/usr/bin/env osascript tell application &amp;#34;Terminal&amp;#34; do script activate end tell 上記はスクリプトファイルにする例ですが、次のように、ワンライナーで osascript コマンドを実行することもできます。
$ osascript -e &amp;#39;tell application &amp;#34;Terminal&amp;#34; to do script&amp;#39; 新規に開いたターミナル上で任意のシェルコマンドを実行するには、do script のパラメータでコマンドを指定します。 次の例では、単純な echo コマンドを実行しています。
tell application &amp;#34;Terminal&amp;#34; do script &amp;#34;echo Hello&amp;#34; activate end tell さらに、次のようにすれば、新規ターミナルのタイトルを設定することができます。
tell application &amp;#34;Terminal&amp;#34; do script activate set currWin to index of first window tell window currWin set custom title of first tab to &amp;#34;カスタムタイトル&amp;#34; end tell end tell ターミナルのテーマを変更することもできます。</description></item><item><title>Macメモ: AppleScript でボタンによる選択肢を表示する</title><link>https://maku.blog/p/g4cq4uh/</link><pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate><guid>https://maku.blog/p/g4cq4uh/</guid><description>下記のサンプルでは、"Windows" "Mac" "Cancel" の３つのボタンを表示し、押したボタンによって異なるメッセージを表示します。
#!/usr/bin/env osascript display dialog &amp;#34;Select your OS&amp;#34; buttons {&amp;#34;Mac&amp;#34;, &amp;#34;Windows&amp;#34;, &amp;#34;Cancel&amp;#34;} default button 3 with icon note copy the result as list to {ret} if the ret is &amp;#34;Windows&amp;#34; then display dialog &amp;#34;You are using Windows!&amp;#34; else if the ret is &amp;#34;Mac&amp;#34; then display dialog &amp;#34;You are using Mac!&amp;#34; end if</description></item><item><title>Macメモ: AppleScript で変数を定義する</title><link>https://maku.blog/p/zpg5wns/</link><pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate><guid>https://maku.blog/p/zpg5wns/</guid><description>AppleScript で変数に値を代入するには、set あるいは copy を使用します。
次の例では、set を使って、変数 user に文字列 &amp;quot;Maku&amp;quot; を代入しています。
set user to &amp;#34;Maku&amp;#34; display dialog &amp;#34;Hello &amp;#34; &amp;amp; user set の代わりに、copy を使用することもできます。
copy 33 to myAge</description></item><item><title>macOS で JAVA_HOME に設定すべきパスを調べる（java_home コマンド）</title><link>https://maku.blog/p/7jkgzd4/</link><pubDate>Sat, 19 Jul 2014 00:00:00 +0000</pubDate><guid>https://maku.blog/p/7jkgzd4/</guid><description>複数の JDK がインストールされている場合にバージョンを切り替えて java (javac) コマンドを使用するには、JAVA_HOME 環境変数を設定します。 JAVA_HOME に設定すべきパスは、java_home コマンドで調べることができます。 下記は、Apple の JDK1.6、Oracle の JDK1.8 がインストールされている場合の出力例です。
$ /usr/libexec/java_home -v 1.6 /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home $ /usr/libexec/java_home -v 1.8 /Library/Java/JavaVirtualMachines/jdk1.8.0_11.jdk/Contents/Home 普段使用する JDK バージョンは、下記のように .bash_profile で設定しておけばよいでしょう。
~/.bash_profile # JDK 1.6 を使用する場合 export JAVA_HOME=$(/usr/libexec/java_home -v 1.6) # JDK 1.8 を使用する場合（デフォルト） export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)</description></item></channel></rss>