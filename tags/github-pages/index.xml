<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GitHub Pages on まくろぐ</title><link>https://maku.blog/tags/github-pages/</link><description>Recent content in GitHub Pages on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 07 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/github-pages/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub Pages で React Router を使った SPA サイトを動かす方法</title><link>https://maku.blog/p/9u8it5f/</link><pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/9u8it5f/</guid><description>React Router などを使った SPA (Single Page Application) な Web サイトは、GitHub Pages でそのまま動作させようとしてもうまく動きません。 ここでは、その理由と、対応方法について説明します。
GitHub Pages で SPA サイトが動作しない理由 たとえば、React Router を使った Web サイトは、次のような URL を使って目的のコンテンツ (/book/123) を表示するようルーティングします。
https://yourname.github.io/repo-name/book/123 React Router を使ったアプリで、この URL を実際に処理するファイルは、
https://yourname.github.io/repo-name/index.html であり、そこに記述された JavaScript ファイル内で、URL の末尾の /book/123 という部分をルーティング用のパス文字列として処理します。 つまり、前述の URL の /book/123 という部分は、単なるアプリ用のデータであり、実際に存在するファイルを示しているわけではありません。
一方、GitHub Pages はそのような事情を知らないので、/book/123 という URL でアクセスしようとすると、/book/123/index.html というファイルを見つけようとして 404 エラー になってしまいます。
先頭ページ (/index.html) を開いた後で、JavaScript でルーティング（React の Link コンポーネントによる遷移）を行っている間はうまく動作するのですが、ページをリロードしたり、Web ブラウザのアドレスバーに URL を直接入力したりすると、やはり 404 エラーになってしまいます。 OAuth 認証を使用した Web サイトの場合は、リダイレクトによって指定された URL へのアクセスが必要になるため、これは大きな制約になります。</description></item><item><title>GitHub Pages で Jekyll による変換を無効化する（プッシュした HTML をそのまま表示する）</title><link>https://maku.blog/p/my8fmsy/</link><pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/my8fmsy/</guid><description>GitHub プロジェクトの設定画面から、GitHub Pages を有効化すると、簡単にウェブサイトをホスティングすることができます。 デフォルトでは、リポジトリ内の Markdown ファイル (.md) が Jekyll によって HTML に変換されるのですが、直接 HTML ファイルをデプロイする場合は、この変換処理は無駄です。
そのような場合は、次のようにして Jekyll による変換を無効化できます。
リポジトリのルートに .nojekyll ファイルを置く これだけです。 公開用ブランチとして gh-pages を設定している場合は、そのブランチのルートに置いてください。
Hugo などの静的 Web サイト生成ツールで作成したサイトをデプロイするような場合は、この設定を行っておくと、ファイルのプッシュ後に GitHub Pages に反映されるまでの時間がほんの少し早くなるかもしれません。
速度を気にしない場合はこの設定をする必要はありませんが、プッシュする Web サイトリソース内に、アンダースコア (_) で始まるファイルやディレクトリなどが含まれている場合は、この設定は必須になります。 なぜなら、Jekyll がアンダースコアで始まるファイルやディレクトリを取り除いてしまうからです。</description></item><item><title>Parcel でビルドした Web サイトが GitHub Pages で動作しないとき</title><link>https://maku.blog/p/m7jw8ju/</link><pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/m7jw8ju/</guid><description>React アプリを Parcel でビルドして GitHub Pages で公開しようとしたら、真っ白な画面になってしまったので対応方法のメモです。 原因は、トップページの index.html から読み込んでいる JavaScript ファイルのパスが、/index.js のように、ドメインルートからの相対パスになっていることでした。
GitHub Pages で公開する Web サイトの URL が、
https://yourname.github.io/ であれば問題ないのですが、
https://yourname.github.io/project名/ になっている場合は、読み込むファイルは /project名/index.js になっていないといけません。 これを解決するには、例えば、Parcel でビルドしているときは --public-url オプションを使って、次のように指定します。
$ parcel build src/index.html -d build --public-url &amp;#34;/project名/&amp;#34; こうすることで、トップページから /index.js というパスで参照していたものが /project名/index.js に変わってうまく動作するようになります。
npm run build で Web サイトのビルドを行っているのであれば、package.json 内のスクリプト定義で次のように記述しておけばよいでしょう。
package.json { // ... &amp;#34;scripts&amp;#34;: { &amp;#34;start&amp;#34;: &amp;#34;parcel src/index.html --open&amp;#34;, &amp;#34;build&amp;#34;: &amp;#34;rm -rf build &amp;amp;&amp;amp; parcel build src/index.</description></item></channel></rss>