<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>プログラム on まくろぐ</title><link>https://maku.blog/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0/</link><description>Recent content in プログラム on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 18 Jul 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0/index.xml" rel="self" type="application/rss+xml"/><item><title>１時間で分かる GoF デザインパターン</title><link>https://maku.blog/p/7gmjvza/</link><pubDate>Tue, 13 May 2008 00:00:00 +0000</pubDate><guid>https://maku.blog/p/7gmjvza/</guid><description>オブジェクト指向における再利用のためのデザインパターン エリック ガンマ, ラルフ ジョンソン, リチャード ヘルム, ジョン ブリシディース ソフトバンククリエイティブ 増補改訂版Java言語で学ぶデザインパターン入門 結城 浩 ソフトバンククリエイティブ デザインパターンの輪講をしたときのメモ。
生成に関するパターン (Creational Patterns) (1) Abstract Factory パターン 同種の複数のオブジェクト生成を concrete factory クラスとして種類ごとにまとめ、実際の生成は abstract factory クラスの抽象化されたインタフェース経由で行う。一貫した種類のインスタンスを作ることができる。
実装イメージ TvFactory tvFactory = new SonyTvFactory(); // Sony 製の TV を作るための TvFactory ... tvFactory.CreatePanel(); // SonyPanel を生成 tvFactory.CreateTuner(); // SonyTuner を生成 ... どのような手順で factory method を呼び出すかを定義すると、それは Builder パターンになる。
(2) Builder パターン オブジェクトの生成手順を共通化して使いまわし、異なるオブジェクトを作成。
実装イメージ Product* Director::CreateProduct(Builder *builder) { builder-&amp;gt;CreateStep1(); builder-&amp;gt;CreateStep2(); builder-&amp;gt;CreateStep3(); return builder-&amp;gt;GetProduct(); } 上記のメソッドに異なる Builder オブジェクトを渡せば、異なる Product が生成される。ただし、作成手順は共通化されている。</description></item><item><title>『オブジェクト開発の神髄 UML2.0を使ったアジャイルモデル駆動開発のすべて』スコット・W・アンブラー</title><link>https://maku.blog/p/9kuptdn/</link><pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate><guid>https://maku.blog/p/9kuptdn/</guid><description>オブジェクト開発の神髄 UML2.0を使ったアジャイルモデル駆動開発のすべて スコット・W・アンブラー 日経BP社 原題は『The Object Primer』。 スコット・アンブラーのフルライフサイクルオブジェクト指向テスト (FLOOT: Full Lifecycle Object-Oriented Testing) から、アジャイルな要求やアーキテクチャまでが、1 つにまとめられています。 実践 eXtreme プログラミングの共著者である Granville Miller は、「アジャイルになるとは、チームや自分自身に対する制約を取り払うこと」だと述べています。 本書ではその方法の神髄を学ぶことができます。
下記、重要そうなところや、個人的にビビッと来たところのメモです。
第1章: 最先端のソフトウェア開発 下記がアジャイルアライアンスのマニフェストであり、そこに集まった異なる方法論者全員に受け入れられたものである。 Individuals and interactions over processes and tools
プロセスやツールよりも個人や相互作用 すばらしいプロセスやツールは重要だが、結局は人の協力関係がすべて。 Working software over comprehensive documentation
わかりやすいドキュメントよりも動作するソフトウェア ドキュメントはシステムがなぜ、どのように構築されたか、どう使えばよいかを理解するためには重要。 Customer collaboration over contract negotiation
契約上の駆け引きよりも顧客との協調 契約は重要だが、契約を結んだからといってコミュニケーションが必要なくなるわけではない。 Responding to change over following a plan
計画を硬直的に守ることよりも変化への対応 プロジェクト計画は必要だが、柔軟でなければならない。ガントチャートを何枚も作成する必要はなく、非常に単純なものでよい。 自己組織化されたチームとは、チームのリーダーが開発メンバーの各自の役割や作業範囲を決めるのではなく、目標を共有するメンバーが共同作業を行う過程でチームの能力が最大限発揮されるようにメンバーの役割が自然に決まっていくようなチーム形態のこと。 成功を収めている組織は、大抵アジャイルなソフトウェア開発アプローチをとっているか、RUP または EUP を採用しているかのどちらかだ。RUP をアジャイルに使おうとしても現実には非常に困難（素材が多すぎてアジャイルなレベルまで切り詰められない）。アジャイルプロセスを取り入れたいなら、XP や FDD などを採用すべき。 MDA よりも、アジャイルモデル駆動開発 (AMDD: Agile Model-Driven Development) アプローチの方が、お絵かき式のモデリング方法に近く、現実的に大多数の開発者が採用できるアプローチである。 第2章: オブジェクト指向概念の基本 この章にはオブジェクト指向を知らない人のために、その概念について書かれています。</description></item><item><title>読書メモ『パターン指向リファクタリング入門』ジョシュア・ケリーエブスキー</title><link>https://maku.blog/p/2j4w6nn/</link><pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate><guid>https://maku.blog/p/2j4w6nn/</guid><description>パターン指向リファクタリング入門 ジョシュア・ケリーエブスキー 日経BP社 マーチン・ファウラーの『リファクタリング』の続編のような本で、デザインパターンを活用しながら、どのようにソフトウェアの設計を改善しけばよいかを示しています。 パターンの知識を付けるだけでなく、パターンの賢い使い方を知ることをテーマとしています。
この本の特徴として、現実のコード、あるいは実際に使用したコードを元にしたコードが使用されている点が挙げられます。 実際のプロジェクトにはリファクタリングに関して多くの制約があり、それは作り物のコードでは体験できないものです。
以下は全11章のメモです。
第1章: 本書を執筆した理由 コードを必要以上に柔軟にしたり洗練させることは、作り込みすぎ (over-engineering) である。チームのプログラマたち（特に新しく参加した人たち）は、無意味に大きく複雑なコードベースを扱わなければならなくなる。作り込みすぎは生産性を低下させる。作り込みすぎな設計を引き継ぐ場合、拡張や保守を行うのに多大な時間がかかる。 とはいうものの、作り込み不足 (under-engineering) は作り込みすぎよりずっと多い。 TDD と継続的なリファクタリングのリズムを身に着けるには経験と時間が必要だが、この開発スタイルに慣れてしまえば、別の方法で実稼働するコードを作成することは奇妙で、不安で、プロフェッショナルらしくないと感じるようになる。 優れた設計を行いたいなら、設計そのものを調べるよりも、その設計がどのように進化してきたかを知らべる方が有益だ。真の知恵は進化の中に存在する。 第2章: リファクタリング コードが明確でない臭いの元は、リファクタリングで取り除くべきであって、コメントで脱臭するべきではない。そのようなコードをリファクタリングをするときは、そのコードをよく理解している人に立ち会ってもらうのが一番である。 実際にリファクタリングを促すものは感情だ。私はコーディングの不快感を少しでも減らすためだけにリファクタリングを行うことがよくある。 マーチンファウラーの言葉「コンパイラが理解できるコードは誰にでも書ける。すぐれたプログラマは、人間にとってわかりやすいコードを書く。」 小さい単純なステップに分けることで、大きなステップよりも間違いなく早く目標にたどり着くことができる。 アプリチームとフレームワークチームを1つのチームにしておけば、それらがちぐはぐになることがない。フレームワークはアプリのニーズにもとづいて作られるので、価値のあるフレームワークのコードだけが作成される。ただし、このプロセスには継続的なリファクタリングが必須である。それによって、フレームワークとアプリを分けておくことができる。 第3章: パターン パターン魔 (patterns happy) は、パターンに魅了され、コードでパターンを使わずにいられなくなった人。誰しもがパターンを学ぶ過程でパターン魔になる。リファクタリングによってパターンを徐々にシステムに組み込んでいくようにすれば、パターンによって作り込みすぎる可能性は低くなる。 残念なことに多くプログラマは、デザインパターン本に例示されている各パターンの構造の図が、そのパターンを実装する唯一の方法だと間違えて捉えている。『デザインパターン』の共著者の一人であるジョン・ブリシデスも、「実際のコードにはいろいろなニーズや制約があり、示されている構造の図とは大きく異なってくる」と述べている。例示されている構造をそのまま実装するのではなく、パターンの実装を必要最小限に抑えることは、進化的設計のプラクティスである。目的は設計をよりよくすることであって、パターンを実装することではないことを忘れないこと。 一般的には、パターンを実装することで、コードの重複を取り除き、ロジックを単純化し、意図を伝えやすくし、柔軟性を高めることができるはずである。しかし、パターンに慣れていない人がコードを読むと、わかりにくい、複雑すぎると感じることがある。このような意見の食い違いが発生した場合は、パターンの使用をやめるより、チームがパターンを学ぶ方がよい。 第4章: コードの臭い もっともよくある設計の問題は、次のようなコードが原因である。 重複している 不明確である 複雑である メソッドの適した行数はどのくらいであろうか？ほとんどのメソッドが1～5行のコードからできているものが適切だと私は考えている。小さなメソッドを連鎖させても、性能はほとんど低下しない。プロファイラを使えば明らかである。 第5章: パターンを取り入れるリファクタリングのカタログ この章では、この本の読み進め方が述べられています。
第6章: 生成 Creation Method によるコンストラクタの置き換え (Replace Constructors with Creation Methods) 問題: 1つのクラスに複数のコンストラクタがあると、開発時にどのコンストラクタを使うかの判断が難しくなる。 対策: コンストラクタの代わりに、意図がわかりやすい Creation Method を作成し、それがオブジェクトのインスタンスを返すようにする。 利点: どのような種類のインスタンスが返されるかがコンストラクトよりもよく伝わる。 引数の数と型が同じであるコンストラクタを2つ作成できないといった、コンストラクタの制限事項を回避できる。 使われていない生成コードを見つけるのが簡単になる。 欠点: 生成方法が標準に準拠しなくなる。new によってインスタンスを生成するクラスと「Creation Method」を使うクラスとが混在する。 Factory による生成処理の置き換え (Move Creation Knowledge to Factory) 問題: クラスのインスタンス化に使うデータやコードが数多くのクラスに散在している。 対策: 生成に関する知識を1つの Factory クラスに移動する。 利点: 生成ロジックとインスタンス化／設定のための情報をまとめられる。 クライアントを生成ロジックから切り離すことができる。 欠点: 直接のインスタンス化に比べて設計が複雑になる。 Factory によるクラス群の隠蔽 (Encapsulate Classes with Factory) 問題: 1つのパッケージ内に存在して共通のインタフェースを実装しているクラス群を、クライアントが直接インスタンス化している。 対策: クラスのコンストラクタをパブリックでなくし、クライアントには Factory 経由でインスタンスを生成させる。 利点: さまざまな種類のインスタンスの生成を、意図が明確なメソッド経由で行うことで、単純化できる。 公開する必要のないクラスが隠蔽されるため、パッケージの「概念的重み」(by Bloch) を減らすことができる。 「インタフェースに対してプログラミングするのであって、実装に対してプログラミングするのではない」（書籍『デザインパターン』より）という原理を厳しく適用できる。 欠点 新しい種類のインスタンスを生成しなければならない場合には、Creation Method の新規作成や変更が必要になる。 Factory のソースコードではなくバイナリコードにしかアクセスできない場合には、カスタマイズが制限される。 Factory Method によるポリモーフィックな生成の導入 (Introduce Polymorphic Creation with Factory Method) 問題: 階層内のクラスが、オブジェクトの生成ステップを除いて同じようにメソッドを実装している。 対策: そういったメソッドをスーパークラスで1つにまとめ、そこで Factory Method を呼び出してインスタンス化の処理を行う。 利点: オブジェクトを生成するステップが異なることが原因で生じている重複が減る。 どこで生成が行われているか、どのようにオーバーライドされているかが効果的に伝えられる。 Factory Method で使うためにクラスがどの型を実装しなければならないのかが明確になる。 欠点: Factory Method を実装するクラスに不必要な引数を渡さなければならないことがある。 Builder による Composite の隠蔽 (Encapsulate Composite with Builder) 問題: Composite の構築処理が何度も出現したり、複雑であったり、あるいはエラーを起こしやすいものになっている。 対策: 詳細部分を Builder に任せることで、構築を単純化する。 利点: Composite を構築するクライアントコードを単純化できる。 Compsoite の生成にまつわる繰り返しやエラーを軽減できる。 クライアントと Composite の間の結合度が低くなる。 カプセル化された Composite や複合オブジェクトを異なった形式で表現できる。 欠点: インタフェースの意図が伝わりにくくなる可能性がある。 Singleton のインライン化 問題: コードからあるオブジェクトにアクセスしなければならないが、グローバルなアクセス方法は必要でない。 対策: Singleton の機能を1つのクラスに移し、そのクラスにオブジェクトを格納してアクセス手段を提供する。Singleton は削除する。 利点: オブジェクトの協調関係がより見えやすく明示的になる。 唯一のインスタンスを保護するための特別なコードを必要としない。 欠点: いくつもの層を経由してオブジェクトインスタンスを渡すのが面倒だったり困難だったりする場合には、設計が複雑になる。 第7章: 単純化 メソッドの構造化 (Compose Method) 問題: メソッドのロジックをすぐに理解できない。 対策: 意図の伝わりやすい、詳細レベルが揃った小さなステップ群にロジックを変換する。 利点: メソッドが何をし、それをどのように行うかが効果的に伝わる。 詳細レベルが揃った、わかりやすい名前がついた振る舞いに分割することで、メソッドを単純化できる。 欠点: 小さなメソッドが増えすぎることがある。 多数の小さなメソッドにロジックが分散するため、デバッグが困難になることがある。 Strategy による条件判断の置き換え (Replace Conditional Logic with Strategy) 問題: いくつかの計算方法のうちどれを実行するかを、メソッド内の条件ロジックで制御している。 対策: 計算方法ごとに Strategy を作成し、元のメソッドは計算処理を Strategy のインスタンスに委譲する。 利点: 条件ロジックが減る、あるいは取り除かれるため、アルゴリズムが明白になる。 アルゴリズムのバリエーションをクラス階層に移すため、個々のクラスが単純になる。 実行時にアルゴリズムを別のものに置き換えることができる。 欠点: 継承による解決策や「条件記述の単純化」のリファクタリングを使った方が簡単な場合には、それよりも設計が複雑になる。 アルゴリズムがコンテキストクラスとデータをやり取りする方法が複雑になる。 Decorator による拡張機能の書き換え (Move Embellishment to Decorator) 問題: コードがクラスの核となる責務に対する拡張機能を提供している。 対策: 拡張機能を Decorator に移動する。 利点: 拡張機能が取り除かれるのでクラスを単純にできる。 クラスの核となる責務と拡張機能とを効果的に区別できる。 関連する複数のクラスに含まれる重複した拡張ロジックを取り除くことができる。 欠点: 装飾対象のオブジェクトと装飾後のオブジェクトは異なるものになってしまう。 コードを理解したりデバッグしたりするのが困難な場合がある。 Decorator を組み合わせた際、互いに悪影響を及ぼす場合には、設計が複雑になる。 State による状態変化のための条件判断の置き換え (Replace State-Altering Conditionals with State) 問題: オブジェクトの状態遷移を制御する条件式が複雑である。 対策: 条件式ではなく、個々の状態とその間の遷移を扱う State クラスを使う。 利点: 状態を変えるための条件ロジックがなくなる、あるいは減る。 状態を変える複雑なロジックが単純になる。 状態を変えるロジックを俯瞰することができる。 欠点: 状態遷移ロジックがもともとわかりやすい場合には、設計が複雑になるだけである。 Composite による暗黙的なツリー構造の置き換え (Replace Implicit Tree with Composite) 問題: String などの基本データ型の表現によって、暗黙的なツリー構造を作っている。 対策: 基本データ型の表現を Composite で置き換える。 利点: ノードの形成、追加、削除といった手順の繰り返しをカプセル化できる。 同じようなロジックの増殖に対処する汎用的な方法となる。 クライアントの構築作業が簡単になる。 欠点: 暗黙的なツリー構造を作成するほうが簡単な場合には、設計が複雑になるだけである。 Command による条件付きディスパッチャの置き換え (Replace Conditional Dispatcher with Command) 問題: 条件ロジックによってリクエストを振り分け、アクションを実行している。 対策: アクションごとに Command を作成する。Command をコレクションに格納し、条件ロジックを Command を取り出して実行するコードに置き換える。 利点: 一律に同じやり方で、さまざまな振る舞いを実行するためのシンプルなメカニズムである。 どのリクエストをどのように処理するかを実行時に変更できる。 実装するためのコードが少ししか必要でない。 欠点: 条件付きディスパッチャで用が足りる場合には、設計が複雑になるだけである。 第8章: 汎用化 Template Method の形成 (Form Template Method) 問題: 複数のサブクラスの2つのメソッドが、同じ順番で似たようなステップを実行しているが、それらのステップはまったく同じではない。 対策: 各ステップを同じシグニチャを持つメソッド群に抽出してメソッドを汎用化し、それから汎用メソッドを引き上げて Template Method を形成する。 利点: 不変な振る舞いをスーパークラスに移すことで、サブクラス間の重複したコードを取り除くことができる。 汎用のアルゴリズムのステップを簡潔にし、効果的に伝えることができる。 サブクラスで簡単にアルゴリズムをカスタマイズできるようになる。 欠点: アルゴリズムを肉付けするためにサブクラスで多くのメソッドを実装しなければならない場合には、設計が複雑になる。 Composite の抽出 (Extract Composite) 問題: 階層内のサブクラスが同じ Composite を実装している。 対策: Composite を実装するスーパークラスを抽出する。 利点: 子に関する格納と処理の両ロジックの重複をなくすことができる。 子を処理するロジックを継承することが効果的に伝わる。 欠点: 特になし。 Composite による単数・複数別の処理の置き換え (Replace One/Many Distinctions with Composite) 問題: あるクラスが、1つのオブジェクトの場合と複数のオブジェクトの場合とを別のコードで処理している。 対策: Composite を使って、1つのコードで、1つのオブジェクトの場合と複数オブジェクトの場合との両方を処理できるようにする。 利点: 単数または複数のオブジェクト処理に関するコードの重複を取り除く。 単数または複数のオブジェクトを統一したやり方で処理できる。 複数オブジェクトの処理機能が豊富になる（OR表現など）。 欠点: Composite の構築時にタイプセーフかどうかの実行時チェックが必要なことがある。 Observer によるハードコードされた通知の置き換え (Replace Hard-Coded Notifications with Observer) 問題: 別のクラスの1つのインスタンスに対する通知がサブクラスにハードコーディングされている。 対策: Observer インタフェースを実装した任意のクラスの任意の数のインスタンスにスーパークラスが通知を送れるようにし、サブクラスを削除する。 利点: 観察対象と観察者の間の結合度が低くなる。 観察者が単数の場合にも複数の場合にも対処できる。 欠点: ハードコーディングされた通知で用が足りる場合には、設計が複雑になる。 通知がカスケードしている場合には、設計が複雑になる。 観察対象から観察者が削除されないと、メモリリークが起きる可能性がある。 Adapter によるインタフェースの統合 (Unify Interfaces with Adapter) 問題: クライアントが2つのクラスと相互作用していて、その1つが好ましいインタフェースを持っている。 対策: Adapter によってインタフェースを統合する。 利点: クライアントコードが同じインタフェースを通じて複数のクラスとやり取りできるため、コードの重複をなくしたり減らしたりできる。 共通のインタフェースを通じてオブジェクトやり取りできるため、クライアントコードが簡潔になる。 クライアントが複数のクラスとやり取りする方法を統合できる。 欠点: アダプタを作らなくてもクラスのインタフェースを変更できる場合には、設計が複雑になるだけである。 Adapter の抽出 (Extract Adapter) 問題: 1つのクラスが、コンポーネント、ライブラリ、API、あるいは他のエンティティの複数バージョンに対するアダプタになっている。 対策: コンポーネント、ライブラリ、API、あるいは他のエンティティのバージョンごとに Adapter を1つ抽出する。 利点: コンポーネントやライブラリや API のバージョンごとの違いを切り分けることができる。 クラスの責務を1つのバージョンに対応することだけに限定できる。 頻繁なコードの変更が必要な部分を限定できる。 欠点: Adapter で提供されていない重要な振る舞いをクライアントが使えなくなることがある。 Interpreter による暗黙的な言語処理の置き換え (Replace Implicit Language with Interpreter) ある言語の文法に関して、実装する必要のあるクラスが10程度までなら、Interpreter パターンを使ってモデリングするのが有効かもしれない。</description></item><item><title>C# で Microsoft Outlook の情報を取得する</title><link>https://maku.blog/p/eb5nx4z/</link><pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate><guid>https://maku.blog/p/eb5nx4z/</guid><description>組織内で Outlook を使用している場合は、プログラムから Outlook の情報（Exchange サーバの情報）を取得してごにょごにょすると、日々の作業を効率化できるかもしれません。 ここでは、C# から Outlook の情報を取得する方法を紹介します。
プログラミング言語に C# を使っていますが、もともとは VBA などのインタフェース (COM) として使われていたものなので、本格的にコーディングするときは、VBA のリファレンスが参考になります。
Outlook VBA リファレンス｜MSDN 以下のサンプルは、Visual Studio Community 2017 を使って確認しています。 Visual Studio で新規のプロジェクト（ここではシンプルにコンソールアプリを選択）を作成したら、まずは次のようにして Outlook のインタフェースの参照を追加してください。
プロジェクト(P) → 参照の追加(R) COM → Microsoft Outlook 14.0 Object Library 次のコードは、現在 Outlook を使用しているユーザの名前とメールアドレス、および上司の名前とメールアドレスを表示します。
using System; using Outlook = Microsoft.Office.Interop.Outlook; namespace ConsoleApp1 { class Program { static Outlook.Application outlookApp = new Outlook.Application(); // Exchange ユーザの情報を表示する static void ShowRecipientInfo(Outlook.ExchangeUser user) { Console.</description></item><item><title>Groovy をインストールする</title><link>https://maku.blog/p/vtfddwb/</link><pubDate>Fri, 30 May 2014 00:00:00 +0000</pubDate><guid>https://maku.blog/p/vtfddwb/</guid><description>MacOSX に Groovy をインストールする GVM: Groovy enVironment Manager を使うと複数バージョンの Groovy を管理することができます。 ここでは、GVM を使って Groovy の環境をインストールする手順を示します。
1. GVM のインストール $ curl -s get.gvmtool.net | bash これで、.bash_profile に以下のように追加されて gvm コマンドにパスが通ります。
#THIS MUST BE AT THE END OF THE FILE FOR GVM TO WORK!!! [[ -s &amp;#34;/Users/maku/.gvm/bin/gvm-init.sh&amp;#34; ]] &amp;amp;&amp;amp; source &amp;#34;/Users/maku/.gvm/bin/gvm-init.sh&amp;#34; 2. GVM で groovy のインストール $ gvm list groovy # インストール可能なバージョン確認 $ gvm install groovy # 最新版のインストール $ gvm install groovy 2.3.2 # バージョンを指定してインストール これで、groovy や groovysh コマンドが使用できるようになります。 使用中の groovy のバージョンの確認、切り替えは以下のように行います。</description></item><item><title>ソフトウェア開発手法のまとめ</title><link>https://maku.blog/p/herfwex/</link><pubDate>Sun, 04 Nov 2012 00:00:00 +0000</pubDate><guid>https://maku.blog/p/herfwex/</guid><description> XP (eXtream Programming) Kent Beck が指揮。 12 のプラクティスがあり、それぞれが連携している。 顧客との連携を重視する。「オンサイト顧客」というプラクティスでは、開発チームに顧客を含めてしまう。 SCRUM マイクロソフトで発祥。 マネジメントに焦点を当てたプロセス。 それぞれの役割に、強い権力付けがされているのが特徴。 1ヶ月のスプリントの間、スクラムマスターはスクラムチームを外の雑音から守る。 約10分で終わるスタンドアップミーティングで一日を始める。 クリスタル Alistair Cockburn が提唱するプロジェクトのテンプレート群。 メンバー数などから、クリスタルクリア、イエロー、オレンジ、レッドと分類される。 規模が大きくなると、ドキュメントを多く作るような規則になっていく。 ASD (Adaptive Software Development) Jim Highsmith と Sam Bayer が作成。 RAD (Rapid Application Development) の考えから作成されたアジャイル開発プロセス。 複雑性の理論により、「Speculate（推測） ➡ Collaborate（強調） ➡ Learn（学習）」の繰り返しでプロジェクトを順応させていく。 大規模開発は、メンバー数を増やすことで可能にする。 リーン開発 Poppendieck 夫妻が提唱。 無駄を省きながらプロジェクトを進める開発手法。 プロジェクト開発中の待ち時間になっている部分を少なくすることでプロジェクトを短期間に終わらせようとする考え。 FDD (Feature Driven Development) ボーランドが提唱。 開発の単位を「機能」とする。 機能のリリースは2週間単位。 機能の完成度は「赤：未着手」「黄：作業中」「緑：完成」の3段階のみで表現。 機能単位で担当を割り当てる。クラス単位で担当を決めることで、人同士のやり取りが、クラス間のやり取りに等しくなるという利点がある。 TDD (Test Driven Development) XP と同じ Kent Beck が提唱。 XP のテストファーストの考え方を、プロセス全体に適用したもの。 GUI の開発であっても、クラスを疎結合にすることで、テストの自動化を考える。</description></item><item><title>Linux の system 関数で任意のプログラムを実行する</title><link>https://maku.blog/p/neegpac/</link><pubDate>Wed, 22 Jun 2011 00:00:00 +0000</pubDate><guid>https://maku.blog/p/neegpac/</guid><description>Linux の system 関数は、プログラムの起動に失敗すると -1 を返します。 また、戻り値を WEXITSTATUS マクロにかけると、呼び出したプログラム自体の終了コード（正常時は 0）を取得することができます。
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; // system(), WEXITSTATUS bool doSystem(const char* command) { int ret = system(command); if (ret == -1) { fprintf(stderr, &amp;#34;ERROR: Cannot execute [%s]\n&amp;#34;, command); return false; } int exitStatus = WEXITSTATUS(ret); if (exitStatus != 0) { fprintf(stderr, &amp;#34;ERROR: [%s] returns error %d\n&amp;#34;, command, exitStatus); return false; } return true; }</description></item><item><title>『アジャイルソフトウェア開発の奥義』ロバート・C・マーチン（輪講メモ）</title><link>https://maku.blog/p/fn9ris5/</link><pubDate>Mon, 27 Oct 2008 00:00:00 +0000</pubDate><guid>https://maku.blog/p/fn9ris5/</guid><description>今回読み進める本は、『アジャイルソフトウェア開発の奥義』です。 第2版までは日本語版が出てます。内容的にはどの版のものを読んでも大丈夫。
第1版 アジャイルソフトウェア開発の奥義 ロバート・C・マーチン ソフトバンククリエイティブ 第2版 アジャイルソフトウェア開発の奥義 第2版 オブジェクト指向開発の神髄と匠の技 ロバート・C・マーチン ソフトバンククリエイティブ 第3版 Agile Principles, Patterns, and Practices in C# Robert C. Martin Prentice Hall ちなみに版が進むごとにサンプルコードの言語がより高水準な言語に変わっています。
第1版: C/C++ 第2版: Java 第3版: C# 第1版と第2版の内容はほとんど一緒だけど、第3版には各種ダイアグラムに関する説明の Chapter.14～20 が追加で挿入されています。 C/C++ のコードで読みたい場合は、書店からなくなる前に第1版を買っておいた方がよいです。
以下、各章ごとのポイントや議論のメモです。
Preface（序文） 単なるパターン集ではなく、そのパターンが「なぜ」生き残ったのかという過程を知ることが大切。 著者 Robert C. Martin（Object Mentor 社の創設者。社長）は、11個のオブジェクト指向の原則をまとめている。それに従って設計することで、デザインパターンですら導き出される。 Section I: Agile Development（アジャイル開発） ▼議論 Q. アジャイルを大規模な開発に適用できるか？
当初は大規模開発に適さないのでは？という懸念があったが、結果として大規模開発においてもアジャイル開発が主流になりつつある。ただ、いつものことだが日本では普及が遅れている。 大規模プロジェクトにおけるアジャイル開発に関しては、下記の記事や書籍が参考になる。
IBM Rational アジャイル開発 (そのうち3分の1は従業員数10,000人以上) の88%がアジャイル・プロセスを使用中または評価中である 書籍: 『The Object Primer（邦題: オブジェクト開発の神髄）』 アジャイルソフトウェア開発の長所の一つ: 規模の大小を問わずうまくいく。 The Rational Edge (72) アジャイル開発の広範な普及を目指して The Rational Edge (28) 大規模プロジェクトにアジャイルを適用する方法 「この大規模プロジェクトがアジャイル手法で管理できるのか？ 」という疑問が出てくる。その答えはイエスだ。 アジャイルソフトウェアプロセスを使ってオフショア開発（English） アジャイルソフトウェアプロセスを使ってオフショア開発（日本語） 分析と設計はオンショアで行い、構築をオフショアで行い、そして受入試験をオンショアで行うというやり方よりも、オフショアのチームにできるだけ多くの工程をやらせると問題が改善される。作業工程に沿って分けるのではなく、機能面に沿った分割を行う。 バグフィクスからやらせると、開発者は変更するよりも多くのコードを読むことになるので、コードベースに精通することができた。 オフショア開発においては、ドキュメントを作成するための時間を確保する必要がある。 最低限、IM と Wiki、良質の電話回線を用意すること。 Chapter 1.</description></item><item><title>クワイン・マクラスキー法 (Quine-McCluskey algorithm)</title><link>https://maku.blog/p/m4x8mcw/</link><pubDate>Fri, 20 Jun 2008 00:00:00 +0000</pubDate><guid>https://maku.blog/p/m4x8mcw/</guid><description>カルノー・マップを用いた Bool 演算の簡易化のような処理を、単純な処理の繰り返しで行えるようにしたもの。コンピュータでの処理に向いている。
クワイン・マクラスキー法 - Wikipedia Petrick&amp;rsquo;s method - Wikipedia</description></item><item><title>無名サブルーチンとクロージャ</title><link>https://maku.blog/p/r58xbyk/</link><pubDate>Wed, 30 Apr 2008 00:00:00 +0000</pubDate><guid>https://maku.blog/p/r58xbyk/</guid><description>『初めての Perl 第3版』より
クロージャ (closure) は非常に強力な概念で、Lisp の世界から持ってきたものです。クロージャとは、（荒っぽい言い方をすれば）自分自身のプライベートなデータを持っている無名サブルーチンです。
『続・初めての Perl』より
その時点で存在するすべてのレキシカル変数に、宣言された時点からアクセスできるサブルーチンをクロージャ (closure) と呼びます（クロージャは、もともとは数学用語です）。
例えば、以下の callback サーブルーチンは、レキシカル変数 $count を参照するクロージャといえます。
my $count = 0; sub callback { ++$count; }</description></item><item><title>数値計算系のプログラムメモ</title><link>https://maku.blog/p/m3p8hh6/</link><pubDate>Sat, 20 Oct 2001 00:00:00 +0000</pubDate><guid>https://maku.blog/p/m3p8hh6/</guid><description>n が 2 のべき乗か判定する long powerof2(long n) { return (n &amp;gt; 0) &amp;amp;&amp;amp; ((n &amp;amp; (n - 1)) == 0); }</description></item></channel></rss>