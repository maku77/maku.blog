<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Svelte on まくろぐ</title><link>https://maku.blog/tags/svelte/</link><description>Recent content in Svelte on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 15 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/svelte/index.xml" rel="self" type="application/rss+xml"/><item><title>Astro と Svelte を使ってみた所感（Web サイト作るときに何を使うか）</title><link>https://maku.blog/p/zays9nw/</link><pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate><guid>https://maku.blog/p/zays9nw/</guid><description>Next.js 以外の選択肢 2023 年現在、ある程度の規模の Web アプリを作れと言われたら、間違いなく Next.js (React.js) を使うのですが、小規模でほとんど静的な Web サイトを作れと言われたらちょっと迷ってしまうので、Astro と Svelte を少しだけ触ってみました。 もちろん、HTML や CSS を生でガリガリ書いて Web サイトを作ることもできますが、これらのフレームワークを使うことで、コンポーネント単位で Web ページを組み上げていくことができるのでコードの見通しがよくなります。
Astro vs. Svelte 感覚としては、完全に静的な Web サイトを作るのであれば Astro がとてもシンプル でよさそうです。 ただし、フォームなどの入力要素が必要な場合は、データバインドを独自構文でサポートしている Svelte の方が便利かもしれません。 Svelte は簡単に使えるというけれど、独自のテンプレート構文などは若干 Vue.js の匂いがするので、そこを嫌う人は多そうです。 一方、Astro であれば、ほとんどドキュメントすら読まなくても理解できるくらい簡単です（React.js 触ったことがあれば即理解できるはず）。
Astro も Svelte も npm でビルドツールをインストールしますが、Astro であれば package.json の dependencies セクションが astro モジュールだけになるくらいシンプルです。
package.json { // ... &amp;#34;dependencies&amp;#34;: { &amp;#34;astro&amp;#34;: &amp;#34;^2.10.7&amp;#34; } } Astro モジュール自体が TypeScript や Vite を内包してくれているので、別途 TypeScript や Vite をインストールする必要はないし、VS Code の Astro 拡張 をポチッとインストールするだけで、Prettier による自動整形や TypeScript の型チェックがかかるようになります。 Svelte の場合は、Svelte 本体の他にも、SvelteKit や Vite や TypeScript などが dependencies にごちゃっと入ってきてしまうので、シンプルさに欠けます（こちらを好む人もいるのかもですが）。 まぁどちらも npm create で雛形生成すれば、ほぼゼロコンフィグで使えるんですが、Hello World レベルのコードで依存ファイルが多くなるのは避けたいところです。</description></item></channel></rss>