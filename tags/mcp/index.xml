<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mcp on まくろぐ</title><link>https://maku.blog/tags/mcp/</link><description>Recent content in mcp on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 14 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/mcp/index.xml" rel="self" type="application/rss+xml"/><item><title>MCP サーバーを作ってみる</title><link>https://maku.blog/p/5c9y6vt/</link><pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate><guid>https://maku.blog/p/5c9y6vt/</guid><description>MCP とは MCP (Model Context Protocol) は、AI アプリケーションが外部のツールと連携するためのプロトコルで、Anthropic によってオープンソース化されました。 この標準化されたプロトコルに従って MCP サーバーを作っておくと、Claude Desktop や VS Code（GitHub Copilot 拡張）などの AI アプリケーション (MCP host) から簡単に接続できるようになります。 2025 年に入った頃から MCP はエージェント連携のためのプロトコルとしてデファクトスタンダードとみなされており、今後はさまざまな MCP サーバー、およびそれらをサポートする AI アプリケーションが登場してくると思われます。
有名どころの MCP サーバー実装は、Awesome MCP Servers などのサイトで紹介されています。
MCP サーバーは Python や Typescript 用のライブラリを使うと簡単に実装することができます。 MCP がどのような仕組みで動いているのかを理解するには、Hello World 的な MCP サーバーを作ってしまうのが一番早いです。 ここでは、Python で簡単な MCP サーバーを作って、AI アプリ（Claude Desktop と VS Code）と連携させてみます。
プロジェクトの作成 まず、Python のプロジェクトを作成します。 ここでは、プロジェクト管理ツールとして uv を使用します。 uv は Python スクリプト実行時に必要なライブラリを自動でインストールしてくれるので、複数の MCP サーバーを立ち上げるようなケースでは特に便利です（MCP サーバーごとに手動で venv 環境に入らなくて済みます）。</description></item></channel></rss>