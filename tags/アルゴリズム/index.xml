<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>アルゴリズム on まくろぐ</title><link>https://maku.blog/tags/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0/</link><description>Recent content in アルゴリズム on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Thu, 20 Nov 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0/index.xml" rel="self" type="application/rss+xml"/><item><title>文字列の類似度を計算する（LCS: 最長共通部分列）</title><link>https://maku.blog/p/a3jyhwd/</link><pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate><guid>https://maku.blog/p/a3jyhwd/</guid><description>LCS とは LCS: Longest Common Subsequence（最長共通部分列） 問題とは、2 つのシーケンスから最長の共通部分列を探す問題です。
参考: Wikipedia - Longest common subsequence problem 参考: Wikipedia - 最長共通部分列問題 部分列は飛び飛びの要素で構成されていても構いませんが、順番はキープして作成する必要があります。下記の例は、2 つの文字列とその最長共通部分列 (LCS) を示したものです。
文字列1: "ABCDCE" 文字列2: "ACCDEX" LCS: "ACCE" or "ACDE" LCS の計算方法 LCS は、動的計画法（DP: Dynamic Programming）の例題としてよく示される問題で、DP を使うことで効率的に答えを求めることができます。 考え方としては、下記のような文字列の入ったスタックから、任意の順番で文字を取り出していく問題だとみなすと分かりやすいです。
どちらか一方から要素を取り出すときは、文字をマッチさせないと考えます。 両方の要素を同時に取り出すときは、そのタイミングで文字をマッチさせる（LCS を構成する要素）と考えます。
このように、任意の順番で取り出してマッチングしていったときに、最大の一致数になったものが LCS ということになります。
ここでは、DP（動的計画法）を使って、文字列 1 と文字列 2 の LCS の長さを求めるコードを考えてみます。
文字列 1 の長さを Len1、文字列 2 の長さを Len2 とします。 dp[i][j] には、文字列 1 の j 文字目までの部分文字列と、文字列 2 の i 文字目までの部分文字列を一致させた場合 LCS の長さを格納します。 まず、0 文字の部分文字列同士の LCS は当然 0 文字なので、</description></item><item><title>文字列の類似度を計算する（レーベンシュタイン距離）</title><link>https://maku.blog/p/xjw9ju7/</link><pubDate>Tue, 18 Nov 2014 00:00:00 +0000</pubDate><guid>https://maku.blog/p/xjw9ju7/</guid><description>レーベンシュタイン距離とは レーベンシュタイン距離 (Levenshtein Distance) は、ある文字列に対して、何回の変更処理（削除、挿入、置換）を行えば対象の文字列に変換できるかを示します。
参考: Wikipedia - Levenshtein distance 参考: Wikipedia - レーベンシュタイン距離 レーベンシュタイン距離を効率的に計算するために、一般的に DP マッチング（動的計画法による距離計算）が使用されます（ここでは文字列間の距離を求めていますが、DP マッチングは単純に二つの波形を伸縮させながらマッチングするためにも使用されます）。 下記に詳細なマッチングの過程を示します。
2 つの文字列のレーベンシュタイン距離を求める 次のような文字列 A と文字列 B のレーベンシュタイン距離を求めるとします。
文字列 A = "CARROT" 文字列 B = "CAT" 文字列 A の文字数が i 文字、文字列 B の文字数が j 文字だとした場合の距離（最短変換数）を格納するための dp 配列を用意します。
dp[LenA + 1, LenB + 1] 下記の図は、この配列を表にしたものです。
セル内の数値は文字列を一致させるのに費やした変換手順数を表しており、dp[0, 0] は文字列 A も文字列 B も空文字だった場合の距離なので 0 です（空文字から空文字に変換するまでの手順数です）。 この表に左下から順番に手順数を埋めていき、最終的に右上の G が示している dp[7, 4] に文字列 A と文字列 B の距離が格納されます（"</description></item><item><title>Insertion Sort（挿入ソート）の実装練習</title><link>https://maku.blog/p/axg4xms/</link><pubDate>Tue, 10 Apr 2012 00:00:00 +0000</pubDate><guid>https://maku.blog/p/axg4xms/</guid><description>Insertion Sort 実装の練習！ void insertion_sort(int vals[], int size) { for (int i = 1; i &amp;lt; size; ++i) { // Insert vals[i] into the sorted sequence vals[0..i-1]. int key = vals[i]; int j = i - 1; while (j &amp;gt;= 0 &amp;amp;&amp;amp; vals[j] &amp;gt; key) { vals[j + 1] = vals[j]; --j; } vals[j + 1] = key; } } 降順ソート (descending order) にするには、vals[j] &amp;gt; key というところを、vals[j] &amp;lt; key にするだけで OK。</description></item></channel></rss>