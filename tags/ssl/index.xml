<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ssl on まくろぐ</title><link>https://maku.blog/tags/ssl/</link><description>Recent content in ssl on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 22 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/ssl/index.xml" rel="self" type="application/rss+xml"/><item><title>Certbot で Let's Encrypt の SSL 証明書を取得する（Web サーバーの HTTPS 対応）</title><link>https://maku.blog/p/io4gs6h/</link><pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/io4gs6h/</guid><description>何をするか？ 数年前に Google が Web サイトの常時 SSL 化を推奨し始めて、今では多くの Web サイトが HTTPS によるアクセスに対応しています。 Web サーバーを HTTPS (SSL) 対応するには、第三者機関となる認証局 (CA: Certificate Authority) から SSL 証明書を発行してもらう必要があるのですが、Let&amp;rsquo;s Encrypt という認証局を使うと、SSL 証明書を無料で発行してもらえます（感謝！）。
図: Let&amp;#39;s Encrypt &amp;#43; Certbot による HTTPS 対応 レンタルサーバー側で提供されている WordPress 環境などを使用している人は、知らないうちに Let&amp;rsquo;s Encrypt を使った HTTPS 化の恩恵を受けているかもしれません。 ここでは、VPS などで自力で Web サーバーを立ち上げている人が、HTTPS (SSL) 対応する方法を説明します。
Let&amp;rsquo;s Encrypt からの SSL 証明書の発行には、Certbot というツールを使うのが一般的です。 Certbot による証明書取得や、Web サーバー (nginx) のヴァーチャルホスト設定をまとめて行ってしまう Docker イメージなども存在しますが、ここでは、Certbot の基本的な振る舞いを理解するために、certbot コマンドを直接実行する前提で説明していきます。
Certbot とは Certbot は、Let&amp;rsquo;s Encrypt 認証局から SSL 証明書を発行してもらうためのクライアントツールで、以下のような作業を自動で行ってくれます。</description></item><item><title>電子証明書（SSL 証明書）申請用の CSR ファイルを作成する</title><link>https://maku.blog/p/vntjjaw/</link><pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate><guid>https://maku.blog/p/vntjjaw/</guid><description>CSR ファイルとは Web サーバーで HTTPS 通信を可能にするには、SSL 証明書を Web サーバーに設定する必要があります。 SSL 証明書は具体的には、Web サーバーの公開鍵に CA 認証局の電子署名を付けたものです。 SSL 証明書を CA 認証局に発行してもらうときに必要になるのが CSR: Certificate Signing Request（証明書署名要求） ファイルです。
参考: 電子署名と電子証明書の基礎 CA 認証局にもよりますが、DNS 経由でのドメインへのアクセス が可能であれば、SSL 証明書を申請することができます。 Web サーバーの立ち上げは後回しでよいということです。
CSR ファイル作成のポイント CSR ファイルには、Web サーバー用の公開鍵と、申請者の情報（ディスティングイッシュネーム）を含める必要があります。
CSR ファイル (.csr) を作成するには、対象となる Web サーバーで使用する秘密鍵が必要です（ただし、生成される CSR に含まれるのは公開鍵の方です）。秘密鍵と CSR ファイルの作成には openssl コマンドを使用します。 CSR に含める公開鍵は、そのサーバー専用 のものである必要があります。別のサーバー用に発行されている証明書で使われている公開鍵を使い回すことはできません。つまり、秘密鍵もそのサーバー専用のものを作るということです。ワイルドカード証明書でない場合は、サブドメインごとに秘密鍵＆証明書を作ることになります。 電子証明書の更新時には、毎回新しい秘密鍵を作成 してしまえば OK です（Web サーバーに設定し直す必要はありますが）。特に推奨されるわけではありませんが、CSR のディスティングイッシュネーム（Common Name や Organization）が変化しないケースでは、秘密鍵を使い回すことが可能です。 CSR ファイルを作成する 秘密鍵ファイルを作成する CSR ファイルを作成するには、サーバー用の秘密鍵が必要になるので、まずは openssl コマンドで秘密鍵を作成します。
秘密鍵の作成 $ openssl genrsa -out example.</description></item><item><title>Nginx の設定: http でアクセスされた場合に https にリダイレクトする</title><link>https://maku.blog/p/jowgstm/</link><pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/jowgstm/</guid><description>nginx サーバの SSL 対応（https 有効化）が終わった後は、http プロトコルによるアクセスは避けてもらいたいですね。 そのような場合は、下記のように設定しておけば、http でアクセスされた場合に、https で再度アクセスしてもらうようにクライアントに応答することができます（301 という値は、Moved Permanently を示す HTTP レスポンスコードです）。
/etc/nginx/conf.d/xxx.conf # http でアクセスされた場合 server { listen 80; server_name example.com; return 301 https://$host$request_uri; } # https でアクセスされた場合 server { server_name example.com; listen 443 ssl http2; # IPv4 listen [::]:443 ssl http2; # IPv6 ssl_certificate /etc/nginx/ssl/example.com-2024.crt; ssl_certificate_key /etc/nginx/ssl/example.com-2024.key; ssl_prefer_server_ciphers on; # サーバー側の暗号スイートを優先 location / { root /usr/share/nginx/html; index index.html; } } 結果として、Web ブラウザから http://example.com/ にアクセスすると、Web ブラウザは自動的に https://example.com/ という URL でアクセスし直すことになります。</description></item><item><title>電子署名と電子証明書の基礎</title><link>https://maku.blog/p/fzwyf7z/</link><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid>https://maku.blog/p/fzwyf7z/</guid><description>電子署名と電子証明書の話がごっちゃになってることが多いので、まとめておきます。
電子署名（デジタル署名）(digital signature) 「電子署名」とは、送信するデータに付加されるもので、そのデータの作成者やデータが改ざんされていないことをを確認するためのものです。 別の言い方をすると、受け取ったデータが第三者によって作られた 偽物でないことを確認するための印 です。
以下のような手順で、データが偽物でないかを確認します。
データ送信側の「電子署名の作成」手順 送信するデータのメッセージダイジェスト（ハッシュ値）を求める。 メッセージダイジェストを非公開鍵 (private key) で暗号化し、「電子署名」とする。 データ送信時には、データと「電子署名」を一緒に送る。 データ受信側の「電子署名の確認」手順 受信したデータのメッセージダイジェスト（ハッシュ値）を求める。 受信した「電子署名」を「送信者の公開鍵」で復号化し、メッセージダイジェストに戻す。 1 と 2 のメッセージダイジェストが等しければ、本人が作成したデータだと分かる。 上記の手順からも分かるように、一般的に「電子署名」の仕組みには、公開鍵暗号方式 が用いられます。 問題は、「送信者の公開鍵」の交換方法が定義されていないことです。 偽物の公開鍵が使われると、なりすましができてしまいます。 データの受信者は、何らかの方法で「本物の送信者の公開鍵」を取得しなければいけません。
もちろん、公開鍵を手渡しで渡すことができれば安全ですが、不特定多数のサーバーとの通信のたびにそんなことはやっていられません。 そこで、公開鍵が本物であるかを証明するための、「電子証明書」が必要になってきます。 電子証明書の仕組みを使うと、通信相手の Web サーバーから、直接そのサーバーの公開鍵を取得できるようになります。
電子証明書（デジタル証明書) (digital certificate) 電子証明書とは？ 公開鍵が偽物であると、公開鍵暗号方式は意味をなさなくなるため、公開鍵の正当性を証明することが重要になってきます。 電子証明書は、ある公開鍵が本物であることを証明する ためのものです。 大まかに書いてしまうと、公開鍵を次のようにパッケージングしたものです。
電子証明書 = 公開鍵 &amp;#43; 本物の公開鍵であることを示す署名 電子証明書の発行（公開鍵への署名） 電子証明書は、公開鍵が本物であることを示すためのものですが、その電子証明書自体が本物であることを示すために、末尾に電子署名 が付加されます。 その署名は、公開鍵を作成したユーザが行うこともあるし（オレオレ証明書）、信頼のおける第三者が行うこともあります。 通常は、信頼のおける第三者機関である 認証局 (CA: Certificate Authority) が電子証明書への署名を行い、電子証明書の発行を行います。
☝️ CA の署名は本物か 電子証明書は、そこに含まれている公開鍵が正しいものかどうかを、CA 署名で確認できるようにしたものですが、その CA 署名自体が本物なのかという問題があります。 CA 署名の真正性も電子証明書によって確かめます。 Windows や macOS などの OS には、有名どころの CA の電子証明書（ルート CA 証明書）があらかじめインストールされており、サーバー証明書内の CA 署名が本物であるかを調べられるようになっています（参考: macOS で利用できるルート証明書の一覧）。</description></item></channel></rss>