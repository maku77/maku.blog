<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jekyll on まくろぐ</title><link>https://maku.blog/tags/jekyll/</link><description>Recent content in Jekyll on まくろぐ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 17 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku.blog/tags/jekyll/index.xml" rel="self" type="application/rss+xml"/><item><title>Jekyll と Hugo を共存させて GitHub Actions でビルドする</title><link>https://maku.blog/p/qbmv6fp/</link><pubDate>Wed, 17 Aug 2022 00:00:00 +0000</pubDate><guid>https://maku.blog/p/qbmv6fp/</guid><description>何をするか？ こことは違う Web サイト (GitHub Pages) の話ですが、いい加減 Jekyll での Web サイト管理は限界 になってきたので、重い腰を上げて全面的に Hugo に乗り換えようと思います。 待っていれば Jekyll も高速化されるかなという淡い期待を抱いて 3 年が経ちましたが、一向にその気配はないので、残念ですがここで Jekyll は見限ります（決して Ruby と Golang の速度の差だけだとは思いませんが、やはり Golang 製のツールの方が高速な傾向はあるのかも）。
とはいえ、現状 Jekyll で管理している Web ページは何千ページにも膨れ上がっており、一気に乗り換えるのは困難です。 そこで、Jekyll 運用されている Web サイトに、少しずつ Hugo 管理のページを加えていく、という作戦を取りたいと思います。 ドメイン名はこれまで通り xxx.github.io を使いたいので、ホスティングはこれまで通り GitHub Pages で行い、ビルドやデプロイには GitHub Actions を使うことにします。
基本方針 GitHub Pages のデフォルトの仕組みとして、Markdown ファイルをソース用リポジトリに置いておくだけで、Jekyll で HTML に変換して公開してくれるというのがあるのですが、今回はこの仕組みは使えません。 なぜなら、Jekyll によるビルド結果と、Hugo によるビルド結果をマージしたものをデプロイしなければいけないからです。 イメージとしては、GitHub リポジトリに push したときに、GitHub Actions で次のような処理を実行できればうまくいくはずです。
図: GitHub Actions でやること Jekyll プロジェクトの Markdown ファイルをビルドする Jekyll のビルド対象から Hugo のディレクトリを除外しておきます Hugo プロジェクトの Markdown ファイルをビルドする Hugo プロジェクトのビルド結果を Jekyll プロジェクトのビルド結果にマージする 同名のファイルは上書きしないことにします（先輩である Jekyll の出力を優先） GitHub Pages のホスティング先にデプロイ ここでは gh-pages ブランチを公開ブランチとして使います Hugo のプロジェクトをフラットに配置してしまうと、content ディレクトリや layouts ディレクトリが混在してわかりにくくなるので、Hugo 側のファイル群は、hugo-files ディレクトリを作ってそこに配置することにします。 最終的に、Jekyll から Hugo への以降がすべて完了したら、この中のファイル群をルートに移動させる想定です。</description></item><item><title>GitHub Pages で Jekyll による変換を無効化する（プッシュした HTML をそのまま表示する）</title><link>https://maku.blog/p/my8fmsy/</link><pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate><guid>https://maku.blog/p/my8fmsy/</guid><description>GitHub プロジェクトの設定画面から、GitHub Pages を有効化すると、簡単にウェブサイトをホスティングすることができます。 デフォルトでは、リポジトリ内の Markdown ファイル (.md) が Jekyll によって HTML に変換されるのですが、直接 HTML ファイルをデプロイする場合は、この変換処理は無駄です。
そのような場合は、次のようにして Jekyll による変換を無効化できます。
リポジトリのルート（GitHub Pages のソースディレクトリ）に .nojekyll ファイルを置く これだけです。
Hugo などの静的 Web サイト生成ツールで作成したサイトをデプロイするような場合は、この設定を行っておくと、ファイルのプッシュ後に GitHub Pages に反映されるまでの時間がほんの少し早くなるかもしれません。
速度を気にしない場合はこの設定をする必要はありませんが、プッシュする Web サイトリソース内に、アンダースコア (_) で始まるファイルやディレクトリなどが含まれている場合は、この設定は必須になります。 なぜなら、Jekyll がアンダースコアで始まるファイルやディレクトリを取り除いてしまうからです。
GitHub Pages のソースブランチとして gh-pages ブランチを設定している場合は、そのブランチのルートに .nojekyll を配置しなければいけないことに注意してください。 ちなみに、GitHub Actions でデプロイするときに、peaceiris/actions-gh-pages を使っている場合は、自動的にデプロイ先のブランチ (gh-pages) に .nojekyll ファイルを作成してくれます。
- name:Deployuses:peaceiris/actions-gh-pages@v3with:github_token:${{ secrets.GITHUB_TOKEN }}publish_dir:.</description></item><item><title>GitHub Pages は早く Jekyll から Hugo に乗り換えるべき</title><link>https://maku.blog/p/xwfwdy6/</link><pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/xwfwdy6/</guid><description>GitHub Pages は HTML ジェネレーターとして昔から Jekyll を採用しているのですが、Jekyll ははっきり言って遅すぎるし、ある程度のサイト規模になると使い物になりません。 セットアップもいろいろなライブラリの依存があって複雑です。 バージョンアップのたびにストレスが溜まります。
世の中には爆速なサイトジェネレーターの Hugo があります。
Jekyll では Web サイトが数千ページ規模になってくると、1 つの記事を 1 文字変更しただけで再ビルドに何分もかかります。 一方、Hugo であれば少なくとも数秒で終わります。
Hugo は爆速なだけでなく、実行環境も 1 バイナリだけ（Windows であれば hugo.exe のみ）で、導入もバージョンアップもストレスフリーです。 開発者の Bjørn Erik Pedersen 氏がめちゃくちゃやる気があるので、常に進化を続けていて、テンプレートファイルも柔軟にカスタマイズできます。
GitHub Pages は一刻も早く Jekyll から Hugo に乗り換えるべきだと思います。 移行にはある程度痛みを伴うかもしれませんが、ユーザーも GitHub 社（Microsoft により買収済み）も幸せになれるはずです。
（2022-08-17: 追記）Jekyll から Hugo への乗り換えを始めました</description></item><item><title>Jekyll (GitHub Pages) でページの最終更新日を表示する</title><link>https://maku.blog/p/6ez7nuf/</link><pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate><guid>https://maku.blog/p/6ez7nuf/</guid><description>Jekyll では、HTML ファイルを生成するために Markdown 形式で記事を作成するのですが、先頭のフロントマターと呼ばれる部分に任意の変数を定義することができます。
下記の例には、記事の作成日 (date) と、最終更新日 (lastmod) を入れてあります。
sample.md ---title:&amp;#34;ページタイトル&amp;#34;date:&amp;#34;2015-01-01&amp;#34;lastmod:&amp;#34;2019-09-12&amp;#34;---本文... これらの情報をレイアウトファイルから参照するには、下記のようにします。 ここでは、最終更新日 (lastmod) の情報があればそちらを、なければ作成日 (date) を表示するようにしています。 フロントマターでの lastmod の指定はオプショナル扱いということです。
{% if page.lastmod %} {% assign lastmod = page.lastmod %} {% else %} {% assign lastmod = page.date %} {% endif %} &amp;lt;span class=&amp;#34;date&amp;#34;&amp;gt;{{ lastmod }}&amp;lt;/span&amp;gt; HTML5 の time 要素や、schema.org の構造化データマークアップを使ってちゃんと SEO 対策するのであれば、下記のような感じでテンプレートを作成するのがよいでしょう。
default.html（抜粋） {% if page.lastmod %} {% assign lastmod = page.lastmod %} {% else %} {% assign lastmod = page.</description></item></channel></rss>